
game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c0c  08003c0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c0c  08003c0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000070  08003c84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08003c84  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b296  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b46  00000000  00000000  0002b32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002ce78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001777d  00000000  00000000  0002e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde8  00000000  00000000  00045b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008770f  00000000  00000000  0005295d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f4  00000000  00000000  000da0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a78 	.word	0x08003a78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a78 	.word	0x08003a78

0800014c <is_at_bottom_boundary>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool is_at_bottom_boundary(const Circle* circle) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    return circle->y >= SSD1306_HEIGHT - circle->radius;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800015a:	461a      	mov	r2, r3
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000162:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000166:	429a      	cmp	r2, r3
 8000168:	bfac      	ite	ge
 800016a:	2301      	movge	r3, #1
 800016c:	2300      	movlt	r3, #0
 800016e:	b2db      	uxtb	r3, r3
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr

0800017a <is_at_top_boundary>:

bool is_at_top_boundary(const Circle* circle) {
 800017a:	b480      	push	{r7}
 800017c:	b083      	sub	sp, #12
 800017e:	af00      	add	r7, sp, #0
 8000180:	6078      	str	r0, [r7, #4]
    return circle->y <= circle->radius;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	bfd4      	ite	le
 8000192:	2301      	movle	r3, #1
 8000194:	2300      	movgt	r3, #0
 8000196:	b2db      	uxtb	r3, r3
}
 8000198:	4618      	mov	r0, r3
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <is_at_vertical_boundary>:

bool is_at_vertical_boundary(const Circle* circle) {
 80001a2:	b580      	push	{r7, lr}
 80001a4:	b082      	sub	sp, #8
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
    return is_at_bottom_boundary(circle) || is_at_top_boundary(circle);
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f7ff ffce 	bl	800014c <is_at_bottom_boundary>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d105      	bne.n	80001c2 <is_at_vertical_boundary+0x20>
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f7ff ffdf 	bl	800017a <is_at_top_boundary>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <is_at_vertical_boundary+0x24>
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <is_at_vertical_boundary+0x26>
 80001c6:	2300      	movs	r3, #0
 80001c8:	f003 0301 	and.w	r3, r3, #1
 80001cc:	b2db      	uxtb	r3, r3
}
 80001ce:	4618      	mov	r0, r3
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <is_at_left_boundary>:

bool is_at_left_boundary(const Circle* circle) {
 80001d6:	b480      	push	{r7}
 80001d8:	b083      	sub	sp, #12
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
    return circle->x <= circle->radius;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	bfd4      	ite	le
 80001ee:	2301      	movle	r3, #1
 80001f0:	2300      	movgt	r3, #0
 80001f2:	b2db      	uxtb	r3, r3
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr

080001fe <is_at_right_boundary>:

bool is_at_right_boundary(const Circle* circle) {
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
    return circle->x >= SSD1306_WIDTH - circle->radius;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800020c:	461a      	mov	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000214:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000218:	429a      	cmp	r2, r3
 800021a:	bfac      	ite	ge
 800021c:	2301      	movge	r3, #1
 800021e:	2300      	movlt	r3, #0
 8000220:	b2db      	uxtb	r3, r3
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <is_at_horizontal_boundary>:

bool is_at_horizontal_boundary(const Circle* circle) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    return is_at_left_boundary(circle) || is_at_right_boundary(circle);
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	f7ff ffce 	bl	80001d6 <is_at_left_boundary>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d105      	bne.n	800024c <is_at_horizontal_boundary+0x20>
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffdc 	bl	80001fe <is_at_right_boundary>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <is_at_horizontal_boundary+0x24>
 800024c:	2301      	movs	r3, #1
 800024e:	e000      	b.n	8000252 <is_at_horizontal_boundary+0x26>
 8000250:	2300      	movs	r3, #0
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
}
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <toggle_circle_y_mode>:

VerticalDirection toggle_circle_y_mode(VerticalDirection circle_y_mode) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
    return circle_y_mode = !circle_y_mode;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	bf0c      	ite	eq
 8000270:	2301      	moveq	r3, #1
 8000272:	2300      	movne	r3, #0
 8000274:	b2db      	uxtb	r3, r3
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	79fb      	ldrb	r3, [r7, #7]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fda1 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f863 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f8ff 	bl	8000494 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000296:	f000 f8a5 	bl	80003e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800029a:	f000 f8d1 	bl	8000440 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  srand(HAL_GetTick());
 800029e:	f000 fdef 	bl	8000e80 <HAL_GetTick>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fb7b 	bl	80029a0 <srand>
  ssd1306_Init();
 80002aa:	f000 f945 	bl	8000538 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 80002ae:	f000 fb3b 	bl	8000928 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 80002b2:	f000 fb43 	bl	800093c <ssd1306_Clear>
  ssd1306_SetColor(White);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 f92e 	bl	8000518 <ssd1306_SetColor>

  Circle circle = {.radius = 10, .x = SSD1306_CENTER_X, .y = 30};
 80002bc:	4a25      	ldr	r2, [pc, #148]	; (8000354 <main+0xd0>)
 80002be:	463b      	mov	r3, r7
 80002c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c4:	6018      	str	r0, [r3, #0]
 80002c6:	3304      	adds	r3, #4
 80002c8:	8019      	strh	r1, [r3, #0]

  VerticalDirection vertical_direction = DOWN;
 80002ca:	2301      	movs	r3, #1
 80002cc:	71fb      	strb	r3, [r7, #7]
  HorizontalDirection horizontal_direction = STRAIGHT;
 80002ce:	2302      	movs	r3, #2
 80002d0:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_circle_y(&circle, vertical_direction);
 80002d2:	79fa      	ldrb	r2, [r7, #7]
 80002d4:	463b      	mov	r3, r7
 80002d6:	4611      	mov	r1, r2
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fb95 	bl	8000a08 <update_circle_y>
	  update_circle_x(&circle, horizontal_direction);
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	463b      	mov	r3, r7
 80002e2:	4611      	mov	r1, r2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fb65 	bl	80009b4 <update_circle_x>



	  ssd1306_Clear();
 80002ea:	f000 fb27 	bl	800093c <ssd1306_Clear>
	  ssd1306_FillCircle(circle.x,  circle.y, circle.radius);
 80002ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80002f2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80002f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa7e 	bl	80007fc <ssd1306_FillCircle>

	  if (is_at_vertical_boundary(&circle)) {
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff4d 	bl	80001a2 <is_at_vertical_boundary>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d010      	beq.n	8000330 <main+0xac>
		  vertical_direction = toggle_circle_y_mode(vertical_direction);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffa5 	bl	8000260 <toggle_circle_y_mode>
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
		  horizontal_direction = (HorizontalDirection) (rand() % 4);
 800031a:	f002 fb6f 	bl	80029fc <rand>
 800031e:	4603      	mov	r3, r0
 8000320:	425a      	negs	r2, r3
 8000322:	f003 0303 	and.w	r3, r3, #3
 8000326:	f002 0203 	and.w	r2, r2, #3
 800032a:	bf58      	it	pl
 800032c:	4253      	negpl	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
	  }

	  if (is_at_horizontal_boundary(&circle)) {
 8000330:	463b      	mov	r3, r7
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff7a 	bl	800022c <is_at_horizontal_boundary>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d006      	beq.n	800034c <main+0xc8>
		  horizontal_direction = !horizontal_direction;
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b00      	cmp	r3, #0
 8000342:	bf0c      	ite	eq
 8000344:	2301      	moveq	r3, #1
 8000346:	2300      	movne	r3, #0
 8000348:	b2db      	uxtb	r3, r3
 800034a:	71bb      	strb	r3, [r7, #6]
	  }

	  ssd1306_UpdateScreen();
 800034c:	f000 f98e 	bl	800066c <ssd1306_UpdateScreen>
	  update_circle_y(&circle, vertical_direction);
 8000350:	e7bf      	b.n	80002d2 <main+0x4e>
 8000352:	bf00      	nop
 8000354:	08003a90 	.word	0x08003a90

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	; 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fb12 	bl	8002990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fddd 	bl	8001f60 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ac:	f000 f8a0 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2102      	movs	r1, #2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 f84a 	bl	8002464 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d6:	f000 f88b 	bl	80004f0 <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3740      	adds	r7, #64	; 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C1_Init+0x50>)
 80003ea:	4a13      	ldr	r2, [pc, #76]	; (8000438 <MX_I2C1_Init+0x54>)
 80003ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_I2C1_Init+0x50>)
 80003f0:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_I2C1_Init+0x58>)
 80003f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_I2C1_Init+0x50>)
 8000402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <MX_I2C1_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_I2C1_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <MX_I2C1_Init+0x50>)
 8000422:	f000 ffc3 	bl	80013ac <HAL_I2C_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 f860 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000008c 	.word	0x2000008c
 8000438:	40005400 	.word	0x40005400
 800043c:	00061a80 	.word	0x00061a80

08000440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_USART1_UART_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800044c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART1_UART_Init+0x4c>)
 8000478:	f002 f982 	bl	8002780 <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000482:	f000 f835 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200000e0 	.word	0x200000e0
 8000490:	40013800 	.word	0x40013800

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_GPIO_Init+0x58>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <MX_GPIO_Init+0x58>)
 80004a0:	f043 0320 	orr.w	r3, r3, #32
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_GPIO_Init+0x58>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0320 	and.w	r3, r3, #32
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_GPIO_Init+0x58>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <MX_GPIO_Init+0x58>)
 80004b8:	f043 0304 	orr.w	r3, r3, #4
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_GPIO_Init+0x58>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0304 	and.w	r3, r3, #4
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_GPIO_Init+0x58>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a07      	ldr	r2, [pc, #28]	; (80004ec <MX_GPIO_Init+0x58>)
 80004d0:	f043 0308 	orr.w	r3, r3, #8
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_GPIO_Init+0x58>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0308 	and.w	r3, r3, #8
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>

080004fa <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 800050c:	2340      	movs	r3, #64	; 0x40
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
	...

08000518 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <ssd1306_SetColor+0x1c>)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	7153      	strb	r3, [r2, #5]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000128 	.word	0x20000128

08000538 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	2205      	movs	r2, #5
 8000542:	2178      	movs	r1, #120	; 0x78
 8000544:	4846      	ldr	r0, [pc, #280]	; (8000660 <ssd1306_Init+0x128>)
 8000546:	f001 f96f 	bl	8001828 <HAL_I2C_IsDeviceReady>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d004      	beq.n	800055a <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8000550:	4b44      	ldr	r3, [pc, #272]	; (8000664 <ssd1306_Init+0x12c>)
 8000552:	2200      	movs	r2, #0
 8000554:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8000556:	2300      	movs	r3, #0
 8000558:	e07f      	b.n	800065a <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 fc9a 	bl	8000e94 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8000560:	20ae      	movs	r0, #174	; 0xae
 8000562:	f000 f9f7 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8000566:	20d5      	movs	r0, #213	; 0xd5
 8000568:	f000 f9f4 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 800056c:	20f0      	movs	r0, #240	; 0xf0
 800056e:	f000 f9f1 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8000572:	20a8      	movs	r0, #168	; 0xa8
 8000574:	f000 f9ee 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8000578:	f7ff ffc6 	bl	8000508 <height>
 800057c:	4603      	mov	r3, r0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	3b01      	subs	r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f9e5 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800058a:	20d3      	movs	r0, #211	; 0xd3
 800058c:	f000 f9e2 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f9df 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8000596:	2040      	movs	r0, #64	; 0x40
 8000598:	f000 f9dc 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 800059c:	208d      	movs	r0, #141	; 0x8d
 800059e:	f000 f9d9 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80005a2:	2014      	movs	r0, #20
 80005a4:	f000 f9d6 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 80005a8:	2020      	movs	r0, #32
 80005aa:	f000 f9d3 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f9d0 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 80005b4:	20a0      	movs	r0, #160	; 0xa0
 80005b6:	f000 f9cd 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 80005ba:	20c0      	movs	r0, #192	; 0xc0
 80005bc:	f000 f9ca 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80005c0:	20da      	movs	r0, #218	; 0xda
 80005c2:	f000 f9c7 	bl	8000954 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <ssd1306_Init+0x130>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d103      	bne.n	80005d6 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80005ce:	2012      	movs	r0, #18
 80005d0:	f000 f9c0 	bl	8000954 <ssd1306_WriteCommand>
 80005d4:	e006      	b.n	80005e4 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <ssd1306_Init+0x130>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d102      	bne.n	80005e4 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 f9b8 	bl	8000954 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 80005e4:	2081      	movs	r0, #129	; 0x81
 80005e6:	f000 f9b5 	bl	8000954 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <ssd1306_Init+0x130>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80005f2:	20cf      	movs	r0, #207	; 0xcf
 80005f4:	f000 f9ae 	bl	8000954 <ssd1306_WriteCommand>
 80005f8:	e006      	b.n	8000608 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <ssd1306_Init+0x130>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d102      	bne.n	8000608 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 8000602:	208f      	movs	r0, #143	; 0x8f
 8000604:	f000 f9a6 	bl	8000954 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8000608:	20d9      	movs	r0, #217	; 0xd9
 800060a:	f000 f9a3 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800060e:	20f1      	movs	r0, #241	; 0xf1
 8000610:	f000 f9a0 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8000614:	20db      	movs	r0, #219	; 0xdb
 8000616:	f000 f99d 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 800061a:	2040      	movs	r0, #64	; 0x40
 800061c:	f000 f99a 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8000620:	20a4      	movs	r0, #164	; 0xa4
 8000622:	f000 f997 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8000626:	20a6      	movs	r0, #166	; 0xa6
 8000628:	f000 f994 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 800062c:	202e      	movs	r0, #46	; 0x2e
 800062e:	f000 f991 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8000632:	20af      	movs	r0, #175	; 0xaf
 8000634:	f000 f98e 	bl	8000954 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <ssd1306_Init+0x12c>)
 800063a:	2200      	movs	r2, #0
 800063c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <ssd1306_Init+0x12c>)
 8000640:	2200      	movs	r2, #0
 8000642:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <ssd1306_Init+0x12c>)
 8000646:	2200      	movs	r2, #0
 8000648:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 800064a:	f000 f977 	bl	800093c <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800064e:	f000 f80d 	bl	800066c <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <ssd1306_Init+0x12c>)
 8000654:	2201      	movs	r2, #1
 8000656:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000008c 	.word	0x2000008c
 8000664:	20000128 	.word	0x20000128
 8000668:	20000530 	.word	0x20000530

0800066c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	e019      	b.n	80006ac <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	3b50      	subs	r3, #80	; 0x50
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f968 	bl	8000954 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f965 	bl	8000954 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 800068a:	2010      	movs	r0, #16
 800068c:	f000 f962 	bl	8000954 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	01db      	lsls	r3, r3, #7
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <ssd1306_UpdateScreen+0x50>)
 8000696:	189c      	adds	r4, r3, r2
 8000698:	f7ff ff2f 	bl	80004fa <width>
 800069c:	4603      	mov	r3, r0
 800069e:	4619      	mov	r1, r3
 80006a0:	4620      	mov	r0, r4
 80006a2:	f000 f96f 	bl	8000984 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	3301      	adds	r3, #1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d9e2      	bls.n	8000678 <ssd1306_UpdateScreen+0xc>
	}
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	20000130 	.word	0x20000130

080006c0 <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	460b      	mov	r3, r1
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	4613      	mov	r3, r2
 80006d0:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 80006d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f2c0 8086 	blt.w	80007e8 <ssd1306_DrawHorizontalLine+0x128>
 80006dc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80006e0:	f7ff ff12 	bl	8000508 <height>
 80006e4:	4603      	mov	r3, r0
 80006e6:	429c      	cmp	r4, r3
 80006e8:	da7e      	bge.n	80007e8 <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 80006ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da06      	bge.n	8000700 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 80006f2:	887a      	ldrh	r2, [r7, #2]
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	807b      	strh	r3, [r7, #2]
    x = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 8000700:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000708:	18d4      	adds	r4, r2, r3
 800070a:	f7ff fef6 	bl	80004fa <width>
 800070e:	4603      	mov	r3, r0
 8000710:	429c      	cmp	r4, r3
 8000712:	dd07      	ble.n	8000724 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 8000714:	f7ff fef1 	bl	80004fa <width>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 8000724:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dd5f      	ble.n	80007ec <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <ssd1306_DrawHorizontalLine+0x134>)
 800072e:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 8000730:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000734:	10db      	asrs	r3, r3, #3
 8000736:	b21b      	sxth	r3, r3
 8000738:	461c      	mov	r4, r3
 800073a:	f7ff fede 	bl	80004fa <width>
 800073e:	4603      	mov	r3, r0
 8000740:	fb04 f303 	mul.w	r3, r4, r3
 8000744:	461a      	mov	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 800074c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	2201      	movs	r2, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <ssd1306_DrawHorizontalLine+0x138>)
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d034      	beq.n	80007d6 <ssd1306_DrawHorizontalLine+0x116>
 800076c:	2b02      	cmp	r3, #2
 800076e:	dc3e      	bgt.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <ssd1306_DrawHorizontalLine+0xdc>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d13a      	bne.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 8000778:	e007      	b.n	800078a <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	60fa      	str	r2, [r7, #12]
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	7afa      	ldrb	r2, [r7, #11]
 8000784:	430a      	orrs	r2, r1
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	701a      	strb	r2, [r3, #0]
    	while (length--)
 800078a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800078e:	b29a      	uxth	r2, r3
 8000790:	3a01      	subs	r2, #1
 8000792:	b292      	uxth	r2, r2
 8000794:	807a      	strh	r2, [r7, #2]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1ef      	bne.n	800077a <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 800079a:	e028      	b.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 800079c:	7afb      	ldrb	r3, [r7, #11]
 800079e:	43db      	mvns	r3, r3
 80007a0:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 80007a2:	e007      	b.n	80007b4 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	60fa      	str	r2, [r7, #12]
 80007aa:	7819      	ldrb	r1, [r3, #0]
 80007ac:	7afa      	ldrb	r2, [r7, #11]
 80007ae:	400a      	ands	r2, r1
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	701a      	strb	r2, [r3, #0]
    	while (length--)
 80007b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	3a01      	subs	r2, #1
 80007bc:	b292      	uxth	r2, r2
 80007be:	807a      	strh	r2, [r7, #2]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1ef      	bne.n	80007a4 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 80007c4:	e013      	b.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	7819      	ldrb	r1, [r3, #0]
 80007ce:	7afa      	ldrb	r2, [r7, #11]
 80007d0:	404a      	eors	r2, r1
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]
    	while (length--)
 80007d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	3a01      	subs	r2, #1
 80007de:	b292      	uxth	r2, r2
 80007e0:	807a      	strh	r2, [r7, #2]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1ef      	bne.n	80007c6 <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 80007e6:	e002      	b.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 80007ec:	bf00      	nop
  }
}
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	20000130 	.word	0x20000130
 80007f8:	20000128 	.word	0x20000128

080007fc <ssd1306_FillCircle>:
	ssd1306_DrawPixel(x0, y0 - radius);
}


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	f1c3 0301 	rsb	r3, r3, #1
 800081c:	b29b      	uxth	r3, r3
 800081e:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 8000820:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da0d      	bge.n	8000844 <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	3301      	adds	r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	81fb      	strh	r3, [r7, #14]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b29a      	uxth	r2, r3
 8000836:	897b      	ldrh	r3, [r7, #10]
 8000838:	4413      	add	r3, r2
 800083a:	b29b      	uxth	r3, r3
 800083c:	3303      	adds	r3, #3
 800083e:	b29b      	uxth	r3, r3
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	e015      	b.n	8000870 <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	3301      	adds	r3, #1
 8000848:	b29b      	uxth	r3, r3
 800084a:	81fb      	strh	r3, [r7, #14]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b29a      	uxth	r2, r3
 8000852:	897b      	ldrh	r3, [r7, #10]
 8000854:	4413      	add	r3, r2
 8000856:	b29a      	uxth	r2, r3
 8000858:	89bb      	ldrh	r3, [r7, #12]
 800085a:	3b01      	subs	r3, #1
 800085c:	b29b      	uxth	r3, r3
 800085e:	81bb      	strh	r3, [r7, #12]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	b29b      	uxth	r3, r3
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b29b      	uxth	r3, r3
 800086a:	3305      	adds	r3, #5
 800086c:	b29b      	uxth	r3, r3
 800086e:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 8000870:	88fa      	ldrh	r2, [r7, #6]
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	b218      	sxth	r0, r3
 800087a:	88ba      	ldrh	r2, [r7, #4]
 800087c:	89bb      	ldrh	r3, [r7, #12]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	b219      	sxth	r1, r3
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	b21b      	sxth	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	f7ff ff17 	bl	80006c0 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 8000892:	88fa      	ldrh	r2, [r7, #6]
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b218      	sxth	r0, r3
 800089c:	88ba      	ldrh	r2, [r7, #4]
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b219      	sxth	r1, r3
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	f7ff ff06 	bl	80006c0 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b218      	sxth	r0, r3
 80008be:	88ba      	ldrh	r2, [r7, #4]
 80008c0:	89fb      	ldrh	r3, [r7, #14]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	b219      	sxth	r1, r3
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f7ff fef5 	bl	80006c0 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	89bb      	ldrh	r3, [r7, #12]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b218      	sxth	r0, r3
 80008e0:	88ba      	ldrh	r2, [r7, #4]
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	4413      	add	r3, r2
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b219      	sxth	r1, r3
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	f7ff fee4 	bl	80006c0 <ssd1306_DrawHorizontalLine>




  } while (x < y);
 80008f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	db8d      	blt.n	8000820 <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	b29b      	uxth	r3, r3
 800090c:	b218      	sxth	r0, r3
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	b21a      	sxth	r2, r3
 8000916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800091a:	4619      	mov	r1, r3
 800091c:	f7ff fed0 	bl	80006c0 <ssd1306_DrawHorizontalLine>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 800092c:	20a1      	movs	r0, #161	; 0xa1
 800092e:	f000 f811 	bl	8000954 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8000932:	20c8      	movs	r0, #200	; 0xc8
 8000934:	f000 f80e 	bl	8000954 <ssd1306_WriteCommand>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8000940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000944:	2100      	movs	r1, #0
 8000946:	4802      	ldr	r0, [pc, #8]	; (8000950 <ssd1306_Clear+0x14>)
 8000948:	f002 f822 	bl	8002990 <memset>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000130 	.word	0x20000130

08000954 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af04      	add	r7, sp, #16
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800095e:	230a      	movs	r3, #10
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2301      	movs	r3, #1
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	2200      	movs	r2, #0
 800096e:	2178      	movs	r1, #120	; 0x78
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <ssd1306_WriteCommand+0x2c>)
 8000972:	f000 fe5f 	bl	8001634 <HAL_I2C_Mem_Write>
#endif
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c

08000984 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af04      	add	r7, sp, #16
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8000990:	2364      	movs	r3, #100	; 0x64
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	2178      	movs	r1, #120	; 0x78
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <ssd1306_WriteData+0x2c>)
 80009a4:	f000 fe46 	bl	8001634 <HAL_I2C_Mem_Write>
#endif
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000008c 	.word	0x2000008c

080009b4 <update_circle_x>:
 *      Author: borsuk
 */
#include "ssd1306_circle.h"


void update_circle_x(Circle* circle, HorizontalDirection direction) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
    switch(direction) {
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d01a      	beq.n	80009fc <update_circle_x+0x48>
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	dc19      	bgt.n	80009fe <update_circle_x+0x4a>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <update_circle_x+0x20>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d00a      	beq.n	80009e8 <update_circle_x+0x34>
            --circle->x;
            break;
        case STRAIGHT:
            break;
    }
}
 80009d2:	e014      	b.n	80009fe <update_circle_x+0x4a>
            ++circle->x;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3301      	adds	r3, #1
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	801a      	strh	r2, [r3, #0]
            break;
 80009e6:	e00a      	b.n	80009fe <update_circle_x+0x4a>
            --circle->x;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3b01      	subs	r3, #1
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	801a      	strh	r2, [r3, #0]
            break;
 80009fa:	e000      	b.n	80009fe <update_circle_x+0x4a>
            break;
 80009fc:	bf00      	nop
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <update_circle_y>:

void update_circle_y(Circle* circle, VerticalDirection direction) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
    switch(direction) {
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00b      	beq.n	8000a32 <update_circle_y+0x2a>
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d113      	bne.n	8000a46 <update_circle_y+0x3e>
        case DOWN:
            ++circle->y;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	805a      	strh	r2, [r3, #2]
            break;
 8000a30:	e009      	b.n	8000a46 <update_circle_y+0x3e>
        case UP:
            --circle->y;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21a      	sxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	805a      	strh	r2, [r3, #2]
            break;
 8000a44:	bf00      	nop
    }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x40>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_MspInit+0x40>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x40>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x40>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_MspInit+0x40>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_MspInit+0x40>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <HAL_I2C_MspInit+0x70>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d123      	bne.n	8000afc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000acc:	23c0      	movs	r3, #192	; 0xc0
 8000ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <HAL_I2C_MspInit+0x78>)
 8000ae0:	f000 fae0 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	61d3      	str	r3, [r2, #28]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d131      	bne.n	8000b94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b76:	f000 fa95 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b90:	f000 fa88 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bee:	f000 f935 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <_kill>:

int _kill(int pid, int sig)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c0e:	f001 fe95 	bl	800293c <__errno>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2216      	movs	r2, #22
 8000c16:	601a      	str	r2, [r3, #0]
  return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_exit>:

void _exit (int status)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffe7 	bl	8000c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c36:	e7fe      	b.n	8000c36 <_exit+0x12>

08000c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
  }

  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e009      	b.n	8000c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf1      	blt.n	8000c84 <_write+0x12>
  }
  return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_close>:

int _close(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
	...

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f001 fdfe 	bl	800293c <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20005000 	.word	0x20005000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000534 	.word	0x20000534
 8000d74:	20000550 	.word	0x20000550

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff fff8 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da0:	4c09      	ldr	r4, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f001 fdcb 	bl	8002948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fa67 	bl	8000284 <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc0:	08003c14 	.word	0x08003c14
  ldr r2, =_sbss
 8000dc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc8:	2000054c 	.word	0x2000054c

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f92b 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe30 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f935 	bl	800108a <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	f000 f90b 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000538 	.word	0x20000538

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000538 	.word	0x20000538

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff0 	bl	8000e80 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffe0 	bl	8000e80 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f7ff ff90 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff49 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff90 	bl	8000f94 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5f 	bl	8000f40 <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e169      	b.n	800138c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b8:	2201      	movs	r2, #1
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8158 	bne.w	8001386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a9a      	ldr	r2, [pc, #616]	; (8001344 <HAL_GPIO_Init+0x2a0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d05e      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010e0:	4a98      	ldr	r2, [pc, #608]	; (8001344 <HAL_GPIO_Init+0x2a0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d875      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010e6:	4a98      	ldr	r2, [pc, #608]	; (8001348 <HAL_GPIO_Init+0x2a4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d058      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010ec:	4a96      	ldr	r2, [pc, #600]	; (8001348 <HAL_GPIO_Init+0x2a4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d86f      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010f2:	4a96      	ldr	r2, [pc, #600]	; (800134c <HAL_GPIO_Init+0x2a8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d052      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010f8:	4a94      	ldr	r2, [pc, #592]	; (800134c <HAL_GPIO_Init+0x2a8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d869      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010fe:	4a94      	ldr	r2, [pc, #592]	; (8001350 <HAL_GPIO_Init+0x2ac>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d04c      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 8001104:	4a92      	ldr	r2, [pc, #584]	; (8001350 <HAL_GPIO_Init+0x2ac>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d863      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 800110a:	4a92      	ldr	r2, [pc, #584]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d046      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 8001110:	4a90      	ldr	r2, [pc, #576]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d85d      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d82a      	bhi.n	8001170 <HAL_GPIO_Init+0xcc>
 800111a:	2b12      	cmp	r3, #18
 800111c:	d859      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <HAL_GPIO_Init+0x80>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	0800119f 	.word	0x0800119f
 8001128:	08001179 	.word	0x08001179
 800112c:	0800118b 	.word	0x0800118b
 8001130:	080011cd 	.word	0x080011cd
 8001134:	080011d3 	.word	0x080011d3
 8001138:	080011d3 	.word	0x080011d3
 800113c:	080011d3 	.word	0x080011d3
 8001140:	080011d3 	.word	0x080011d3
 8001144:	080011d3 	.word	0x080011d3
 8001148:	080011d3 	.word	0x080011d3
 800114c:	080011d3 	.word	0x080011d3
 8001150:	080011d3 	.word	0x080011d3
 8001154:	080011d3 	.word	0x080011d3
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011d3 	.word	0x080011d3
 8001160:	080011d3 	.word	0x080011d3
 8001164:	080011d3 	.word	0x080011d3
 8001168:	08001181 	.word	0x08001181
 800116c:	08001195 	.word	0x08001195
 8001170:	4a79      	ldr	r2, [pc, #484]	; (8001358 <HAL_GPIO_Init+0x2b4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001176:	e02c      	b.n	80011d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e029      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	3304      	adds	r3, #4
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e024      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	3308      	adds	r3, #8
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e01f      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	330c      	adds	r3, #12
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e01a      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a6:	2304      	movs	r3, #4
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e013      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	611a      	str	r2, [r3, #16]
          break;
 80011be:	e009      	b.n	80011d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	615a      	str	r2, [r3, #20]
          break;
 80011ca:	e003      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          break;
 80011d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d801      	bhi.n	80011de <HAL_GPIO_Init+0x13a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_Init+0x13e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	d802      	bhi.n	80011f0 <HAL_GPIO_Init+0x14c>
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x152>
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	3b08      	subs	r3, #8
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	210f      	movs	r1, #15
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	6a39      	ldr	r1, [r7, #32]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	431a      	orrs	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80b1 	beq.w	8001386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_GPIO_Init+0x2b8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x2b8>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_GPIO_Init+0x2b8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800123c:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_GPIO_Init+0x2bc>)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a40      	ldr	r2, [pc, #256]	; (8001364 <HAL_GPIO_Init+0x2c0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d013      	beq.n	8001290 <HAL_GPIO_Init+0x1ec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3f      	ldr	r2, [pc, #252]	; (8001368 <HAL_GPIO_Init+0x2c4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d00d      	beq.n	800128c <HAL_GPIO_Init+0x1e8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3e      	ldr	r2, [pc, #248]	; (800136c <HAL_GPIO_Init+0x2c8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3d      	ldr	r2, [pc, #244]	; (8001370 <HAL_GPIO_Init+0x2cc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_GPIO_Init+0x1e0>
 8001280:	2303      	movs	r3, #3
 8001282:	e006      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001284:	2304      	movs	r3, #4
 8001286:	e004      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001288:	2302      	movs	r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001290:	2300      	movs	r3, #0
 8001292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	4093      	lsls	r3, r2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012a2:	492f      	ldr	r1, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x2bc>)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	492c      	ldr	r1, [pc, #176]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4928      	ldr	r1, [pc, #160]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	4922      	ldr	r1, [pc, #136]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	491e      	ldr	r1, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4918      	ldr	r1, [pc, #96]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4914      	ldr	r1, [pc, #80]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d021      	beq.n	8001378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e021      	b.n	8001386 <HAL_GPIO_Init+0x2e2>
 8001342:	bf00      	nop
 8001344:	10320000 	.word	0x10320000
 8001348:	10310000 	.word	0x10310000
 800134c:	10220000 	.word	0x10220000
 8001350:	10210000 	.word	0x10210000
 8001354:	10120000 	.word	0x10120000
 8001358:	10110000 	.word	0x10110000
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	40010800 	.word	0x40010800
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40011000 	.word	0x40011000
 8001370:	40011400 	.word	0x40011400
 8001374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	4909      	ldr	r1, [pc, #36]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001382:	4013      	ands	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	f47f ae8e 	bne.w	80010b8 <HAL_GPIO_Init+0x14>
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	372c      	adds	r7, #44	; 0x2c
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e12b      	b.n	8001616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fb5e 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001410:	f001 f970 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a81      	ldr	r2, [pc, #516]	; (8001620 <HAL_I2C_Init+0x274>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d807      	bhi.n	8001430 <HAL_I2C_Init+0x84>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_I2C_Init+0x278>)
 8001424:	4293      	cmp	r3, r2
 8001426:	bf94      	ite	ls
 8001428:	2301      	movls	r3, #1
 800142a:	2300      	movhi	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e006      	b.n	800143e <HAL_I2C_Init+0x92>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a7d      	ldr	r2, [pc, #500]	; (8001628 <HAL_I2C_Init+0x27c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0e7      	b.n	8001616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a78      	ldr	r2, [pc, #480]	; (800162c <HAL_I2C_Init+0x280>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_I2C_Init+0x274>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d802      	bhi.n	8001480 <HAL_I2C_Init+0xd4>
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	e009      	b.n	8001494 <HAL_I2C_Init+0xe8>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4a69      	ldr	r2, [pc, #420]	; (8001630 <HAL_I2C_Init+0x284>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	3301      	adds	r3, #1
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	430b      	orrs	r3, r1
 800149a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	495c      	ldr	r1, [pc, #368]	; (8001620 <HAL_I2C_Init+0x274>)
 80014b0:	428b      	cmp	r3, r1
 80014b2:	d819      	bhi.n	80014e8 <HAL_I2C_Init+0x13c>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e59      	subs	r1, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c8:	400b      	ands	r3, r1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <HAL_I2C_Init+0x138>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e59      	subs	r1, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	e051      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e04f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <HAL_I2C_Init+0x168>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	e012      	b.n	800153a <HAL_I2C_Init+0x18e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Init+0x196>
 800153e:	2301      	movs	r3, #1
 8001540:	e022      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10e      	bne.n	8001568 <HAL_I2C_Init+0x1bc>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1e58      	subs	r0, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	440b      	add	r3, r1
 8001558:	fbb0 f3f3 	udiv	r3, r0, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001566:	e00f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	6809      	ldr	r1, [r1, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6911      	ldr	r1, [r2, #16]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68d2      	ldr	r2, [r2, #12]
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	000186a0 	.word	0x000186a0
 8001624:	001e847f 	.word	0x001e847f
 8001628:	003d08ff 	.word	0x003d08ff
 800162c:	431bde83 	.word	0x431bde83
 8001630:	10624dd3 	.word	0x10624dd3

08001634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4603      	mov	r3, r0
 8001644:	817b      	strh	r3, [r7, #10]
 8001646:	460b      	mov	r3, r1
 8001648:	813b      	strh	r3, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800164e:	f7ff fc17 	bl	8000e80 <HAL_GetTick>
 8001652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80d9 	bne.w	8001814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	496d      	ldr	r1, [pc, #436]	; (8001820 <HAL_I2C_Mem_Write+0x1ec>)
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fa9f 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
 800167a:	e0cc      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Mem_Write+0x56>
 8001686:	2302      	movs	r3, #2
 8001688:	e0c5      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d007      	beq.n	80016b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2221      	movs	r2, #33	; 0x21
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_I2C_Mem_Write+0x1f0>)
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f2:	88f8      	ldrh	r0, [r7, #6]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	8979      	ldrh	r1, [r7, #10]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f9be 	bl	8001a84 <I2C_RequestMemoryWrite>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d052      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e081      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fb64 	bl	8001de4 <I2C_WaitOnTXEFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b04      	cmp	r3, #4
 8001728:	d107      	bne.n	800173a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06b      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d11b      	bne.n	80017b4 <HAL_I2C_Mem_Write+0x180>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1aa      	bne.n	8001712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fb57 	bl	8001e74 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d107      	bne.n	80017e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e016      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001814:	2302      	movs	r3, #2
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	00100002 	.word	0x00100002
 8001824:	ffff0000 	.word	0xffff0000

08001828 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	460b      	mov	r3, r1
 8001836:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fb22 	bl	8000e80 <HAL_GetTick>
 800183c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b20      	cmp	r3, #32
 800184c:	f040 8111 	bne.w	8001a72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2319      	movs	r3, #25
 8001856:	2201      	movs	r2, #1
 8001858:	4988      	ldr	r1, [pc, #544]	; (8001a7c <HAL_I2C_IsDeviceReady+0x254>)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9a8 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001866:	2302      	movs	r3, #2
 8001868:	e104      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_I2C_IsDeviceReady+0x50>
 8001874:	2302      	movs	r3, #2
 8001876:	e0fd      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b01      	cmp	r3, #1
 800188c:	d007      	beq.n	800189e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2224      	movs	r2, #36	; 0x24
 80018b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4a70      	ldr	r2, [pc, #448]	; (8001a80 <HAL_I2C_IsDeviceReady+0x258>)
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f966 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00d      	beq.n	8001906 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f8:	d103      	bne.n	8001902 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0b6      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001914:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fab3 	bl	8000e80 <HAL_GetTick>
 800191a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800194a:	e025      	b.n	8001998 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800194c:	f7ff fa98 	bl	8000e80 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d302      	bcc.n	8001962 <HAL_I2C_IsDeviceReady+0x13a>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	22a0      	movs	r2, #160	; 0xa0
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2ba0      	cmp	r3, #160	; 0xa0
 80019a2:	d005      	beq.n	80019b0 <HAL_I2C_IsDeviceReady+0x188>
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <HAL_I2C_IsDeviceReady+0x188>
 80019aa:	7dbb      	ldrb	r3, [r7, #22]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0cd      	beq.n	800194c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d129      	bne.n	8001a1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2319      	movs	r3, #25
 80019f2:	2201      	movs	r2, #1
 80019f4:	4921      	ldr	r1, [pc, #132]	; (8001a7c <HAL_I2C_IsDeviceReady+0x254>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f8da 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e036      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e02c      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2319      	movs	r3, #25
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	490f      	ldr	r1, [pc, #60]	; (8001a7c <HAL_I2C_IsDeviceReady+0x254>)
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f8b6 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e012      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f4ff af32 	bcc.w	80018c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	00100002 	.word	0x00100002
 8001a80:	ffff0000 	.word	0xffff0000

08001a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	4611      	mov	r1, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	817b      	strh	r3, [r7, #10]
 8001a96:	460b      	mov	r3, r1
 8001a98:	813b      	strh	r3, [r7, #8]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f878 	bl	8001bb0 <I2C_WaitOnFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00d      	beq.n	8001ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad4:	d103      	bne.n	8001ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e05f      	b.n	8001ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	492d      	ldr	r1, [pc, #180]	; (8001bac <I2C_RequestMemoryWrite+0x128>)
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f8d3 	bl	8001ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e04c      	b.n	8001ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f95e 	bl	8001de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d107      	bne.n	8001b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e02b      	b.n	8001ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b50:	893b      	ldrh	r3, [r7, #8]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e021      	b.n	8001ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f938 	bl	8001de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00d      	beq.n	8001b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d107      	bne.n	8001b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e005      	b.n	8001ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b96:	893b      	ldrh	r3, [r7, #8]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	00010002 	.word	0x00010002

08001bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc0:	e048      	b.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d044      	beq.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7ff f959 	bl	8000e80 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d139      	bne.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	e00c      	b.n	8001c20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d116      	bne.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e023      	b.n	8001c9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10d      	bne.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	e00c      	b.n	8001c94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d093      	beq.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cb2:	e071      	b.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d123      	bne.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f043 0204 	orr.w	r2, r3, #4
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e067      	b.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d12:	d041      	beq.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d14:	f7ff f8b4 	bl	8000e80 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d302      	bcc.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d136      	bne.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10c      	bne.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	e00b      	b.n	8001d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e021      	b.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10c      	bne.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e00b      	b.n	8001dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f af6d 	bne.w	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df0:	e034      	b.n	8001e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f886 	bl	8001f04 <I2C_IsAcknowledgeFailed>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e034      	b.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e08:	d028      	beq.n	8001e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7ff f839 	bl	8000e80 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11d      	bne.n	8001e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d016      	beq.n	8001e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e007      	b.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	2b80      	cmp	r3, #128	; 0x80
 8001e68:	d1c3      	bne.n	8001df2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e80:	e034      	b.n	8001eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f83e 	bl	8001f04 <I2C_IsAcknowledgeFailed>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e034      	b.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e98:	d028      	beq.n	8001eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7fe fff1 	bl	8000e80 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11d      	bne.n	8001eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d016      	beq.n	8001eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e007      	b.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d1c3      	bne.n	8001e82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d11b      	bne.n	8001f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0204 	orr.w	r2, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e272      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8087 	beq.w	800208e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f80:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d00c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f8c:	4b8f      	ldr	r3, [pc, #572]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d112      	bne.n	8001fbe <HAL_RCC_OscConfig+0x5e>
 8001f98:	4b8c      	ldr	r3, [pc, #560]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d10b      	bne.n	8001fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa6:	4b89      	ldr	r3, [pc, #548]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d06c      	beq.n	800208c <HAL_RCC_OscConfig+0x12c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d168      	bne.n	800208c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e24c      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x76>
 8001fc8:	4b80      	ldr	r3, [pc, #512]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a7f      	ldr	r2, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e02e      	b.n	8002034 <HAL_RCC_OscConfig+0xd4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fde:	4b7b      	ldr	r3, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7a      	ldr	r2, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b78      	ldr	r3, [pc, #480]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a77      	ldr	r2, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xd4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0xbc>
 8002002:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6e      	ldr	r2, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xd4>
 800201c:	4b6b      	ldr	r3, [pc, #428]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6a      	ldr	r2, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ff20 	bl	8000e80 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe ff1c 	bl	8000e80 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e200      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xe4>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe ff0c 	bl	8000e80 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe ff08 	bl	8000e80 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1ec      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x10c>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209a:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11c      	bne.n	80020ec <HAL_RCC_OscConfig+0x18c>
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d116      	bne.n	80020ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x176>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1c0      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4939      	ldr	r1, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	e03a      	b.n	8002162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fec1 	bl	8000e80 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe febd 	bl	8000e80 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1a1      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4927      	ldr	r1, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x270>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fea0 	bl	8000e80 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7fe fe9c 	bl	8000e80 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e180      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d03a      	beq.n	80021e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d019      	beq.n	80021aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe fe80 	bl	8000e80 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe fe7c 	bl	8000e80 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e160      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_RCC_OscConfig+0x26c>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f000 face 	bl	8002744 <RCC_Delay>
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fe66 	bl	8000e80 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	e00f      	b.n	80021d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fe62 	bl	8000e80 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d908      	bls.n	80021d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e146      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	42420000 	.word	0x42420000
 80021d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e9      	bne.n	80021b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a6 	beq.w	800233e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a87      	ldr	r2, [pc, #540]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b85      	ldr	r3, [pc, #532]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_RCC_OscConfig+0x4c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b7f      	ldr	r3, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x4c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7e      	ldr	r2, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x4c8>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7fe fe23 	bl	8000e80 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fe1f 	bl	8000e80 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e103      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b75      	ldr	r3, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x4c8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x312>
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	e02d      	b.n	80022ce <HAL_RCC_OscConfig+0x36e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x334>
 800227a:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a69      	ldr	r2, [pc, #420]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6213      	str	r3, [r2, #32]
 8002286:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a66      	ldr	r2, [pc, #408]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	e01c      	b.n	80022ce <HAL_RCC_OscConfig+0x36e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x356>
 800229c:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a60      	ldr	r2, [pc, #384]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a5d      	ldr	r2, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x36e>
 80022b6:	4b5b      	ldr	r3, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a5a      	ldr	r2, [pc, #360]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	4b58      	ldr	r3, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fdd3 	bl	8000e80 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fdcf 	bl	8000e80 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0b1      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ee      	beq.n	80022de <HAL_RCC_OscConfig+0x37e>
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fdbd 	bl	8000e80 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fdb9 	bl	8000e80 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e09b      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d061      	beq.n	8002418 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d146      	bne.n	80023ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b33      	ldr	r3, [pc, #204]	; (800242c <HAL_RCC_OscConfig+0x4cc>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fd8d 	bl	8000e80 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fd89 	bl	8000e80 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e06d      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d108      	bne.n	80023a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4921      	ldr	r1, [pc, #132]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a19      	ldr	r1, [r3, #32]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	430b      	orrs	r3, r1
 80023b6:	491b      	ldr	r1, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x4cc>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fd5d 	bl	8000e80 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe fd59 	bl	8000e80 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e03d      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x46a>
 80023e8:	e035      	b.n	8002456 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_OscConfig+0x4cc>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fd46 	bl	8000e80 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fd42 	bl	8000e80 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e026      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x498>
 8002416:	e01e      	b.n	8002456 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e019      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
 800242c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x500>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0d0      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4965      	ldr	r1, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b8      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d040      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07f      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e073      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4936      	ldr	r1, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7fe fc94 	bl	8000e80 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe fc90 	bl	8000e80 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e053      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d210      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e032      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f2:	f000 f821 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490a      	ldr	r1, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1cc>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1d0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fbf2 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	08003a98 	.word	0x08003a98
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d002      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x30>
 8002662:	2b08      	cmp	r3, #8
 8002664:	d003      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x36>
 8002666:	e027      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800266a:	613b      	str	r3, [r7, #16]
      break;
 800266c:	e027      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0c9b      	lsrs	r3, r3, #18
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0c5b      	lsrs	r3, r3, #17
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800269a:	fb03 f202 	mul.w	r2, r3, r2
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e004      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	613b      	str	r3, [r7, #16]
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ba:	613b      	str	r3, [r7, #16]
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	693b      	ldr	r3, [r7, #16]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	08003ab0 	.word	0x08003ab0
 80026d8:	08003ac0 	.word	0x08003ac0
 80026dc:	003d0900 	.word	0x003d0900

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000000 	.word	0x20000000

080026f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f8:	f7ff fff2 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4903      	ldr	r1, [pc, #12]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08003aa8 	.word	0x08003aa8

0800271c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002720:	f7ff ffde 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0adb      	lsrs	r3, r3, #11
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08003aa8 	.word	0x08003aa8

08002744 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <RCC_Delay+0x34>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <RCC_Delay+0x38>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0a5b      	lsrs	r3, r3, #9
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002760:	bf00      	nop
  }
  while (Delay --);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	60fa      	str	r2, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f9      	bne.n	8002760 <RCC_Delay+0x1c>
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	20000000 	.word	0x20000000
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e042      	b.n	8002818 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f9b2 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f82b 	bl	8002820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800285a:	f023 030c 	bic.w	r3, r3, #12
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <UART_SetConfig+0x114>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002888:	f7ff ff48 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	e002      	b.n	8002896 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002890:	f7ff ff30 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	4a22      	ldr	r2, [pc, #136]	; (8002938 <UART_SetConfig+0x118>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	0119      	lsls	r1, r3, #4
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <UART_SetConfig+0x118>)
 80028ce:	fba3 0302 	umull	r0, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3332      	adds	r3, #50	; 0x32
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <UART_SetConfig+0x118>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ec:	4419      	add	r1, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009a      	lsls	r2, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	fbb2 f2f3 	udiv	r2, r2, r3
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <UART_SetConfig+0x118>)
 8002906:	fba3 0302 	umull	r0, r3, r3, r2
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	2064      	movs	r0, #100	; 0x64
 800290e:	fb00 f303 	mul.w	r3, r0, r3
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	3332      	adds	r3, #50	; 0x32
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <UART_SetConfig+0x118>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	440a      	add	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40013800 	.word	0x40013800
 8002938:	51eb851f 	.word	0x51eb851f

0800293c <__errno>:
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <__errno+0x8>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000000c 	.word	0x2000000c

08002948 <__libc_init_array>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	2600      	movs	r6, #0
 800294c:	4d0c      	ldr	r5, [pc, #48]	; (8002980 <__libc_init_array+0x38>)
 800294e:	4c0d      	ldr	r4, [pc, #52]	; (8002984 <__libc_init_array+0x3c>)
 8002950:	1b64      	subs	r4, r4, r5
 8002952:	10a4      	asrs	r4, r4, #2
 8002954:	42a6      	cmp	r6, r4
 8002956:	d109      	bne.n	800296c <__libc_init_array+0x24>
 8002958:	f001 f88e 	bl	8003a78 <_init>
 800295c:	2600      	movs	r6, #0
 800295e:	4d0a      	ldr	r5, [pc, #40]	; (8002988 <__libc_init_array+0x40>)
 8002960:	4c0a      	ldr	r4, [pc, #40]	; (800298c <__libc_init_array+0x44>)
 8002962:	1b64      	subs	r4, r4, r5
 8002964:	10a4      	asrs	r4, r4, #2
 8002966:	42a6      	cmp	r6, r4
 8002968:	d105      	bne.n	8002976 <__libc_init_array+0x2e>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002970:	4798      	blx	r3
 8002972:	3601      	adds	r6, #1
 8002974:	e7ee      	b.n	8002954 <__libc_init_array+0xc>
 8002976:	f855 3b04 	ldr.w	r3, [r5], #4
 800297a:	4798      	blx	r3
 800297c:	3601      	adds	r6, #1
 800297e:	e7f2      	b.n	8002966 <__libc_init_array+0x1e>
 8002980:	08003c0c 	.word	0x08003c0c
 8002984:	08003c0c 	.word	0x08003c0c
 8002988:	08003c0c 	.word	0x08003c0c
 800298c:	08003c10 	.word	0x08003c10

08002990 <memset>:
 8002990:	4603      	mov	r3, r0
 8002992:	4402      	add	r2, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <memset+0xa>
 8002998:	4770      	bx	lr
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
 800299e:	e7f9      	b.n	8002994 <memset+0x4>

080029a0 <srand>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <srand+0x44>)
 80029a4:	4604      	mov	r4, r0
 80029a6:	681d      	ldr	r5, [r3, #0]
 80029a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80029aa:	b9b3      	cbnz	r3, 80029da <srand+0x3a>
 80029ac:	2018      	movs	r0, #24
 80029ae:	f000 f893 	bl	8002ad8 <malloc>
 80029b2:	4602      	mov	r2, r0
 80029b4:	63a8      	str	r0, [r5, #56]	; 0x38
 80029b6:	b920      	cbnz	r0, 80029c2 <srand+0x22>
 80029b8:	2142      	movs	r1, #66	; 0x42
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <srand+0x48>)
 80029bc:	480b      	ldr	r0, [pc, #44]	; (80029ec <srand+0x4c>)
 80029be:	f000 f85b 	bl	8002a78 <__assert_func>
 80029c2:	490b      	ldr	r1, [pc, #44]	; (80029f0 <srand+0x50>)
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <srand+0x54>)
 80029c6:	e9c0 1300 	strd	r1, r3, [r0]
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <srand+0x58>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	6083      	str	r3, [r0, #8]
 80029d0:	230b      	movs	r3, #11
 80029d2:	8183      	strh	r3, [r0, #12]
 80029d4:	2001      	movs	r0, #1
 80029d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80029da:	2200      	movs	r2, #0
 80029dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80029de:	611c      	str	r4, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	08003ac8 	.word	0x08003ac8
 80029ec:	08003adf 	.word	0x08003adf
 80029f0:	abcd330e 	.word	0xabcd330e
 80029f4:	e66d1234 	.word	0xe66d1234
 80029f8:	0005deec 	.word	0x0005deec

080029fc <rand>:
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <rand+0x5c>)
 80029fe:	b510      	push	{r4, lr}
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a04:	b9b3      	cbnz	r3, 8002a34 <rand+0x38>
 8002a06:	2018      	movs	r0, #24
 8002a08:	f000 f866 	bl	8002ad8 <malloc>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a10:	b920      	cbnz	r0, 8002a1c <rand+0x20>
 8002a12:	214e      	movs	r1, #78	; 0x4e
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <rand+0x60>)
 8002a16:	4812      	ldr	r0, [pc, #72]	; (8002a60 <rand+0x64>)
 8002a18:	f000 f82e 	bl	8002a78 <__assert_func>
 8002a1c:	4911      	ldr	r1, [pc, #68]	; (8002a64 <rand+0x68>)
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <rand+0x6c>)
 8002a20:	e9c0 1300 	strd	r1, r3, [r0]
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <rand+0x70>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	6083      	str	r3, [r0, #8]
 8002a2a:	230b      	movs	r3, #11
 8002a2c:	8183      	strh	r3, [r0, #12]
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <rand+0x74>)
 8002a38:	6920      	ldr	r0, [r4, #16]
 8002a3a:	6963      	ldr	r3, [r4, #20]
 8002a3c:	4342      	muls	r2, r0
 8002a3e:	490d      	ldr	r1, [pc, #52]	; (8002a74 <rand+0x78>)
 8002a40:	fb01 2203 	mla	r2, r1, r3, r2
 8002a44:	fba0 0101 	umull	r0, r1, r0, r1
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	eb42 0001 	adc.w	r0, r2, r1
 8002a4e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002a52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002a56:	bd10      	pop	{r4, pc}
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	08003ac8 	.word	0x08003ac8
 8002a60:	08003adf 	.word	0x08003adf
 8002a64:	abcd330e 	.word	0xabcd330e
 8002a68:	e66d1234 	.word	0xe66d1234
 8002a6c:	0005deec 	.word	0x0005deec
 8002a70:	5851f42d 	.word	0x5851f42d
 8002a74:	4c957f2d 	.word	0x4c957f2d

08002a78 <__assert_func>:
 8002a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <__assert_func+0x2c>)
 8002a80:	4605      	mov	r5, r0
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d8      	ldr	r0, [r3, #12]
 8002a86:	b14c      	cbz	r4, 8002a9c <__assert_func+0x24>
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <__assert_func+0x30>)
 8002a8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a8e:	9100      	str	r1, [sp, #0]
 8002a90:	462b      	mov	r3, r5
 8002a92:	4906      	ldr	r1, [pc, #24]	; (8002aac <__assert_func+0x34>)
 8002a94:	f000 f80e 	bl	8002ab4 <fiprintf>
 8002a98:	f000 fcc0 	bl	800341c <abort>
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__assert_func+0x38>)
 8002a9e:	461c      	mov	r4, r3
 8002aa0:	e7f3      	b.n	8002a8a <__assert_func+0x12>
 8002aa2:	bf00      	nop
 8002aa4:	2000000c 	.word	0x2000000c
 8002aa8:	08003b3a 	.word	0x08003b3a
 8002aac:	08003b47 	.word	0x08003b47
 8002ab0:	08003b75 	.word	0x08003b75

08002ab4 <fiprintf>:
 8002ab4:	b40e      	push	{r1, r2, r3}
 8002ab6:	b503      	push	{r0, r1, lr}
 8002ab8:	4601      	mov	r1, r0
 8002aba:	ab03      	add	r3, sp, #12
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <fiprintf+0x20>)
 8002abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac2:	6800      	ldr	r0, [r0, #0]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f000 f913 	bl	8002cf0 <_vfiprintf_r>
 8002aca:	b002      	add	sp, #8
 8002acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad0:	b003      	add	sp, #12
 8002ad2:	4770      	bx	lr
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <malloc>:
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <malloc+0xc>)
 8002ada:	4601      	mov	r1, r0
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	f000 b86b 	b.w	8002bb8 <_malloc_r>
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <_free_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4605      	mov	r5, r0
 8002aec:	2900      	cmp	r1, #0
 8002aee:	d040      	beq.n	8002b72 <_free_r+0x8a>
 8002af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af4:	1f0c      	subs	r4, r1, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bfb8      	it	lt
 8002afa:	18e4      	addlt	r4, r4, r3
 8002afc:	f000 fec0 	bl	8003880 <__malloc_lock>
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <_free_r+0x8c>)
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	b933      	cbnz	r3, 8002b14 <_free_r+0x2c>
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	6014      	str	r4, [r2, #0]
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b10:	f000 bebc 	b.w	800388c <__malloc_unlock>
 8002b14:	42a3      	cmp	r3, r4
 8002b16:	d908      	bls.n	8002b2a <_free_r+0x42>
 8002b18:	6820      	ldr	r0, [r4, #0]
 8002b1a:	1821      	adds	r1, r4, r0
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	bf01      	itttt	eq
 8002b20:	6819      	ldreq	r1, [r3, #0]
 8002b22:	685b      	ldreq	r3, [r3, #4]
 8002b24:	1809      	addeq	r1, r1, r0
 8002b26:	6021      	streq	r1, [r4, #0]
 8002b28:	e7ed      	b.n	8002b06 <_free_r+0x1e>
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b10b      	cbz	r3, 8002b34 <_free_r+0x4c>
 8002b30:	42a3      	cmp	r3, r4
 8002b32:	d9fa      	bls.n	8002b2a <_free_r+0x42>
 8002b34:	6811      	ldr	r1, [r2, #0]
 8002b36:	1850      	adds	r0, r2, r1
 8002b38:	42a0      	cmp	r0, r4
 8002b3a:	d10b      	bne.n	8002b54 <_free_r+0x6c>
 8002b3c:	6820      	ldr	r0, [r4, #0]
 8002b3e:	4401      	add	r1, r0
 8002b40:	1850      	adds	r0, r2, r1
 8002b42:	4283      	cmp	r3, r0
 8002b44:	6011      	str	r1, [r2, #0]
 8002b46:	d1e0      	bne.n	8002b0a <_free_r+0x22>
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4401      	add	r1, r0
 8002b4e:	6011      	str	r1, [r2, #0]
 8002b50:	6053      	str	r3, [r2, #4]
 8002b52:	e7da      	b.n	8002b0a <_free_r+0x22>
 8002b54:	d902      	bls.n	8002b5c <_free_r+0x74>
 8002b56:	230c      	movs	r3, #12
 8002b58:	602b      	str	r3, [r5, #0]
 8002b5a:	e7d6      	b.n	8002b0a <_free_r+0x22>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	1821      	adds	r1, r4, r0
 8002b60:	428b      	cmp	r3, r1
 8002b62:	bf01      	itttt	eq
 8002b64:	6819      	ldreq	r1, [r3, #0]
 8002b66:	685b      	ldreq	r3, [r3, #4]
 8002b68:	1809      	addeq	r1, r1, r0
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	6054      	str	r4, [r2, #4]
 8002b70:	e7cb      	b.n	8002b0a <_free_r+0x22>
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	2000053c 	.word	0x2000053c

08002b78 <sbrk_aligned>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4e0e      	ldr	r6, [pc, #56]	; (8002bb4 <sbrk_aligned+0x3c>)
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	6831      	ldr	r1, [r6, #0]
 8002b80:	4605      	mov	r5, r0
 8002b82:	b911      	cbnz	r1, 8002b8a <sbrk_aligned+0x12>
 8002b84:	f000 fb7a 	bl	800327c <_sbrk_r>
 8002b88:	6030      	str	r0, [r6, #0]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 fb75 	bl	800327c <_sbrk_r>
 8002b92:	1c43      	adds	r3, r0, #1
 8002b94:	d00a      	beq.n	8002bac <sbrk_aligned+0x34>
 8002b96:	1cc4      	adds	r4, r0, #3
 8002b98:	f024 0403 	bic.w	r4, r4, #3
 8002b9c:	42a0      	cmp	r0, r4
 8002b9e:	d007      	beq.n	8002bb0 <sbrk_aligned+0x38>
 8002ba0:	1a21      	subs	r1, r4, r0
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 fb6a 	bl	800327c <_sbrk_r>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d101      	bne.n	8002bb0 <sbrk_aligned+0x38>
 8002bac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	20000540 	.word	0x20000540

08002bb8 <_malloc_r>:
 8002bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bbc:	1ccd      	adds	r5, r1, #3
 8002bbe:	f025 0503 	bic.w	r5, r5, #3
 8002bc2:	3508      	adds	r5, #8
 8002bc4:	2d0c      	cmp	r5, #12
 8002bc6:	bf38      	it	cc
 8002bc8:	250c      	movcc	r5, #12
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	4607      	mov	r7, r0
 8002bce:	db01      	blt.n	8002bd4 <_malloc_r+0x1c>
 8002bd0:	42a9      	cmp	r1, r5
 8002bd2:	d905      	bls.n	8002be0 <_malloc_r+0x28>
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4630      	mov	r0, r6
 8002bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be0:	4e2e      	ldr	r6, [pc, #184]	; (8002c9c <_malloc_r+0xe4>)
 8002be2:	f000 fe4d 	bl	8003880 <__malloc_lock>
 8002be6:	6833      	ldr	r3, [r6, #0]
 8002be8:	461c      	mov	r4, r3
 8002bea:	bb34      	cbnz	r4, 8002c3a <_malloc_r+0x82>
 8002bec:	4629      	mov	r1, r5
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f7ff ffc2 	bl	8002b78 <sbrk_aligned>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	d14d      	bne.n	8002c96 <_malloc_r+0xde>
 8002bfa:	6834      	ldr	r4, [r6, #0]
 8002bfc:	4626      	mov	r6, r4
 8002bfe:	2e00      	cmp	r6, #0
 8002c00:	d140      	bne.n	8002c84 <_malloc_r+0xcc>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	4631      	mov	r1, r6
 8002c06:	4638      	mov	r0, r7
 8002c08:	eb04 0803 	add.w	r8, r4, r3
 8002c0c:	f000 fb36 	bl	800327c <_sbrk_r>
 8002c10:	4580      	cmp	r8, r0
 8002c12:	d13a      	bne.n	8002c8a <_malloc_r+0xd2>
 8002c14:	6821      	ldr	r1, [r4, #0]
 8002c16:	3503      	adds	r5, #3
 8002c18:	1a6d      	subs	r5, r5, r1
 8002c1a:	f025 0503 	bic.w	r5, r5, #3
 8002c1e:	3508      	adds	r5, #8
 8002c20:	2d0c      	cmp	r5, #12
 8002c22:	bf38      	it	cc
 8002c24:	250c      	movcc	r5, #12
 8002c26:	4638      	mov	r0, r7
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7ff ffa5 	bl	8002b78 <sbrk_aligned>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d02b      	beq.n	8002c8a <_malloc_r+0xd2>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	442b      	add	r3, r5
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	e00e      	b.n	8002c58 <_malloc_r+0xa0>
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	1b52      	subs	r2, r2, r5
 8002c3e:	d41e      	bmi.n	8002c7e <_malloc_r+0xc6>
 8002c40:	2a0b      	cmp	r2, #11
 8002c42:	d916      	bls.n	8002c72 <_malloc_r+0xba>
 8002c44:	1961      	adds	r1, r4, r5
 8002c46:	42a3      	cmp	r3, r4
 8002c48:	6025      	str	r5, [r4, #0]
 8002c4a:	bf18      	it	ne
 8002c4c:	6059      	strne	r1, [r3, #4]
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	bf08      	it	eq
 8002c52:	6031      	streq	r1, [r6, #0]
 8002c54:	5162      	str	r2, [r4, r5]
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	4638      	mov	r0, r7
 8002c5a:	f104 060b 	add.w	r6, r4, #11
 8002c5e:	f000 fe15 	bl	800388c <__malloc_unlock>
 8002c62:	f026 0607 	bic.w	r6, r6, #7
 8002c66:	1d23      	adds	r3, r4, #4
 8002c68:	1af2      	subs	r2, r6, r3
 8002c6a:	d0b6      	beq.n	8002bda <_malloc_r+0x22>
 8002c6c:	1b9b      	subs	r3, r3, r6
 8002c6e:	50a3      	str	r3, [r4, r2]
 8002c70:	e7b3      	b.n	8002bda <_malloc_r+0x22>
 8002c72:	6862      	ldr	r2, [r4, #4]
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	bf0c      	ite	eq
 8002c78:	6032      	streq	r2, [r6, #0]
 8002c7a:	605a      	strne	r2, [r3, #4]
 8002c7c:	e7ec      	b.n	8002c58 <_malloc_r+0xa0>
 8002c7e:	4623      	mov	r3, r4
 8002c80:	6864      	ldr	r4, [r4, #4]
 8002c82:	e7b2      	b.n	8002bea <_malloc_r+0x32>
 8002c84:	4634      	mov	r4, r6
 8002c86:	6876      	ldr	r6, [r6, #4]
 8002c88:	e7b9      	b.n	8002bfe <_malloc_r+0x46>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	f000 fdfc 	bl	800388c <__malloc_unlock>
 8002c94:	e7a1      	b.n	8002bda <_malloc_r+0x22>
 8002c96:	6025      	str	r5, [r4, #0]
 8002c98:	e7de      	b.n	8002c58 <_malloc_r+0xa0>
 8002c9a:	bf00      	nop
 8002c9c:	2000053c 	.word	0x2000053c

08002ca0 <__sfputc_r>:
 8002ca0:	6893      	ldr	r3, [r2, #8]
 8002ca2:	b410      	push	{r4}
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	da07      	bge.n	8002cbc <__sfputc_r+0x1c>
 8002cac:	6994      	ldr	r4, [r2, #24]
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	db01      	blt.n	8002cb6 <__sfputc_r+0x16>
 8002cb2:	290a      	cmp	r1, #10
 8002cb4:	d102      	bne.n	8002cbc <__sfputc_r+0x1c>
 8002cb6:	bc10      	pop	{r4}
 8002cb8:	f000 baf0 	b.w	800329c <__swbuf_r>
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	1c58      	adds	r0, r3, #1
 8002cc0:	6010      	str	r0, [r2, #0]
 8002cc2:	7019      	strb	r1, [r3, #0]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	bc10      	pop	{r4}
 8002cc8:	4770      	bx	lr

08002cca <__sfputs_r>:
 8002cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ccc:	4606      	mov	r6, r0
 8002cce:	460f      	mov	r7, r1
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	18d5      	adds	r5, r2, r3
 8002cd4:	42ac      	cmp	r4, r5
 8002cd6:	d101      	bne.n	8002cdc <__sfputs_r+0x12>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e007      	b.n	8002cec <__sfputs_r+0x22>
 8002cdc:	463a      	mov	r2, r7
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce4:	f7ff ffdc 	bl	8002ca0 <__sfputc_r>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d1f3      	bne.n	8002cd4 <__sfputs_r+0xa>
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cf0 <_vfiprintf_r>:
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	460d      	mov	r5, r1
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	4698      	mov	r8, r3
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	b09d      	sub	sp, #116	; 0x74
 8002cfe:	b118      	cbz	r0, 8002d08 <_vfiprintf_r+0x18>
 8002d00:	6983      	ldr	r3, [r0, #24]
 8002d02:	b90b      	cbnz	r3, 8002d08 <_vfiprintf_r+0x18>
 8002d04:	f000 fca8 	bl	8003658 <__sinit>
 8002d08:	4b89      	ldr	r3, [pc, #548]	; (8002f30 <_vfiprintf_r+0x240>)
 8002d0a:	429d      	cmp	r5, r3
 8002d0c:	d11b      	bne.n	8002d46 <_vfiprintf_r+0x56>
 8002d0e:	6875      	ldr	r5, [r6, #4]
 8002d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d12:	07d9      	lsls	r1, r3, #31
 8002d14:	d405      	bmi.n	8002d22 <_vfiprintf_r+0x32>
 8002d16:	89ab      	ldrh	r3, [r5, #12]
 8002d18:	059a      	lsls	r2, r3, #22
 8002d1a:	d402      	bmi.n	8002d22 <_vfiprintf_r+0x32>
 8002d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d1e:	f000 fd39 	bl	8003794 <__retarget_lock_acquire_recursive>
 8002d22:	89ab      	ldrh	r3, [r5, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	d501      	bpl.n	8002d2c <_vfiprintf_r+0x3c>
 8002d28:	692b      	ldr	r3, [r5, #16]
 8002d2a:	b9eb      	cbnz	r3, 8002d68 <_vfiprintf_r+0x78>
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	4630      	mov	r0, r6
 8002d30:	f000 fb06 	bl	8003340 <__swsetup_r>
 8002d34:	b1c0      	cbz	r0, 8002d68 <_vfiprintf_r+0x78>
 8002d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d38:	07dc      	lsls	r4, r3, #31
 8002d3a:	d50e      	bpl.n	8002d5a <_vfiprintf_r+0x6a>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	b01d      	add	sp, #116	; 0x74
 8002d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <_vfiprintf_r+0x244>)
 8002d48:	429d      	cmp	r5, r3
 8002d4a:	d101      	bne.n	8002d50 <_vfiprintf_r+0x60>
 8002d4c:	68b5      	ldr	r5, [r6, #8]
 8002d4e:	e7df      	b.n	8002d10 <_vfiprintf_r+0x20>
 8002d50:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <_vfiprintf_r+0x248>)
 8002d52:	429d      	cmp	r5, r3
 8002d54:	bf08      	it	eq
 8002d56:	68f5      	ldreq	r5, [r6, #12]
 8002d58:	e7da      	b.n	8002d10 <_vfiprintf_r+0x20>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	0598      	lsls	r0, r3, #22
 8002d5e:	d4ed      	bmi.n	8002d3c <_vfiprintf_r+0x4c>
 8002d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d62:	f000 fd18 	bl	8003796 <__retarget_lock_release_recursive>
 8002d66:	e7e9      	b.n	8002d3c <_vfiprintf_r+0x4c>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d72:	2330      	movs	r3, #48	; 0x30
 8002d74:	f04f 0901 	mov.w	r9, #1
 8002d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f3c <_vfiprintf_r+0x24c>
 8002d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d84:	4623      	mov	r3, r4
 8002d86:	469a      	mov	sl, r3
 8002d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d8c:	b10a      	cbz	r2, 8002d92 <_vfiprintf_r+0xa2>
 8002d8e:	2a25      	cmp	r2, #37	; 0x25
 8002d90:	d1f9      	bne.n	8002d86 <_vfiprintf_r+0x96>
 8002d92:	ebba 0b04 	subs.w	fp, sl, r4
 8002d96:	d00b      	beq.n	8002db0 <_vfiprintf_r+0xc0>
 8002d98:	465b      	mov	r3, fp
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f7ff ff93 	bl	8002cca <__sfputs_r>
 8002da4:	3001      	adds	r0, #1
 8002da6:	f000 80aa 	beq.w	8002efe <_vfiprintf_r+0x20e>
 8002daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dac:	445a      	add	r2, fp
 8002dae:	9209      	str	r2, [sp, #36]	; 0x24
 8002db0:	f89a 3000 	ldrb.w	r3, [sl]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a2 	beq.w	8002efe <_vfiprintf_r+0x20e>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dc4:	f10a 0a01 	add.w	sl, sl, #1
 8002dc8:	9304      	str	r3, [sp, #16]
 8002dca:	9307      	str	r3, [sp, #28]
 8002dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002dd2:	4654      	mov	r4, sl
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dda:	4858      	ldr	r0, [pc, #352]	; (8002f3c <_vfiprintf_r+0x24c>)
 8002ddc:	f000 fd42 	bl	8003864 <memchr>
 8002de0:	9a04      	ldr	r2, [sp, #16]
 8002de2:	b9d8      	cbnz	r0, 8002e1c <_vfiprintf_r+0x12c>
 8002de4:	06d1      	lsls	r1, r2, #27
 8002de6:	bf44      	itt	mi
 8002de8:	2320      	movmi	r3, #32
 8002dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dee:	0713      	lsls	r3, r2, #28
 8002df0:	bf44      	itt	mi
 8002df2:	232b      	movmi	r3, #43	; 0x2b
 8002df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002df8:	f89a 3000 	ldrb.w	r3, [sl]
 8002dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dfe:	d015      	beq.n	8002e2c <_vfiprintf_r+0x13c>
 8002e00:	4654      	mov	r4, sl
 8002e02:	2000      	movs	r0, #0
 8002e04:	f04f 0c0a 	mov.w	ip, #10
 8002e08:	9a07      	ldr	r2, [sp, #28]
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e10:	3b30      	subs	r3, #48	; 0x30
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d94e      	bls.n	8002eb4 <_vfiprintf_r+0x1c4>
 8002e16:	b1b0      	cbz	r0, 8002e46 <_vfiprintf_r+0x156>
 8002e18:	9207      	str	r2, [sp, #28]
 8002e1a:	e014      	b.n	8002e46 <_vfiprintf_r+0x156>
 8002e1c:	eba0 0308 	sub.w	r3, r0, r8
 8002e20:	fa09 f303 	lsl.w	r3, r9, r3
 8002e24:	4313      	orrs	r3, r2
 8002e26:	46a2      	mov	sl, r4
 8002e28:	9304      	str	r3, [sp, #16]
 8002e2a:	e7d2      	b.n	8002dd2 <_vfiprintf_r+0xe2>
 8002e2c:	9b03      	ldr	r3, [sp, #12]
 8002e2e:	1d19      	adds	r1, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	9103      	str	r1, [sp, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bfbb      	ittet	lt
 8002e38:	425b      	neglt	r3, r3
 8002e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e3e:	9307      	strge	r3, [sp, #28]
 8002e40:	9307      	strlt	r3, [sp, #28]
 8002e42:	bfb8      	it	lt
 8002e44:	9204      	strlt	r2, [sp, #16]
 8002e46:	7823      	ldrb	r3, [r4, #0]
 8002e48:	2b2e      	cmp	r3, #46	; 0x2e
 8002e4a:	d10c      	bne.n	8002e66 <_vfiprintf_r+0x176>
 8002e4c:	7863      	ldrb	r3, [r4, #1]
 8002e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e50:	d135      	bne.n	8002ebe <_vfiprintf_r+0x1ce>
 8002e52:	9b03      	ldr	r3, [sp, #12]
 8002e54:	3402      	adds	r4, #2
 8002e56:	1d1a      	adds	r2, r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	9203      	str	r2, [sp, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bfb8      	it	lt
 8002e60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e64:	9305      	str	r3, [sp, #20]
 8002e66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002f40 <_vfiprintf_r+0x250>
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	4650      	mov	r0, sl
 8002e6e:	7821      	ldrb	r1, [r4, #0]
 8002e70:	f000 fcf8 	bl	8003864 <memchr>
 8002e74:	b140      	cbz	r0, 8002e88 <_vfiprintf_r+0x198>
 8002e76:	2340      	movs	r3, #64	; 0x40
 8002e78:	eba0 000a 	sub.w	r0, r0, sl
 8002e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8002e80:	9b04      	ldr	r3, [sp, #16]
 8002e82:	3401      	adds	r4, #1
 8002e84:	4303      	orrs	r3, r0
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	482d      	ldr	r0, [pc, #180]	; (8002f44 <_vfiprintf_r+0x254>)
 8002e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e94:	f000 fce6 	bl	8003864 <memchr>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d03f      	beq.n	8002f1c <_vfiprintf_r+0x22c>
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <_vfiprintf_r+0x258>)
 8002e9e:	bb1b      	cbnz	r3, 8002ee8 <_vfiprintf_r+0x1f8>
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	3307      	adds	r3, #7
 8002ea4:	f023 0307 	bic.w	r3, r3, #7
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eae:	443b      	add	r3, r7
 8002eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb2:	e767      	b.n	8002d84 <_vfiprintf_r+0x94>
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ebc:	e7a5      	b.n	8002e0a <_vfiprintf_r+0x11a>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f04f 0c0a 	mov.w	ip, #10
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	3401      	adds	r4, #1
 8002ec8:	9305      	str	r3, [sp, #20]
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ed0:	3a30      	subs	r2, #48	; 0x30
 8002ed2:	2a09      	cmp	r2, #9
 8002ed4:	d903      	bls.n	8002ede <_vfiprintf_r+0x1ee>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0c5      	beq.n	8002e66 <_vfiprintf_r+0x176>
 8002eda:	9105      	str	r1, [sp, #20]
 8002edc:	e7c3      	b.n	8002e66 <_vfiprintf_r+0x176>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ee6:	e7f0      	b.n	8002eca <_vfiprintf_r+0x1da>
 8002ee8:	ab03      	add	r3, sp, #12
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	462a      	mov	r2, r5
 8002eee:	4630      	mov	r0, r6
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <_vfiprintf_r+0x25c>)
 8002ef2:	a904      	add	r1, sp, #16
 8002ef4:	f3af 8000 	nop.w
 8002ef8:	4607      	mov	r7, r0
 8002efa:	1c78      	adds	r0, r7, #1
 8002efc:	d1d6      	bne.n	8002eac <_vfiprintf_r+0x1bc>
 8002efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f00:	07d9      	lsls	r1, r3, #31
 8002f02:	d405      	bmi.n	8002f10 <_vfiprintf_r+0x220>
 8002f04:	89ab      	ldrh	r3, [r5, #12]
 8002f06:	059a      	lsls	r2, r3, #22
 8002f08:	d402      	bmi.n	8002f10 <_vfiprintf_r+0x220>
 8002f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f0c:	f000 fc43 	bl	8003796 <__retarget_lock_release_recursive>
 8002f10:	89ab      	ldrh	r3, [r5, #12]
 8002f12:	065b      	lsls	r3, r3, #25
 8002f14:	f53f af12 	bmi.w	8002d3c <_vfiprintf_r+0x4c>
 8002f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f1a:	e711      	b.n	8002d40 <_vfiprintf_r+0x50>
 8002f1c:	ab03      	add	r3, sp, #12
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	462a      	mov	r2, r5
 8002f22:	4630      	mov	r0, r6
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <_vfiprintf_r+0x25c>)
 8002f26:	a904      	add	r1, sp, #16
 8002f28:	f000 f882 	bl	8003030 <_printf_i>
 8002f2c:	e7e4      	b.n	8002ef8 <_vfiprintf_r+0x208>
 8002f2e:	bf00      	nop
 8002f30:	08003bcc 	.word	0x08003bcc
 8002f34:	08003bec 	.word	0x08003bec
 8002f38:	08003bac 	.word	0x08003bac
 8002f3c:	08003b76 	.word	0x08003b76
 8002f40:	08003b7c 	.word	0x08003b7c
 8002f44:	08003b80 	.word	0x08003b80
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	08002ccb 	.word	0x08002ccb

08002f50 <_printf_common>:
 8002f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	4616      	mov	r6, r2
 8002f56:	4699      	mov	r9, r3
 8002f58:	688a      	ldr	r2, [r1, #8]
 8002f5a:	690b      	ldr	r3, [r1, #16]
 8002f5c:	4607      	mov	r7, r0
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	bfb8      	it	lt
 8002f62:	4613      	movlt	r3, r2
 8002f64:	6033      	str	r3, [r6, #0]
 8002f66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f70:	b10a      	cbz	r2, 8002f76 <_printf_common+0x26>
 8002f72:	3301      	adds	r3, #1
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	0699      	lsls	r1, r3, #26
 8002f7a:	bf42      	ittt	mi
 8002f7c:	6833      	ldrmi	r3, [r6, #0]
 8002f7e:	3302      	addmi	r3, #2
 8002f80:	6033      	strmi	r3, [r6, #0]
 8002f82:	6825      	ldr	r5, [r4, #0]
 8002f84:	f015 0506 	ands.w	r5, r5, #6
 8002f88:	d106      	bne.n	8002f98 <_printf_common+0x48>
 8002f8a:	f104 0a19 	add.w	sl, r4, #25
 8002f8e:	68e3      	ldr	r3, [r4, #12]
 8002f90:	6832      	ldr	r2, [r6, #0]
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	42ab      	cmp	r3, r5
 8002f96:	dc28      	bgt.n	8002fea <_printf_common+0x9a>
 8002f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f9c:	1e13      	subs	r3, r2, #0
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	bf18      	it	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	0692      	lsls	r2, r2, #26
 8002fa6:	d42d      	bmi.n	8003004 <_printf_common+0xb4>
 8002fa8:	4649      	mov	r1, r9
 8002faa:	4638      	mov	r0, r7
 8002fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d020      	beq.n	8002ff8 <_printf_common+0xa8>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	68e5      	ldr	r5, [r4, #12]
 8002fba:	f003 0306 	and.w	r3, r3, #6
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf18      	it	ne
 8002fc2:	2500      	movne	r5, #0
 8002fc4:	6832      	ldr	r2, [r6, #0]
 8002fc6:	f04f 0600 	mov.w	r6, #0
 8002fca:	68a3      	ldr	r3, [r4, #8]
 8002fcc:	bf08      	it	eq
 8002fce:	1aad      	subeq	r5, r5, r2
 8002fd0:	6922      	ldr	r2, [r4, #16]
 8002fd2:	bf08      	it	eq
 8002fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bfc4      	itt	gt
 8002fdc:	1a9b      	subgt	r3, r3, r2
 8002fde:	18ed      	addgt	r5, r5, r3
 8002fe0:	341a      	adds	r4, #26
 8002fe2:	42b5      	cmp	r5, r6
 8002fe4:	d11a      	bne.n	800301c <_printf_common+0xcc>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e008      	b.n	8002ffc <_printf_common+0xac>
 8002fea:	2301      	movs	r3, #1
 8002fec:	4652      	mov	r2, sl
 8002fee:	4649      	mov	r1, r9
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	47c0      	blx	r8
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	d103      	bne.n	8003000 <_printf_common+0xb0>
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003000:	3501      	adds	r5, #1
 8003002:	e7c4      	b.n	8002f8e <_printf_common+0x3e>
 8003004:	2030      	movs	r0, #48	; 0x30
 8003006:	18e1      	adds	r1, r4, r3
 8003008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003012:	4422      	add	r2, r4
 8003014:	3302      	adds	r3, #2
 8003016:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800301a:	e7c5      	b.n	8002fa8 <_printf_common+0x58>
 800301c:	2301      	movs	r3, #1
 800301e:	4622      	mov	r2, r4
 8003020:	4649      	mov	r1, r9
 8003022:	4638      	mov	r0, r7
 8003024:	47c0      	blx	r8
 8003026:	3001      	adds	r0, #1
 8003028:	d0e6      	beq.n	8002ff8 <_printf_common+0xa8>
 800302a:	3601      	adds	r6, #1
 800302c:	e7d9      	b.n	8002fe2 <_printf_common+0x92>
	...

08003030 <_printf_i>:
 8003030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003034:	7e0f      	ldrb	r7, [r1, #24]
 8003036:	4691      	mov	r9, r2
 8003038:	2f78      	cmp	r7, #120	; 0x78
 800303a:	4680      	mov	r8, r0
 800303c:	460c      	mov	r4, r1
 800303e:	469a      	mov	sl, r3
 8003040:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003046:	d807      	bhi.n	8003058 <_printf_i+0x28>
 8003048:	2f62      	cmp	r7, #98	; 0x62
 800304a:	d80a      	bhi.n	8003062 <_printf_i+0x32>
 800304c:	2f00      	cmp	r7, #0
 800304e:	f000 80d9 	beq.w	8003204 <_printf_i+0x1d4>
 8003052:	2f58      	cmp	r7, #88	; 0x58
 8003054:	f000 80a4 	beq.w	80031a0 <_printf_i+0x170>
 8003058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800305c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003060:	e03a      	b.n	80030d8 <_printf_i+0xa8>
 8003062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003066:	2b15      	cmp	r3, #21
 8003068:	d8f6      	bhi.n	8003058 <_printf_i+0x28>
 800306a:	a101      	add	r1, pc, #4	; (adr r1, 8003070 <_printf_i+0x40>)
 800306c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003070:	080030c9 	.word	0x080030c9
 8003074:	080030dd 	.word	0x080030dd
 8003078:	08003059 	.word	0x08003059
 800307c:	08003059 	.word	0x08003059
 8003080:	08003059 	.word	0x08003059
 8003084:	08003059 	.word	0x08003059
 8003088:	080030dd 	.word	0x080030dd
 800308c:	08003059 	.word	0x08003059
 8003090:	08003059 	.word	0x08003059
 8003094:	08003059 	.word	0x08003059
 8003098:	08003059 	.word	0x08003059
 800309c:	080031eb 	.word	0x080031eb
 80030a0:	0800310d 	.word	0x0800310d
 80030a4:	080031cd 	.word	0x080031cd
 80030a8:	08003059 	.word	0x08003059
 80030ac:	08003059 	.word	0x08003059
 80030b0:	0800320d 	.word	0x0800320d
 80030b4:	08003059 	.word	0x08003059
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	08003059 	.word	0x08003059
 80030c0:	08003059 	.word	0x08003059
 80030c4:	080031d5 	.word	0x080031d5
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	602a      	str	r2, [r5, #0]
 80030d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d8:	2301      	movs	r3, #1
 80030da:	e0a4      	b.n	8003226 <_printf_i+0x1f6>
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	6829      	ldr	r1, [r5, #0]
 80030e0:	0606      	lsls	r6, r0, #24
 80030e2:	f101 0304 	add.w	r3, r1, #4
 80030e6:	d50a      	bpl.n	80030fe <_printf_i+0xce>
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	2e00      	cmp	r6, #0
 80030ee:	da03      	bge.n	80030f8 <_printf_i+0xc8>
 80030f0:	232d      	movs	r3, #45	; 0x2d
 80030f2:	4276      	negs	r6, r6
 80030f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f8:	230a      	movs	r3, #10
 80030fa:	485e      	ldr	r0, [pc, #376]	; (8003274 <_printf_i+0x244>)
 80030fc:	e019      	b.n	8003132 <_printf_i+0x102>
 80030fe:	680e      	ldr	r6, [r1, #0]
 8003100:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	bf18      	it	ne
 8003108:	b236      	sxthne	r6, r6
 800310a:	e7ef      	b.n	80030ec <_printf_i+0xbc>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	1d19      	adds	r1, r3, #4
 8003112:	6029      	str	r1, [r5, #0]
 8003114:	0601      	lsls	r1, r0, #24
 8003116:	d501      	bpl.n	800311c <_printf_i+0xec>
 8003118:	681e      	ldr	r6, [r3, #0]
 800311a:	e002      	b.n	8003122 <_printf_i+0xf2>
 800311c:	0646      	lsls	r6, r0, #25
 800311e:	d5fb      	bpl.n	8003118 <_printf_i+0xe8>
 8003120:	881e      	ldrh	r6, [r3, #0]
 8003122:	2f6f      	cmp	r7, #111	; 0x6f
 8003124:	bf0c      	ite	eq
 8003126:	2308      	moveq	r3, #8
 8003128:	230a      	movne	r3, #10
 800312a:	4852      	ldr	r0, [pc, #328]	; (8003274 <_printf_i+0x244>)
 800312c:	2100      	movs	r1, #0
 800312e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003132:	6865      	ldr	r5, [r4, #4]
 8003134:	2d00      	cmp	r5, #0
 8003136:	bfa8      	it	ge
 8003138:	6821      	ldrge	r1, [r4, #0]
 800313a:	60a5      	str	r5, [r4, #8]
 800313c:	bfa4      	itt	ge
 800313e:	f021 0104 	bicge.w	r1, r1, #4
 8003142:	6021      	strge	r1, [r4, #0]
 8003144:	b90e      	cbnz	r6, 800314a <_printf_i+0x11a>
 8003146:	2d00      	cmp	r5, #0
 8003148:	d04d      	beq.n	80031e6 <_printf_i+0x1b6>
 800314a:	4615      	mov	r5, r2
 800314c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003150:	fb03 6711 	mls	r7, r3, r1, r6
 8003154:	5dc7      	ldrb	r7, [r0, r7]
 8003156:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800315a:	4637      	mov	r7, r6
 800315c:	42bb      	cmp	r3, r7
 800315e:	460e      	mov	r6, r1
 8003160:	d9f4      	bls.n	800314c <_printf_i+0x11c>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d10b      	bne.n	800317e <_printf_i+0x14e>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	07de      	lsls	r6, r3, #31
 800316a:	d508      	bpl.n	800317e <_printf_i+0x14e>
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	6861      	ldr	r1, [r4, #4]
 8003170:	4299      	cmp	r1, r3
 8003172:	bfde      	ittt	le
 8003174:	2330      	movle	r3, #48	; 0x30
 8003176:	f805 3c01 	strble.w	r3, [r5, #-1]
 800317a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800317e:	1b52      	subs	r2, r2, r5
 8003180:	6122      	str	r2, [r4, #16]
 8003182:	464b      	mov	r3, r9
 8003184:	4621      	mov	r1, r4
 8003186:	4640      	mov	r0, r8
 8003188:	f8cd a000 	str.w	sl, [sp]
 800318c:	aa03      	add	r2, sp, #12
 800318e:	f7ff fedf 	bl	8002f50 <_printf_common>
 8003192:	3001      	adds	r0, #1
 8003194:	d14c      	bne.n	8003230 <_printf_i+0x200>
 8003196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800319a:	b004      	add	sp, #16
 800319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a0:	4834      	ldr	r0, [pc, #208]	; (8003274 <_printf_i+0x244>)
 80031a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031a6:	6829      	ldr	r1, [r5, #0]
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80031ae:	6029      	str	r1, [r5, #0]
 80031b0:	061d      	lsls	r5, r3, #24
 80031b2:	d514      	bpl.n	80031de <_printf_i+0x1ae>
 80031b4:	07df      	lsls	r7, r3, #31
 80031b6:	bf44      	itt	mi
 80031b8:	f043 0320 	orrmi.w	r3, r3, #32
 80031bc:	6023      	strmi	r3, [r4, #0]
 80031be:	b91e      	cbnz	r6, 80031c8 <_printf_i+0x198>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	f023 0320 	bic.w	r3, r3, #32
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	2310      	movs	r3, #16
 80031ca:	e7af      	b.n	800312c <_printf_i+0xfc>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	f043 0320 	orr.w	r3, r3, #32
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	2378      	movs	r3, #120	; 0x78
 80031d6:	4828      	ldr	r0, [pc, #160]	; (8003278 <_printf_i+0x248>)
 80031d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031dc:	e7e3      	b.n	80031a6 <_printf_i+0x176>
 80031de:	0659      	lsls	r1, r3, #25
 80031e0:	bf48      	it	mi
 80031e2:	b2b6      	uxthmi	r6, r6
 80031e4:	e7e6      	b.n	80031b4 <_printf_i+0x184>
 80031e6:	4615      	mov	r5, r2
 80031e8:	e7bb      	b.n	8003162 <_printf_i+0x132>
 80031ea:	682b      	ldr	r3, [r5, #0]
 80031ec:	6826      	ldr	r6, [r4, #0]
 80031ee:	1d18      	adds	r0, r3, #4
 80031f0:	6961      	ldr	r1, [r4, #20]
 80031f2:	6028      	str	r0, [r5, #0]
 80031f4:	0635      	lsls	r5, r6, #24
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	d501      	bpl.n	80031fe <_printf_i+0x1ce>
 80031fa:	6019      	str	r1, [r3, #0]
 80031fc:	e002      	b.n	8003204 <_printf_i+0x1d4>
 80031fe:	0670      	lsls	r0, r6, #25
 8003200:	d5fb      	bpl.n	80031fa <_printf_i+0x1ca>
 8003202:	8019      	strh	r1, [r3, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	4615      	mov	r5, r2
 8003208:	6123      	str	r3, [r4, #16]
 800320a:	e7ba      	b.n	8003182 <_printf_i+0x152>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	1d1a      	adds	r2, r3, #4
 8003212:	602a      	str	r2, [r5, #0]
 8003214:	681d      	ldr	r5, [r3, #0]
 8003216:	6862      	ldr	r2, [r4, #4]
 8003218:	4628      	mov	r0, r5
 800321a:	f000 fb23 	bl	8003864 <memchr>
 800321e:	b108      	cbz	r0, 8003224 <_printf_i+0x1f4>
 8003220:	1b40      	subs	r0, r0, r5
 8003222:	6060      	str	r0, [r4, #4]
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	6123      	str	r3, [r4, #16]
 8003228:	2300      	movs	r3, #0
 800322a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800322e:	e7a8      	b.n	8003182 <_printf_i+0x152>
 8003230:	462a      	mov	r2, r5
 8003232:	4649      	mov	r1, r9
 8003234:	4640      	mov	r0, r8
 8003236:	6923      	ldr	r3, [r4, #16]
 8003238:	47d0      	blx	sl
 800323a:	3001      	adds	r0, #1
 800323c:	d0ab      	beq.n	8003196 <_printf_i+0x166>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	079b      	lsls	r3, r3, #30
 8003242:	d413      	bmi.n	800326c <_printf_i+0x23c>
 8003244:	68e0      	ldr	r0, [r4, #12]
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	4298      	cmp	r0, r3
 800324a:	bfb8      	it	lt
 800324c:	4618      	movlt	r0, r3
 800324e:	e7a4      	b.n	800319a <_printf_i+0x16a>
 8003250:	2301      	movs	r3, #1
 8003252:	4632      	mov	r2, r6
 8003254:	4649      	mov	r1, r9
 8003256:	4640      	mov	r0, r8
 8003258:	47d0      	blx	sl
 800325a:	3001      	adds	r0, #1
 800325c:	d09b      	beq.n	8003196 <_printf_i+0x166>
 800325e:	3501      	adds	r5, #1
 8003260:	68e3      	ldr	r3, [r4, #12]
 8003262:	9903      	ldr	r1, [sp, #12]
 8003264:	1a5b      	subs	r3, r3, r1
 8003266:	42ab      	cmp	r3, r5
 8003268:	dcf2      	bgt.n	8003250 <_printf_i+0x220>
 800326a:	e7eb      	b.n	8003244 <_printf_i+0x214>
 800326c:	2500      	movs	r5, #0
 800326e:	f104 0619 	add.w	r6, r4, #25
 8003272:	e7f5      	b.n	8003260 <_printf_i+0x230>
 8003274:	08003b87 	.word	0x08003b87
 8003278:	08003b98 	.word	0x08003b98

0800327c <_sbrk_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	2300      	movs	r3, #0
 8003280:	4d05      	ldr	r5, [pc, #20]	; (8003298 <_sbrk_r+0x1c>)
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	f7fd fd40 	bl	8000d0c <_sbrk>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_sbrk_r+0x1a>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_sbrk_r+0x1a>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	20000548 	.word	0x20000548

0800329c <__swbuf_r>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	460e      	mov	r6, r1
 80032a0:	4614      	mov	r4, r2
 80032a2:	4605      	mov	r5, r0
 80032a4:	b118      	cbz	r0, 80032ae <__swbuf_r+0x12>
 80032a6:	6983      	ldr	r3, [r0, #24]
 80032a8:	b90b      	cbnz	r3, 80032ae <__swbuf_r+0x12>
 80032aa:	f000 f9d5 	bl	8003658 <__sinit>
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <__swbuf_r+0x98>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d12b      	bne.n	800330c <__swbuf_r+0x70>
 80032b4:	686c      	ldr	r4, [r5, #4]
 80032b6:	69a3      	ldr	r3, [r4, #24]
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	071a      	lsls	r2, r3, #28
 80032be:	d52f      	bpl.n	8003320 <__swbuf_r+0x84>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	b36b      	cbz	r3, 8003320 <__swbuf_r+0x84>
 80032c4:	6923      	ldr	r3, [r4, #16]
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	b2f6      	uxtb	r6, r6
 80032ca:	1ac0      	subs	r0, r0, r3
 80032cc:	6963      	ldr	r3, [r4, #20]
 80032ce:	4637      	mov	r7, r6
 80032d0:	4283      	cmp	r3, r0
 80032d2:	dc04      	bgt.n	80032de <__swbuf_r+0x42>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f92a 	bl	8003530 <_fflush_r>
 80032dc:	bb30      	cbnz	r0, 800332c <__swbuf_r+0x90>
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	3001      	adds	r0, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6022      	str	r2, [r4, #0]
 80032ec:	701e      	strb	r6, [r3, #0]
 80032ee:	6963      	ldr	r3, [r4, #20]
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d004      	beq.n	80032fe <__swbuf_r+0x62>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	07db      	lsls	r3, r3, #31
 80032f8:	d506      	bpl.n	8003308 <__swbuf_r+0x6c>
 80032fa:	2e0a      	cmp	r6, #10
 80032fc:	d104      	bne.n	8003308 <__swbuf_r+0x6c>
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 f915 	bl	8003530 <_fflush_r>
 8003306:	b988      	cbnz	r0, 800332c <__swbuf_r+0x90>
 8003308:	4638      	mov	r0, r7
 800330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <__swbuf_r+0x9c>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d101      	bne.n	8003316 <__swbuf_r+0x7a>
 8003312:	68ac      	ldr	r4, [r5, #8]
 8003314:	e7cf      	b.n	80032b6 <__swbuf_r+0x1a>
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <__swbuf_r+0xa0>)
 8003318:	429c      	cmp	r4, r3
 800331a:	bf08      	it	eq
 800331c:	68ec      	ldreq	r4, [r5, #12]
 800331e:	e7ca      	b.n	80032b6 <__swbuf_r+0x1a>
 8003320:	4621      	mov	r1, r4
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f80c 	bl	8003340 <__swsetup_r>
 8003328:	2800      	cmp	r0, #0
 800332a:	d0cb      	beq.n	80032c4 <__swbuf_r+0x28>
 800332c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003330:	e7ea      	b.n	8003308 <__swbuf_r+0x6c>
 8003332:	bf00      	nop
 8003334:	08003bcc 	.word	0x08003bcc
 8003338:	08003bec 	.word	0x08003bec
 800333c:	08003bac 	.word	0x08003bac

08003340 <__swsetup_r>:
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <__swsetup_r+0xcc>)
 8003342:	b570      	push	{r4, r5, r6, lr}
 8003344:	681d      	ldr	r5, [r3, #0]
 8003346:	4606      	mov	r6, r0
 8003348:	460c      	mov	r4, r1
 800334a:	b125      	cbz	r5, 8003356 <__swsetup_r+0x16>
 800334c:	69ab      	ldr	r3, [r5, #24]
 800334e:	b913      	cbnz	r3, 8003356 <__swsetup_r+0x16>
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f981 	bl	8003658 <__sinit>
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <__swsetup_r+0xd0>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d10f      	bne.n	800337c <__swsetup_r+0x3c>
 800335c:	686c      	ldr	r4, [r5, #4]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003364:	0719      	lsls	r1, r3, #28
 8003366:	d42c      	bmi.n	80033c2 <__swsetup_r+0x82>
 8003368:	06dd      	lsls	r5, r3, #27
 800336a:	d411      	bmi.n	8003390 <__swsetup_r+0x50>
 800336c:	2309      	movs	r3, #9
 800336e:	6033      	str	r3, [r6, #0]
 8003370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003378:	81a3      	strh	r3, [r4, #12]
 800337a:	e03e      	b.n	80033fa <__swsetup_r+0xba>
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <__swsetup_r+0xd4>)
 800337e:	429c      	cmp	r4, r3
 8003380:	d101      	bne.n	8003386 <__swsetup_r+0x46>
 8003382:	68ac      	ldr	r4, [r5, #8]
 8003384:	e7eb      	b.n	800335e <__swsetup_r+0x1e>
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <__swsetup_r+0xd8>)
 8003388:	429c      	cmp	r4, r3
 800338a:	bf08      	it	eq
 800338c:	68ec      	ldreq	r4, [r5, #12]
 800338e:	e7e6      	b.n	800335e <__swsetup_r+0x1e>
 8003390:	0758      	lsls	r0, r3, #29
 8003392:	d512      	bpl.n	80033ba <__swsetup_r+0x7a>
 8003394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003396:	b141      	cbz	r1, 80033aa <__swsetup_r+0x6a>
 8003398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800339c:	4299      	cmp	r1, r3
 800339e:	d002      	beq.n	80033a6 <__swsetup_r+0x66>
 80033a0:	4630      	mov	r0, r6
 80033a2:	f7ff fba1 	bl	8002ae8 <_free_r>
 80033a6:	2300      	movs	r3, #0
 80033a8:	6363      	str	r3, [r4, #52]	; 0x34
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	6063      	str	r3, [r4, #4]
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	b94b      	cbnz	r3, 80033da <__swsetup_r+0x9a>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d003      	beq.n	80033da <__swsetup_r+0x9a>
 80033d2:	4621      	mov	r1, r4
 80033d4:	4630      	mov	r0, r6
 80033d6:	f000 fa05 	bl	80037e4 <__smakebuf_r>
 80033da:	89a0      	ldrh	r0, [r4, #12]
 80033dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e0:	f010 0301 	ands.w	r3, r0, #1
 80033e4:	d00a      	beq.n	80033fc <__swsetup_r+0xbc>
 80033e6:	2300      	movs	r3, #0
 80033e8:	60a3      	str	r3, [r4, #8]
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	425b      	negs	r3, r3
 80033ee:	61a3      	str	r3, [r4, #24]
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	b943      	cbnz	r3, 8003406 <__swsetup_r+0xc6>
 80033f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033f8:	d1ba      	bne.n	8003370 <__swsetup_r+0x30>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	0781      	lsls	r1, r0, #30
 80033fe:	bf58      	it	pl
 8003400:	6963      	ldrpl	r3, [r4, #20]
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	e7f4      	b.n	80033f0 <__swsetup_r+0xb0>
 8003406:	2000      	movs	r0, #0
 8003408:	e7f7      	b.n	80033fa <__swsetup_r+0xba>
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c
 8003410:	08003bcc 	.word	0x08003bcc
 8003414:	08003bec 	.word	0x08003bec
 8003418:	08003bac 	.word	0x08003bac

0800341c <abort>:
 800341c:	2006      	movs	r0, #6
 800341e:	b508      	push	{r3, lr}
 8003420:	f000 fa62 	bl	80038e8 <raise>
 8003424:	2001      	movs	r0, #1
 8003426:	f7fd fbfd 	bl	8000c24 <_exit>
	...

0800342c <__sflush_r>:
 800342c:	898a      	ldrh	r2, [r1, #12]
 800342e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003430:	4605      	mov	r5, r0
 8003432:	0710      	lsls	r0, r2, #28
 8003434:	460c      	mov	r4, r1
 8003436:	d457      	bmi.n	80034e8 <__sflush_r+0xbc>
 8003438:	684b      	ldr	r3, [r1, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	dc04      	bgt.n	8003448 <__sflush_r+0x1c>
 800343e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	dc01      	bgt.n	8003448 <__sflush_r+0x1c>
 8003444:	2000      	movs	r0, #0
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800344a:	2e00      	cmp	r6, #0
 800344c:	d0fa      	beq.n	8003444 <__sflush_r+0x18>
 800344e:	2300      	movs	r3, #0
 8003450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003454:	682f      	ldr	r7, [r5, #0]
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	d032      	beq.n	80034c0 <__sflush_r+0x94>
 800345a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	075a      	lsls	r2, r3, #29
 8003460:	d505      	bpl.n	800346e <__sflush_r+0x42>
 8003462:	6863      	ldr	r3, [r4, #4]
 8003464:	1ac0      	subs	r0, r0, r3
 8003466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003468:	b10b      	cbz	r3, 800346e <__sflush_r+0x42>
 800346a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800346c:	1ac0      	subs	r0, r0, r3
 800346e:	2300      	movs	r3, #0
 8003470:	4602      	mov	r2, r0
 8003472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003474:	4628      	mov	r0, r5
 8003476:	6a21      	ldr	r1, [r4, #32]
 8003478:	47b0      	blx	r6
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	d106      	bne.n	800348e <__sflush_r+0x62>
 8003480:	6829      	ldr	r1, [r5, #0]
 8003482:	291d      	cmp	r1, #29
 8003484:	d82c      	bhi.n	80034e0 <__sflush_r+0xb4>
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <__sflush_r+0x100>)
 8003488:	40ca      	lsrs	r2, r1
 800348a:	07d6      	lsls	r6, r2, #31
 800348c:	d528      	bpl.n	80034e0 <__sflush_r+0xb4>
 800348e:	2200      	movs	r2, #0
 8003490:	6062      	str	r2, [r4, #4]
 8003492:	6922      	ldr	r2, [r4, #16]
 8003494:	04d9      	lsls	r1, r3, #19
 8003496:	6022      	str	r2, [r4, #0]
 8003498:	d504      	bpl.n	80034a4 <__sflush_r+0x78>
 800349a:	1c42      	adds	r2, r0, #1
 800349c:	d101      	bne.n	80034a2 <__sflush_r+0x76>
 800349e:	682b      	ldr	r3, [r5, #0]
 80034a0:	b903      	cbnz	r3, 80034a4 <__sflush_r+0x78>
 80034a2:	6560      	str	r0, [r4, #84]	; 0x54
 80034a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034a6:	602f      	str	r7, [r5, #0]
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d0cb      	beq.n	8003444 <__sflush_r+0x18>
 80034ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034b0:	4299      	cmp	r1, r3
 80034b2:	d002      	beq.n	80034ba <__sflush_r+0x8e>
 80034b4:	4628      	mov	r0, r5
 80034b6:	f7ff fb17 	bl	8002ae8 <_free_r>
 80034ba:	2000      	movs	r0, #0
 80034bc:	6360      	str	r0, [r4, #52]	; 0x34
 80034be:	e7c2      	b.n	8003446 <__sflush_r+0x1a>
 80034c0:	6a21      	ldr	r1, [r4, #32]
 80034c2:	2301      	movs	r3, #1
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b0      	blx	r6
 80034c8:	1c41      	adds	r1, r0, #1
 80034ca:	d1c7      	bne.n	800345c <__sflush_r+0x30>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0c4      	beq.n	800345c <__sflush_r+0x30>
 80034d2:	2b1d      	cmp	r3, #29
 80034d4:	d001      	beq.n	80034da <__sflush_r+0xae>
 80034d6:	2b16      	cmp	r3, #22
 80034d8:	d101      	bne.n	80034de <__sflush_r+0xb2>
 80034da:	602f      	str	r7, [r5, #0]
 80034dc:	e7b2      	b.n	8003444 <__sflush_r+0x18>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	e7ae      	b.n	8003446 <__sflush_r+0x1a>
 80034e8:	690f      	ldr	r7, [r1, #16]
 80034ea:	2f00      	cmp	r7, #0
 80034ec:	d0aa      	beq.n	8003444 <__sflush_r+0x18>
 80034ee:	0793      	lsls	r3, r2, #30
 80034f0:	bf18      	it	ne
 80034f2:	2300      	movne	r3, #0
 80034f4:	680e      	ldr	r6, [r1, #0]
 80034f6:	bf08      	it	eq
 80034f8:	694b      	ldreq	r3, [r1, #20]
 80034fa:	1bf6      	subs	r6, r6, r7
 80034fc:	600f      	str	r7, [r1, #0]
 80034fe:	608b      	str	r3, [r1, #8]
 8003500:	2e00      	cmp	r6, #0
 8003502:	dd9f      	ble.n	8003444 <__sflush_r+0x18>
 8003504:	4633      	mov	r3, r6
 8003506:	463a      	mov	r2, r7
 8003508:	4628      	mov	r0, r5
 800350a:	6a21      	ldr	r1, [r4, #32]
 800350c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003510:	47e0      	blx	ip
 8003512:	2800      	cmp	r0, #0
 8003514:	dc06      	bgt.n	8003524 <__sflush_r+0xf8>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	e790      	b.n	8003446 <__sflush_r+0x1a>
 8003524:	4407      	add	r7, r0
 8003526:	1a36      	subs	r6, r6, r0
 8003528:	e7ea      	b.n	8003500 <__sflush_r+0xd4>
 800352a:	bf00      	nop
 800352c:	20400001 	.word	0x20400001

08003530 <_fflush_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	4605      	mov	r5, r0
 8003536:	460c      	mov	r4, r1
 8003538:	b913      	cbnz	r3, 8003540 <_fflush_r+0x10>
 800353a:	2500      	movs	r5, #0
 800353c:	4628      	mov	r0, r5
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	b118      	cbz	r0, 800354a <_fflush_r+0x1a>
 8003542:	6983      	ldr	r3, [r0, #24]
 8003544:	b90b      	cbnz	r3, 800354a <_fflush_r+0x1a>
 8003546:	f000 f887 	bl	8003658 <__sinit>
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <_fflush_r+0x6c>)
 800354c:	429c      	cmp	r4, r3
 800354e:	d11b      	bne.n	8003588 <_fflush_r+0x58>
 8003550:	686c      	ldr	r4, [r5, #4]
 8003552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ef      	beq.n	800353a <_fflush_r+0xa>
 800355a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800355c:	07d0      	lsls	r0, r2, #31
 800355e:	d404      	bmi.n	800356a <_fflush_r+0x3a>
 8003560:	0599      	lsls	r1, r3, #22
 8003562:	d402      	bmi.n	800356a <_fflush_r+0x3a>
 8003564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003566:	f000 f915 	bl	8003794 <__retarget_lock_acquire_recursive>
 800356a:	4628      	mov	r0, r5
 800356c:	4621      	mov	r1, r4
 800356e:	f7ff ff5d 	bl	800342c <__sflush_r>
 8003572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003574:	4605      	mov	r5, r0
 8003576:	07da      	lsls	r2, r3, #31
 8003578:	d4e0      	bmi.n	800353c <_fflush_r+0xc>
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	059b      	lsls	r3, r3, #22
 800357e:	d4dd      	bmi.n	800353c <_fflush_r+0xc>
 8003580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003582:	f000 f908 	bl	8003796 <__retarget_lock_release_recursive>
 8003586:	e7d9      	b.n	800353c <_fflush_r+0xc>
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <_fflush_r+0x70>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d101      	bne.n	8003592 <_fflush_r+0x62>
 800358e:	68ac      	ldr	r4, [r5, #8]
 8003590:	e7df      	b.n	8003552 <_fflush_r+0x22>
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <_fflush_r+0x74>)
 8003594:	429c      	cmp	r4, r3
 8003596:	bf08      	it	eq
 8003598:	68ec      	ldreq	r4, [r5, #12]
 800359a:	e7da      	b.n	8003552 <_fflush_r+0x22>
 800359c:	08003bcc 	.word	0x08003bcc
 80035a0:	08003bec 	.word	0x08003bec
 80035a4:	08003bac 	.word	0x08003bac

080035a8 <std>:
 80035a8:	2300      	movs	r3, #0
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
 80035ae:	e9c0 3300 	strd	r3, r3, [r0]
 80035b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035b6:	6083      	str	r3, [r0, #8]
 80035b8:	8181      	strh	r1, [r0, #12]
 80035ba:	6643      	str	r3, [r0, #100]	; 0x64
 80035bc:	81c2      	strh	r2, [r0, #14]
 80035be:	6183      	str	r3, [r0, #24]
 80035c0:	4619      	mov	r1, r3
 80035c2:	2208      	movs	r2, #8
 80035c4:	305c      	adds	r0, #92	; 0x5c
 80035c6:	f7ff f9e3 	bl	8002990 <memset>
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <std+0x38>)
 80035cc:	6224      	str	r4, [r4, #32]
 80035ce:	6263      	str	r3, [r4, #36]	; 0x24
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <std+0x3c>)
 80035d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <std+0x40>)
 80035d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <std+0x44>)
 80035da:	6323      	str	r3, [r4, #48]	; 0x30
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	bf00      	nop
 80035e0:	08003921 	.word	0x08003921
 80035e4:	08003943 	.word	0x08003943
 80035e8:	0800397b 	.word	0x0800397b
 80035ec:	0800399f 	.word	0x0800399f

080035f0 <_cleanup_r>:
 80035f0:	4901      	ldr	r1, [pc, #4]	; (80035f8 <_cleanup_r+0x8>)
 80035f2:	f000 b8af 	b.w	8003754 <_fwalk_reent>
 80035f6:	bf00      	nop
 80035f8:	08003531 	.word	0x08003531

080035fc <__sfmoreglue>:
 80035fc:	2268      	movs	r2, #104	; 0x68
 80035fe:	b570      	push	{r4, r5, r6, lr}
 8003600:	1e4d      	subs	r5, r1, #1
 8003602:	4355      	muls	r5, r2
 8003604:	460e      	mov	r6, r1
 8003606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800360a:	f7ff fad5 	bl	8002bb8 <_malloc_r>
 800360e:	4604      	mov	r4, r0
 8003610:	b140      	cbz	r0, 8003624 <__sfmoreglue+0x28>
 8003612:	2100      	movs	r1, #0
 8003614:	e9c0 1600 	strd	r1, r6, [r0]
 8003618:	300c      	adds	r0, #12
 800361a:	60a0      	str	r0, [r4, #8]
 800361c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003620:	f7ff f9b6 	bl	8002990 <memset>
 8003624:	4620      	mov	r0, r4
 8003626:	bd70      	pop	{r4, r5, r6, pc}

08003628 <__sfp_lock_acquire>:
 8003628:	4801      	ldr	r0, [pc, #4]	; (8003630 <__sfp_lock_acquire+0x8>)
 800362a:	f000 b8b3 	b.w	8003794 <__retarget_lock_acquire_recursive>
 800362e:	bf00      	nop
 8003630:	20000545 	.word	0x20000545

08003634 <__sfp_lock_release>:
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <__sfp_lock_release+0x8>)
 8003636:	f000 b8ae 	b.w	8003796 <__retarget_lock_release_recursive>
 800363a:	bf00      	nop
 800363c:	20000545 	.word	0x20000545

08003640 <__sinit_lock_acquire>:
 8003640:	4801      	ldr	r0, [pc, #4]	; (8003648 <__sinit_lock_acquire+0x8>)
 8003642:	f000 b8a7 	b.w	8003794 <__retarget_lock_acquire_recursive>
 8003646:	bf00      	nop
 8003648:	20000546 	.word	0x20000546

0800364c <__sinit_lock_release>:
 800364c:	4801      	ldr	r0, [pc, #4]	; (8003654 <__sinit_lock_release+0x8>)
 800364e:	f000 b8a2 	b.w	8003796 <__retarget_lock_release_recursive>
 8003652:	bf00      	nop
 8003654:	20000546 	.word	0x20000546

08003658 <__sinit>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	f7ff fff0 	bl	8003640 <__sinit_lock_acquire>
 8003660:	69a3      	ldr	r3, [r4, #24]
 8003662:	b11b      	cbz	r3, 800366c <__sinit+0x14>
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	f7ff bff0 	b.w	800364c <__sinit_lock_release>
 800366c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003670:	6523      	str	r3, [r4, #80]	; 0x50
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <__sinit+0x68>)
 8003674:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <__sinit+0x6c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	62a2      	str	r2, [r4, #40]	; 0x28
 800367a:	42a3      	cmp	r3, r4
 800367c:	bf08      	it	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	4620      	mov	r0, r4
 8003682:	bf08      	it	eq
 8003684:	61a3      	streq	r3, [r4, #24]
 8003686:	f000 f81f 	bl	80036c8 <__sfp>
 800368a:	6060      	str	r0, [r4, #4]
 800368c:	4620      	mov	r0, r4
 800368e:	f000 f81b 	bl	80036c8 <__sfp>
 8003692:	60a0      	str	r0, [r4, #8]
 8003694:	4620      	mov	r0, r4
 8003696:	f000 f817 	bl	80036c8 <__sfp>
 800369a:	2200      	movs	r2, #0
 800369c:	2104      	movs	r1, #4
 800369e:	60e0      	str	r0, [r4, #12]
 80036a0:	6860      	ldr	r0, [r4, #4]
 80036a2:	f7ff ff81 	bl	80035a8 <std>
 80036a6:	2201      	movs	r2, #1
 80036a8:	2109      	movs	r1, #9
 80036aa:	68a0      	ldr	r0, [r4, #8]
 80036ac:	f7ff ff7c 	bl	80035a8 <std>
 80036b0:	2202      	movs	r2, #2
 80036b2:	2112      	movs	r1, #18
 80036b4:	68e0      	ldr	r0, [r4, #12]
 80036b6:	f7ff ff77 	bl	80035a8 <std>
 80036ba:	2301      	movs	r3, #1
 80036bc:	61a3      	str	r3, [r4, #24]
 80036be:	e7d1      	b.n	8003664 <__sinit+0xc>
 80036c0:	08003ac4 	.word	0x08003ac4
 80036c4:	080035f1 	.word	0x080035f1

080036c8 <__sfp>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	4607      	mov	r7, r0
 80036cc:	f7ff ffac 	bl	8003628 <__sfp_lock_acquire>
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <__sfp+0x84>)
 80036d2:	681e      	ldr	r6, [r3, #0]
 80036d4:	69b3      	ldr	r3, [r6, #24]
 80036d6:	b913      	cbnz	r3, 80036de <__sfp+0x16>
 80036d8:	4630      	mov	r0, r6
 80036da:	f7ff ffbd 	bl	8003658 <__sinit>
 80036de:	3648      	adds	r6, #72	; 0x48
 80036e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	d503      	bpl.n	80036f0 <__sfp+0x28>
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	b30b      	cbz	r3, 8003730 <__sfp+0x68>
 80036ec:	6836      	ldr	r6, [r6, #0]
 80036ee:	e7f7      	b.n	80036e0 <__sfp+0x18>
 80036f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036f4:	b9d5      	cbnz	r5, 800372c <__sfp+0x64>
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <__sfp+0x88>)
 80036f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036fc:	60e3      	str	r3, [r4, #12]
 80036fe:	6665      	str	r5, [r4, #100]	; 0x64
 8003700:	f000 f847 	bl	8003792 <__retarget_lock_init_recursive>
 8003704:	f7ff ff96 	bl	8003634 <__sfp_lock_release>
 8003708:	2208      	movs	r2, #8
 800370a:	4629      	mov	r1, r5
 800370c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003714:	6025      	str	r5, [r4, #0]
 8003716:	61a5      	str	r5, [r4, #24]
 8003718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800371c:	f7ff f938 	bl	8002990 <memset>
 8003720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003728:	4620      	mov	r0, r4
 800372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372c:	3468      	adds	r4, #104	; 0x68
 800372e:	e7d9      	b.n	80036e4 <__sfp+0x1c>
 8003730:	2104      	movs	r1, #4
 8003732:	4638      	mov	r0, r7
 8003734:	f7ff ff62 	bl	80035fc <__sfmoreglue>
 8003738:	4604      	mov	r4, r0
 800373a:	6030      	str	r0, [r6, #0]
 800373c:	2800      	cmp	r0, #0
 800373e:	d1d5      	bne.n	80036ec <__sfp+0x24>
 8003740:	f7ff ff78 	bl	8003634 <__sfp_lock_release>
 8003744:	230c      	movs	r3, #12
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	e7ee      	b.n	8003728 <__sfp+0x60>
 800374a:	bf00      	nop
 800374c:	08003ac4 	.word	0x08003ac4
 8003750:	ffff0001 	.word	0xffff0001

08003754 <_fwalk_reent>:
 8003754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003758:	4606      	mov	r6, r0
 800375a:	4688      	mov	r8, r1
 800375c:	2700      	movs	r7, #0
 800375e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003766:	f1b9 0901 	subs.w	r9, r9, #1
 800376a:	d505      	bpl.n	8003778 <_fwalk_reent+0x24>
 800376c:	6824      	ldr	r4, [r4, #0]
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f7      	bne.n	8003762 <_fwalk_reent+0xe>
 8003772:	4638      	mov	r0, r7
 8003774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003778:	89ab      	ldrh	r3, [r5, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d907      	bls.n	800378e <_fwalk_reent+0x3a>
 800377e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003782:	3301      	adds	r3, #1
 8003784:	d003      	beq.n	800378e <_fwalk_reent+0x3a>
 8003786:	4629      	mov	r1, r5
 8003788:	4630      	mov	r0, r6
 800378a:	47c0      	blx	r8
 800378c:	4307      	orrs	r7, r0
 800378e:	3568      	adds	r5, #104	; 0x68
 8003790:	e7e9      	b.n	8003766 <_fwalk_reent+0x12>

08003792 <__retarget_lock_init_recursive>:
 8003792:	4770      	bx	lr

08003794 <__retarget_lock_acquire_recursive>:
 8003794:	4770      	bx	lr

08003796 <__retarget_lock_release_recursive>:
 8003796:	4770      	bx	lr

08003798 <__swhatbuf_r>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	460e      	mov	r6, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	4614      	mov	r4, r2
 80037a2:	2900      	cmp	r1, #0
 80037a4:	461d      	mov	r5, r3
 80037a6:	b096      	sub	sp, #88	; 0x58
 80037a8:	da08      	bge.n	80037bc <__swhatbuf_r+0x24>
 80037aa:	2200      	movs	r2, #0
 80037ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80037b0:	602a      	str	r2, [r5, #0]
 80037b2:	061a      	lsls	r2, r3, #24
 80037b4:	d410      	bmi.n	80037d8 <__swhatbuf_r+0x40>
 80037b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ba:	e00e      	b.n	80037da <__swhatbuf_r+0x42>
 80037bc:	466a      	mov	r2, sp
 80037be:	f000 f915 	bl	80039ec <_fstat_r>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	dbf1      	blt.n	80037aa <__swhatbuf_r+0x12>
 80037c6:	9a01      	ldr	r2, [sp, #4]
 80037c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037d0:	425a      	negs	r2, r3
 80037d2:	415a      	adcs	r2, r3
 80037d4:	602a      	str	r2, [r5, #0]
 80037d6:	e7ee      	b.n	80037b6 <__swhatbuf_r+0x1e>
 80037d8:	2340      	movs	r3, #64	; 0x40
 80037da:	2000      	movs	r0, #0
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	b016      	add	sp, #88	; 0x58
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080037e4 <__smakebuf_r>:
 80037e4:	898b      	ldrh	r3, [r1, #12]
 80037e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037e8:	079d      	lsls	r5, r3, #30
 80037ea:	4606      	mov	r6, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	d507      	bpl.n	8003800 <__smakebuf_r+0x1c>
 80037f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	2301      	movs	r3, #1
 80037fa:	6163      	str	r3, [r4, #20]
 80037fc:	b002      	add	sp, #8
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	466a      	mov	r2, sp
 8003802:	ab01      	add	r3, sp, #4
 8003804:	f7ff ffc8 	bl	8003798 <__swhatbuf_r>
 8003808:	9900      	ldr	r1, [sp, #0]
 800380a:	4605      	mov	r5, r0
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff f9d3 	bl	8002bb8 <_malloc_r>
 8003812:	b948      	cbnz	r0, 8003828 <__smakebuf_r+0x44>
 8003814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003818:	059a      	lsls	r2, r3, #22
 800381a:	d4ef      	bmi.n	80037fc <__smakebuf_r+0x18>
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	e7e3      	b.n	80037f0 <__smakebuf_r+0xc>
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <__smakebuf_r+0x7c>)
 800382a:	62b3      	str	r3, [r6, #40]	; 0x28
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	6020      	str	r0, [r4, #0]
 8003830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003834:	81a3      	strh	r3, [r4, #12]
 8003836:	9b00      	ldr	r3, [sp, #0]
 8003838:	6120      	str	r0, [r4, #16]
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	9b01      	ldr	r3, [sp, #4]
 800383e:	b15b      	cbz	r3, 8003858 <__smakebuf_r+0x74>
 8003840:	4630      	mov	r0, r6
 8003842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003846:	f000 f8e3 	bl	8003a10 <_isatty_r>
 800384a:	b128      	cbz	r0, 8003858 <__smakebuf_r+0x74>
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	89a0      	ldrh	r0, [r4, #12]
 800385a:	4305      	orrs	r5, r0
 800385c:	81a5      	strh	r5, [r4, #12]
 800385e:	e7cd      	b.n	80037fc <__smakebuf_r+0x18>
 8003860:	080035f1 	.word	0x080035f1

08003864 <memchr>:
 8003864:	4603      	mov	r3, r0
 8003866:	b510      	push	{r4, lr}
 8003868:	b2c9      	uxtb	r1, r1
 800386a:	4402      	add	r2, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	d101      	bne.n	8003876 <memchr+0x12>
 8003872:	2000      	movs	r0, #0
 8003874:	e003      	b.n	800387e <memchr+0x1a>
 8003876:	7804      	ldrb	r4, [r0, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	428c      	cmp	r4, r1
 800387c:	d1f6      	bne.n	800386c <memchr+0x8>
 800387e:	bd10      	pop	{r4, pc}

08003880 <__malloc_lock>:
 8003880:	4801      	ldr	r0, [pc, #4]	; (8003888 <__malloc_lock+0x8>)
 8003882:	f7ff bf87 	b.w	8003794 <__retarget_lock_acquire_recursive>
 8003886:	bf00      	nop
 8003888:	20000544 	.word	0x20000544

0800388c <__malloc_unlock>:
 800388c:	4801      	ldr	r0, [pc, #4]	; (8003894 <__malloc_unlock+0x8>)
 800388e:	f7ff bf82 	b.w	8003796 <__retarget_lock_release_recursive>
 8003892:	bf00      	nop
 8003894:	20000544 	.word	0x20000544

08003898 <_raise_r>:
 8003898:	291f      	cmp	r1, #31
 800389a:	b538      	push	{r3, r4, r5, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	460d      	mov	r5, r1
 80038a0:	d904      	bls.n	80038ac <_raise_r+0x14>
 80038a2:	2316      	movs	r3, #22
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80038ae:	b112      	cbz	r2, 80038b6 <_raise_r+0x1e>
 80038b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80038b4:	b94b      	cbnz	r3, 80038ca <_raise_r+0x32>
 80038b6:	4620      	mov	r0, r4
 80038b8:	f000 f830 	bl	800391c <_getpid_r>
 80038bc:	462a      	mov	r2, r5
 80038be:	4601      	mov	r1, r0
 80038c0:	4620      	mov	r0, r4
 80038c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038c6:	f000 b817 	b.w	80038f8 <_kill_r>
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d00a      	beq.n	80038e4 <_raise_r+0x4c>
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	d103      	bne.n	80038da <_raise_r+0x42>
 80038d2:	2316      	movs	r3, #22
 80038d4:	6003      	str	r3, [r0, #0]
 80038d6:	2001      	movs	r0, #1
 80038d8:	e7e7      	b.n	80038aa <_raise_r+0x12>
 80038da:	2400      	movs	r4, #0
 80038dc:	4628      	mov	r0, r5
 80038de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80038e2:	4798      	blx	r3
 80038e4:	2000      	movs	r0, #0
 80038e6:	e7e0      	b.n	80038aa <_raise_r+0x12>

080038e8 <raise>:
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <raise+0xc>)
 80038ea:	4601      	mov	r1, r0
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	f7ff bfd3 	b.w	8003898 <_raise_r>
 80038f2:	bf00      	nop
 80038f4:	2000000c 	.word	0x2000000c

080038f8 <_kill_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	2300      	movs	r3, #0
 80038fc:	4d06      	ldr	r5, [pc, #24]	; (8003918 <_kill_r+0x20>)
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	602b      	str	r3, [r5, #0]
 8003906:	f7fd f97d 	bl	8000c04 <_kill>
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	d102      	bne.n	8003914 <_kill_r+0x1c>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	b103      	cbz	r3, 8003914 <_kill_r+0x1c>
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	20000548 	.word	0x20000548

0800391c <_getpid_r>:
 800391c:	f7fd b96b 	b.w	8000bf6 <_getpid>

08003920 <__sread>:
 8003920:	b510      	push	{r4, lr}
 8003922:	460c      	mov	r4, r1
 8003924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003928:	f000 f894 	bl	8003a54 <_read_r>
 800392c:	2800      	cmp	r0, #0
 800392e:	bfab      	itete	ge
 8003930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003932:	89a3      	ldrhlt	r3, [r4, #12]
 8003934:	181b      	addge	r3, r3, r0
 8003936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800393a:	bfac      	ite	ge
 800393c:	6563      	strge	r3, [r4, #84]	; 0x54
 800393e:	81a3      	strhlt	r3, [r4, #12]
 8003940:	bd10      	pop	{r4, pc}

08003942 <__swrite>:
 8003942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003946:	461f      	mov	r7, r3
 8003948:	898b      	ldrh	r3, [r1, #12]
 800394a:	4605      	mov	r5, r0
 800394c:	05db      	lsls	r3, r3, #23
 800394e:	460c      	mov	r4, r1
 8003950:	4616      	mov	r6, r2
 8003952:	d505      	bpl.n	8003960 <__swrite+0x1e>
 8003954:	2302      	movs	r3, #2
 8003956:	2200      	movs	r2, #0
 8003958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395c:	f000 f868 	bl	8003a30 <_lseek_r>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	4632      	mov	r2, r6
 8003964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	4628      	mov	r0, r5
 800396c:	463b      	mov	r3, r7
 800396e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003976:	f000 b817 	b.w	80039a8 <_write_r>

0800397a <__sseek>:
 800397a:	b510      	push	{r4, lr}
 800397c:	460c      	mov	r4, r1
 800397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003982:	f000 f855 	bl	8003a30 <_lseek_r>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	bf15      	itete	ne
 800398c:	6560      	strne	r0, [r4, #84]	; 0x54
 800398e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003996:	81a3      	strheq	r3, [r4, #12]
 8003998:	bf18      	it	ne
 800399a:	81a3      	strhne	r3, [r4, #12]
 800399c:	bd10      	pop	{r4, pc}

0800399e <__sclose>:
 800399e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a2:	f000 b813 	b.w	80039cc <_close_r>
	...

080039a8 <_write_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	2200      	movs	r2, #0
 80039b2:	4d05      	ldr	r5, [pc, #20]	; (80039c8 <_write_r+0x20>)
 80039b4:	602a      	str	r2, [r5, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7fd f95b 	bl	8000c72 <_write>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d102      	bne.n	80039c6 <_write_r+0x1e>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	b103      	cbz	r3, 80039c6 <_write_r+0x1e>
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	20000548 	.word	0x20000548

080039cc <_close_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	2300      	movs	r3, #0
 80039d0:	4d05      	ldr	r5, [pc, #20]	; (80039e8 <_close_r+0x1c>)
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	f7fd f967 	bl	8000caa <_close>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_close_r+0x1a>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_close_r+0x1a>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	20000548 	.word	0x20000548

080039ec <_fstat_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	2300      	movs	r3, #0
 80039f0:	4d06      	ldr	r5, [pc, #24]	; (8003a0c <_fstat_r+0x20>)
 80039f2:	4604      	mov	r4, r0
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	f7fd f961 	bl	8000cc0 <_fstat>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d102      	bne.n	8003a08 <_fstat_r+0x1c>
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	b103      	cbz	r3, 8003a08 <_fstat_r+0x1c>
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	bd38      	pop	{r3, r4, r5, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000548 	.word	0x20000548

08003a10 <_isatty_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	2300      	movs	r3, #0
 8003a14:	4d05      	ldr	r5, [pc, #20]	; (8003a2c <_isatty_r+0x1c>)
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	f7fd f95f 	bl	8000cde <_isatty>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_isatty_r+0x1a>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_isatty_r+0x1a>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	20000548 	.word	0x20000548

08003a30 <_lseek_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4d05      	ldr	r5, [pc, #20]	; (8003a50 <_lseek_r+0x20>)
 8003a3c:	602a      	str	r2, [r5, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7fd f957 	bl	8000cf2 <_lseek>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_lseek_r+0x1e>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_lseek_r+0x1e>
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20000548 	.word	0x20000548

08003a54 <_read_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4604      	mov	r4, r0
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4d05      	ldr	r5, [pc, #20]	; (8003a74 <_read_r+0x20>)
 8003a60:	602a      	str	r2, [r5, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f7fd f8e8 	bl	8000c38 <_read>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_read_r+0x1e>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_read_r+0x1e>
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	20000548 	.word	0x20000548

08003a78 <_init>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr

08003a84 <_fini>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr
