
game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b10  08004b10  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b10  08004b10  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000078  08004b90  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08004b90  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be21  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f11  00000000  00000000  0002bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001900d  00000000  00000000  0002ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e796  00000000  00000000  00047a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087b5f  00000000  00000000  000561ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ddd0a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b58  00000000  00000000  000ddd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003adc  00000000  00000000  000de8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080041f8 	.word	0x080041f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080041f8 	.word	0x080041f8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f9ce 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f854 	bl	8000208 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000164:	f000 fb86 	bl	8000874 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8000168:	f000 fec2 	bl	8000ef0 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800016c:	f000 feca 	bl	8000f04 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fb6f 	bl	8000854 <ssd1306_SetColor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pong_game();
 8000176:	f000 fb39 	bl	80007ec <pong_game>
 800017a:	e7fc      	b.n	8000176 <main+0x2a>

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 ffc0 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 fa8b 	bl	80026e0 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d0:	f000 f8e6 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fcf8 	bl	8002be4 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fa:	f000 f8d1 	bl	80003a0 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <MX_I2C1_Init+0x50>)
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <MX_I2C1_Init+0x54>)
 8000210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000212:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_I2C1_Init+0x50>)
 8000214:	4a12      	ldr	r2, [pc, #72]	; (8000260 <MX_I2C1_Init+0x58>)
 8000216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_I2C1_Init+0x50>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_I2C1_Init+0x50>)
 8000220:	2200      	movs	r2, #0
 8000222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_I2C1_Init+0x50>)
 8000226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800022a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_I2C1_Init+0x50>)
 8000246:	f001 fc71 	bl	8001b2c <HAL_I2C_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000250:	f000 f8a6 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000094 	.word	0x20000094
 800025c:	40005400 	.word	0x40005400
 8000260:	00061a80 	.word	0x00061a80

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f002 fe30 	bl	8002f00 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f87b 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000e8 	.word	0x200000e8
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a29      	ldr	r2, [pc, #164]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_GPIO_Init+0xd8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <MX_GPIO_Init+0xd8>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <MX_GPIO_Init+0xd8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <MX_GPIO_Init+0xd8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <MX_GPIO_Init+0xd8>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_GPIO_Init+0xd8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4818      	ldr	r0, [pc, #96]	; (8000394 <MX_GPIO_Init+0xdc>)
 8000334:	f001 fbe1 	bl	8001afa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <MX_GPIO_Init+0xdc>)
 8000352:	f001 fa37 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000356:	2380      	movs	r3, #128	; 0x80
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	480b      	ldr	r0, [pc, #44]	; (8000398 <MX_GPIO_Init+0xe0>)
 800036a:	f001 fa2b 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800036e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000378:	2301      	movs	r3, #1
 800037a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <MX_GPIO_Init+0xe4>)
 8000384:	f001 fa1e 	bl	80017c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
}
 80003a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <Error_Handler+0x8>

080003aa <is_circle_at_bottom_boundary>:

#include <stdbool.h>
#include "pong_game.h"


static inline bool is_circle_at_bottom_boundary(const Circle *const p_circle) {
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
    return p_circle->y + SSD1306_BALL_RADIUS >= SSD1306_HEIGHT;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80003b8:	2b35      	cmp	r3, #53	; 0x35
 80003ba:	bfcc      	ite	gt
 80003bc:	2301      	movgt	r3, #1
 80003be:	2300      	movle	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <is_circle_at_top_boundary>:

static inline bool is_circle_at_top_boundary(const Circle *const p_circle) {
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    return p_circle->y - SSD1306_BALL_RADIUS <= 0;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80003da:	2b0a      	cmp	r3, #10
 80003dc:	bfd4      	ite	le
 80003de:	2301      	movle	r3, #1
 80003e0:	2300      	movgt	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <is_circle_at_vertical_boundary>:

static inline bool is_circle_at_vertical_boundary(const Circle *const p_circle) {
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
    return is_circle_at_bottom_boundary(p_circle) || is_circle_at_top_boundary(p_circle);
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ffd7 	bl	80003aa <is_circle_at_bottom_boundary>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d105      	bne.n	800040e <is_circle_at_vertical_boundary+0x20>
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f7ff ffe2 	bl	80003cc <is_circle_at_top_boundary>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <is_circle_at_vertical_boundary+0x24>
 800040e:	2301      	movs	r3, #1
 8000410:	e000      	b.n	8000414 <is_circle_at_vertical_boundary+0x26>
 8000412:	2300      	movs	r3, #0
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <is_circle_at_left_boundary>:

static inline bool is_circle_at_left_boundary(const Circle *const p_circle) {
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
    return p_circle->x <= SSD1306_BALL_RADIUS;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000430:	2b0a      	cmp	r3, #10
 8000432:	bfd4      	ite	le
 8000434:	2301      	movle	r3, #1
 8000436:	2300      	movgt	r3, #0
 8000438:	b2db      	uxtb	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <is_circle_at_right_boundary>:

static inline bool is_circle_at_right_boundary(const Circle *const p_circle) {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    return p_circle->x >= SSD1306_WIDTH - SSD1306_BALL_RADIUS;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000452:	2b75      	cmp	r3, #117	; 0x75
 8000454:	bfcc      	ite	gt
 8000456:	2301      	movgt	r3, #1
 8000458:	2300      	movle	r3, #0
 800045a:	b2db      	uxtb	r3, r3
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <is_circle_at_horizontal_boundary>:

static inline bool is_circle_at_horizontal_boundary(const Circle *const p_circle) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
    return is_circle_at_left_boundary(p_circle) || is_circle_at_right_boundary(p_circle);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ffd7 	bl	8000422 <is_circle_at_left_boundary>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d105      	bne.n	8000486 <is_circle_at_horizontal_boundary+0x20>
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff ffe2 	bl	8000444 <is_circle_at_right_boundary>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <is_circle_at_horizontal_boundary+0x24>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <is_circle_at_horizontal_boundary+0x26>
 800048a:	2300      	movs	r3, #0
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <is_move_right_pressed>:

static inline bool is_move_right_pressed(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_SET;
 80004a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <is_move_right_pressed+0x20>)
 80004a6:	f001 fb11 	bl	8001acc <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	bf0c      	ite	eq
 80004b0:	2301      	moveq	r3, #1
 80004b2:	2300      	movne	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <is_move_left_pressed>:

static inline bool is_move_left_pressed(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET;
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <is_move_left_pressed+0x1c>)
 80004c8:	f001 fb00 	bl	8001acc <HAL_GPIO_ReadPin>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	bf0c      	ite	eq
 80004d2:	2301      	moveq	r3, #1
 80004d4:	2300      	movne	r3, #0
 80004d6:	b2db      	uxtb	r3, r3
}
 80004d8:	4618      	mov	r0, r3
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010800 	.word	0x40010800

080004e0 <is_ball_right_of_paddle_left>:

static inline bool is_ball_right_of_paddle_left(const Circle *const p_circle, const Paddle *const p_paddle) {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
    return p_circle->x + SSD1306_BALL_RADIUS >= p_paddle->x;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004f0:	330a      	adds	r3, #10
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	bfac      	ite	ge
 80004fc:	2301      	movge	r3, #1
 80004fe:	2300      	movlt	r3, #0
 8000500:	b2db      	uxtb	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <is_ball_left_of_paddle_right>:

static inline bool is_ball_left_of_paddle_right(const Circle *const p_circle, const Paddle *const p_paddle) {
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
    return p_circle->x - SSD1306_BALL_RADIUS <= p_paddle->x + SSD1306_PADDLE_LENGTH;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800051c:	f1a3 020a 	sub.w	r2, r3, #10
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000526:	3314      	adds	r3, #20
 8000528:	429a      	cmp	r2, r3
 800052a:	bfd4      	ite	le
 800052c:	2301      	movle	r3, #1
 800052e:	2300      	movgt	r3, #0
 8000530:	b2db      	uxtb	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <is_ball_in_paddle_x_range>:

static inline bool is_ball_in_paddle_x_range(const Circle *const p_circle, const Paddle *const p_paddle) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    return is_ball_right_of_paddle_left(p_circle, p_paddle) && is_ball_left_of_paddle_right(p_circle, p_paddle);
 8000546:	6839      	ldr	r1, [r7, #0]
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ffc9 	bl	80004e0 <is_ball_right_of_paddle_left>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d008      	beq.n	8000566 <is_ball_in_paddle_x_range+0x2a>
 8000554:	6839      	ldr	r1, [r7, #0]
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ffd8 	bl	800050c <is_ball_left_of_paddle_right>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <is_ball_in_paddle_x_range+0x2a>
 8000562:	2301      	movs	r3, #1
 8000564:	e000      	b.n	8000568 <is_ball_in_paddle_x_range+0x2c>
 8000566:	2300      	movs	r3, #0
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <is_ball_at_paddle_y_level>:

static inline bool is_ball_at_paddle_y_level(const Circle *const p_circle) {
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
    return p_circle->y + SSD1306_BALL_RADIUS >= SSD1306_PADDLE_Y;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000584:	2b31      	cmp	r3, #49	; 0x31
 8000586:	bfcc      	ite	gt
 8000588:	2301      	movgt	r3, #1
 800058a:	2300      	movle	r3, #0
 800058c:	b2db      	uxtb	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <is_paddle_hit>:

static inline bool is_paddle_hit(const Circle *const p_circle, const Paddle *const p_paddle) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    return is_ball_in_paddle_x_range(p_circle, p_paddle) && is_ball_at_paddle_y_level(p_circle);
 80005a2:	6839      	ldr	r1, [r7, #0]
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffc9 	bl	800053c <is_ball_in_paddle_x_range>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d007      	beq.n	80005c0 <is_paddle_hit+0x28>
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffe0 	bl	8000576 <is_ball_at_paddle_y_level>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <is_paddle_hit+0x28>
 80005bc:	2301      	movs	r3, #1
 80005be:	e000      	b.n	80005c2 <is_paddle_hit+0x2a>
 80005c0:	2300      	movs	r3, #0
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <update_vertical_movement_on_wall_hit>:

static inline void update_vertical_movement_on_wall_hit(Circle *const p_circle) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    if (is_circle_at_vertical_boundary(p_circle)) {
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff08 	bl	80003ee <is_circle_at_vertical_boundary>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <update_vertical_movement_on_wall_hit+0x1a>
        update_vertical_movement(p_circle);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 fd72 	bl	80010ce <update_vertical_movement>
    }
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <update_horizontal_movement_on_wall_hit>:

static inline void update_horizontal_movement_on_wall_hit(Circle *const p_circle) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    if (is_circle_at_horizontal_boundary(p_circle)) {
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff33 	bl	8000466 <is_circle_at_horizontal_boundary>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <update_horizontal_movement_on_wall_hit+0x1a>
        update_horizontal_movement(p_circle);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fd73 	bl	80010f2 <update_horizontal_movement>
    }
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <update_circle_movement_on_wall_hit>:

static inline void update_circle_movement_on_wall_hit(Circle *const p_circle) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    update_vertical_movement_on_wall_hit(p_circle);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffd7 	bl	80005d0 <update_vertical_movement_on_wall_hit>
    update_horizontal_movement_on_wall_hit(p_circle);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffe5 	bl	80005f2 <update_horizontal_movement_on_wall_hit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <update_circle_movement_on_paddle_hit>:

static inline void update_circle_movement_on_paddle_hit(Circle *const p_circle) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    update_vertical_movement(p_circle);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fd48 	bl	80010ce <update_vertical_movement>
    update_horizontal_movement(p_circle);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fd57 	bl	80010f2 <update_horizontal_movement>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <update_paddle_right>:

static inline void update_paddle_right(Paddle *const p_paddle) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (is_move_right_pressed()) {
 8000654:	f7ff ff22 	bl	800049c <is_move_right_pressed>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <update_paddle_right+0x24>
        ++p_paddle->x;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000664:	b29b      	uxth	r3, r3
 8000666:	3301      	adds	r3, #1
 8000668:	b29b      	uxth	r3, r3
 800066a:	b21a      	sxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	801a      	strh	r2, [r3, #0]
    }
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <update_paddle_left>:

static inline void update_paddle_left(Paddle *const p_paddle) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    if (is_move_left_pressed()) {
 8000680:	f7ff ff1e 	bl	80004c0 <is_move_left_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <update_paddle_left+0x24>
        --p_paddle->x;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000690:	b29b      	uxth	r3, r3
 8000692:	3b01      	subs	r3, #1
 8000694:	b29b      	uxth	r3, r3
 8000696:	b21a      	sxth	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	801a      	strh	r2, [r3, #0]
    }
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <move_paddle_by_input>:

static inline void move_paddle_by_input(Paddle *const p_paddle) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    update_paddle_right(p_paddle);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffcd 	bl	800064c <update_paddle_right>
    update_paddle_left(p_paddle);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ffe0 	bl	8000678 <update_paddle_left>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <show_game_over_screen>:

static inline void show_game_over_screen(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    ssd1306_Clear();
 80006c6:	f000 fc1d 	bl	8000f04 <ssd1306_Clear>
    ssd1306_SetCursor(0, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 fbf7 	bl	8000ec0 <ssd1306_SetCursor>
    FontDef font = Font_7x10;
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <show_game_over_screen+0x38>)
 80006d4:	463b      	mov	r3, r7
 80006d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006da:	e883 0003 	stmia.w	r3, {r0, r1}
    ssd1306_WriteString("THE GAME IS OVER!", font);
 80006de:	463b      	mov	r3, r7
 80006e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <show_game_over_screen+0x3c>)
 80006e6:	f000 fbc5 	bl	8000e74 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80006ea:	f000 f95d 	bl	80009a8 <ssd1306_UpdateScreen>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08004210 	.word	0x08004210

08000700 <pong_game_init>:

void pong_game_init(PongGameState *const pong_game_state) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
    pong_game_state->circle = init_circle();
 8000708:	68fc      	ldr	r4, [r7, #12]
 800070a:	463b      	mov	r3, r7
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fcfd 	bl	800110c <init_circle>
 8000712:	4622      	mov	r2, r4
 8000714:	463b      	mov	r3, r7
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	6011      	str	r1, [r2, #0]
 800071a:	889b      	ldrh	r3, [r3, #4]
 800071c:	8093      	strh	r3, [r2, #4]
    pong_game_state->paddle = init_paddle();
 800071e:	68fc      	ldr	r4, [r7, #12]
 8000720:	f000 fd10 	bl	8001144 <init_paddle>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	80e2      	strh	r2, [r4, #6]
 800072a:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800072e:	8123      	strh	r3, [r4, #8]
    pong_game_state->is_game_over = false;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	729a      	strb	r2, [r3, #10]
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <pong_game_update>:

void pong_game_update(PongGameState *const pong_game_state) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    if (is_circle_at_bottom_boundary(&pong_game_state->circle)) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe2e 	bl	80003aa <is_circle_at_bottom_boundary>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <pong_game_update+0x1e>
        pong_game_state->is_game_over = true;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2201      	movs	r2, #1
 8000758:	729a      	strb	r2, [r3, #10]
        return;
 800075a:	e01a      	b.n	8000792 <pong_game_update+0x54>
    }

    move_paddle_by_input(&pong_game_state->paddle);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3306      	adds	r3, #6
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff9f 	bl	80006a4 <move_paddle_by_input>
    update_circle_movement_on_wall_hit(&pong_game_state->circle);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff53 	bl	8000614 <update_circle_movement_on_wall_hit>
    update_circle_position(&pong_game_state->circle);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fc9e 	bl	80010b2 <update_circle_position>

    if (is_paddle_hit(&pong_game_state->circle, &pong_game_state->paddle)) {
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3306      	adds	r3, #6
 800077c:	4619      	mov	r1, r3
 800077e:	4610      	mov	r0, r2
 8000780:	f7ff ff0a 	bl	8000598 <is_paddle_hit>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <pong_game_update+0x54>
        update_circle_movement_on_paddle_hit(&pong_game_state->circle);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff4f 	bl	8000630 <update_circle_movement_on_paddle_hit>
    }
}
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <pong_game_render>:

void pong_game_render(const PongGameState *const pong_game_state) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    ssd1306_Clear();
 80007a0:	f000 fbb0 	bl	8000f04 <ssd1306_Clear>
    ssd1306_FillCircle(pong_game_state->circle.x, pong_game_state->circle.y, SSD1306_BALL_RADIUS);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007b0:	220a      	movs	r2, #10
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 fa36 	bl	8000c24 <ssd1306_FillCircle>
    ssd1306_DrawHorizontalLine(pong_game_state->paddle.x, pong_game_state->paddle.y, SSD1306_PADDLE_LENGTH);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007c4:	2214      	movs	r2, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	f000 f98e 	bl	8000ae8 <ssd1306_DrawHorizontalLine>
    ssd1306_UpdateScreen();
 80007cc:	f000 f8ec 	bl	80009a8 <ssd1306_UpdateScreen>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <pong_game_handle_game_over>:

void pong_game_handle_game_over(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    show_game_over_screen();
 80007dc:	f7ff ff70 	bl	80006c0 <show_game_over_screen>
    HAL_Delay(5000);
 80007e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007e4:	f000 fee6 	bl	80015b4 <HAL_Delay>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <pong_game>:

void pong_game(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
    PongGameState pong_game_state;
    PongGameState *const p_pong_game_state = &pong_game_state;
 80007f2:	463b      	mov	r3, r7
 80007f4:	60fb      	str	r3, [r7, #12]

    pong_game_init(p_pong_game_state);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff ff82 	bl	8000700 <pong_game_init>

    while(true) {
        pong_game_update(p_pong_game_state);
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff9e 	bl	800073e <pong_game_update>

        if (pong_game_state.is_game_over) {
 8000802:	7abb      	ldrb	r3, [r7, #10]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <pong_game+0x22>
            pong_game_handle_game_over();
 8000808:	f7ff ffe6 	bl	80007d8 <pong_game_handle_game_over>
            return;
 800080c:	e003      	b.n	8000816 <pong_game+0x2a>
        }

        pong_game_render(p_pong_game_state);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff ffc2 	bl	8000798 <pong_game_render>
        pong_game_update(p_pong_game_state);
 8000814:	e7f2      	b.n	80007fc <pong_game+0x10>
    }
}
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 800083c:	2380      	movs	r3, #128	; 0x80
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 800084a:	2340      	movs	r3, #64	; 0x40
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <ssd1306_SetColor+0x1c>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	7153      	strb	r3, [r2, #5]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000130 	.word	0x20000130

08000874 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	2205      	movs	r2, #5
 800087e:	2178      	movs	r1, #120	; 0x78
 8000880:	4846      	ldr	r0, [pc, #280]	; (800099c <ssd1306_Init+0x128>)
 8000882:	f001 fb91 	bl	8001fa8 <HAL_I2C_IsDeviceReady>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d004      	beq.n	8000896 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 800088c:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <ssd1306_Init+0x12c>)
 800088e:	2200      	movs	r2, #0
 8000890:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8000892:	2300      	movs	r3, #0
 8000894:	e07f      	b.n	8000996 <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f000 fe8c 	bl	80015b4 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 800089c:	20ae      	movs	r0, #174	; 0xae
 800089e:	f000 fb3d 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80008a2:	20d5      	movs	r0, #213	; 0xd5
 80008a4:	f000 fb3a 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80008a8:	20f0      	movs	r0, #240	; 0xf0
 80008aa:	f000 fb37 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 80008ae:	20a8      	movs	r0, #168	; 0xa8
 80008b0:	f000 fb34 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 80008b4:	f7ff ffb9 	bl	800082a <height>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fb2b 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80008c6:	20d3      	movs	r0, #211	; 0xd3
 80008c8:	f000 fb28 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fb25 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 80008d2:	2040      	movs	r0, #64	; 0x40
 80008d4:	f000 fb22 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 80008d8:	208d      	movs	r0, #141	; 0x8d
 80008da:	f000 fb1f 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80008de:	2014      	movs	r0, #20
 80008e0:	f000 fb1c 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 80008e4:	2020      	movs	r0, #32
 80008e6:	f000 fb19 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fb16 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 80008f0:	20a0      	movs	r0, #160	; 0xa0
 80008f2:	f000 fb13 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 80008f6:	20c0      	movs	r0, #192	; 0xc0
 80008f8:	f000 fb10 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80008fc:	20da      	movs	r0, #218	; 0xda
 80008fe:	f000 fb0d 	bl	8000f1c <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <ssd1306_Init+0x130>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 800090a:	2012      	movs	r0, #18
 800090c:	f000 fb06 	bl	8000f1c <ssd1306_WriteCommand>
 8000910:	e006      	b.n	8000920 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <ssd1306_Init+0x130>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d102      	bne.n	8000920 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 800091a:	2002      	movs	r0, #2
 800091c:	f000 fafe 	bl	8000f1c <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 8000920:	2081      	movs	r0, #129	; 0x81
 8000922:	f000 fafb 	bl	8000f1c <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <ssd1306_Init+0x130>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d103      	bne.n	8000936 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 800092e:	20cf      	movs	r0, #207	; 0xcf
 8000930:	f000 faf4 	bl	8000f1c <ssd1306_WriteCommand>
 8000934:	e006      	b.n	8000944 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <ssd1306_Init+0x130>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d102      	bne.n	8000944 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 800093e:	208f      	movs	r0, #143	; 0x8f
 8000940:	f000 faec 	bl	8000f1c <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8000944:	20d9      	movs	r0, #217	; 0xd9
 8000946:	f000 fae9 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800094a:	20f1      	movs	r0, #241	; 0xf1
 800094c:	f000 fae6 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8000950:	20db      	movs	r0, #219	; 0xdb
 8000952:	f000 fae3 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8000956:	2040      	movs	r0, #64	; 0x40
 8000958:	f000 fae0 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800095c:	20a4      	movs	r0, #164	; 0xa4
 800095e:	f000 fadd 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8000962:	20a6      	movs	r0, #166	; 0xa6
 8000964:	f000 fada 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8000968:	202e      	movs	r0, #46	; 0x2e
 800096a:	f000 fad7 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800096e:	20af      	movs	r0, #175	; 0xaf
 8000970:	f000 fad4 	bl	8000f1c <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <ssd1306_Init+0x12c>)
 8000976:	2200      	movs	r2, #0
 8000978:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <ssd1306_Init+0x12c>)
 800097c:	2200      	movs	r2, #0
 800097e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <ssd1306_Init+0x12c>)
 8000982:	2200      	movs	r2, #0
 8000984:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 8000986:	f000 fabd 	bl	8000f04 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800098a:	f000 f80d 	bl	80009a8 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <ssd1306_Init+0x12c>)
 8000990:	2201      	movs	r2, #1
 8000992:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000094 	.word	0x20000094
 80009a0:	20000130 	.word	0x20000130
 80009a4:	20000538 	.word	0x20000538

080009a8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e019      	b.n	80009e8 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3b50      	subs	r3, #80	; 0x50
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 faae 	bl	8000f1c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 faab 	bl	8000f1c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80009c6:	2010      	movs	r0, #16
 80009c8:	f000 faa8 	bl	8000f1c <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	01db      	lsls	r3, r3, #7
 80009d0:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <ssd1306_UpdateScreen+0x50>)
 80009d2:	189c      	adds	r4, r3, r2
 80009d4:	f7ff ff22 	bl	800081c <width>
 80009d8:	4603      	mov	r3, r0
 80009da:	4619      	mov	r1, r3
 80009dc:	4620      	mov	r0, r4
 80009de:	f000 fab5 	bl	8000f4c <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3301      	adds	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	d9e2      	bls.n	80009b4 <ssd1306_UpdateScreen+0xc>
	}
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	20000138 	.word	0x20000138

080009fc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <ssd1306_DrawPixel+0xe4>)
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	b29c      	uxth	r4, r3
 8000a16:	f7ff ff0f 	bl	8000838 <ssd1306_GetWidth>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	d25a      	bcs.n	8000ad6 <ssd1306_DrawPixel+0xda>
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	b29c      	uxth	r4, r3
 8000a24:	f7ff ff0f 	bl	8000846 <ssd1306_GetHeight>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d253      	bcs.n	8000ad6 <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <ssd1306_DrawPixel+0xe4>)
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf0c      	ite	eq
 8000a3c:	2301      	moveq	r3, #1
 8000a3e:	2300      	movne	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d121      	bne.n	8000a8e <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8000a4a:	79fc      	ldrb	r4, [r7, #7]
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	b2dd      	uxtb	r5, r3
 8000a52:	462e      	mov	r6, r5
 8000a54:	f7ff fee2 	bl	800081c <width>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	fb06 f303 	mul.w	r3, r6, r3
 8000a62:	4423      	add	r3, r4
 8000a64:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <ssd1306_DrawPixel+0xe8>)
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	b25a      	sxtb	r2, r3
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	2101      	movs	r1, #1
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b259      	sxtb	r1, r3
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	462b      	mov	r3, r5
 8000a80:	fb00 f303 	mul.w	r3, r0, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	b2c9      	uxtb	r1, r1
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <ssd1306_DrawPixel+0xe8>)
 8000a8a:	54d1      	strb	r1, [r2, r3]
 8000a8c:	e024      	b.n	8000ad8 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8000a8e:	79fc      	ldrb	r4, [r7, #7]
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	b2dd      	uxtb	r5, r3
 8000a96:	462e      	mov	r6, r5
 8000a98:	f7ff fec0 	bl	800081c <width>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	fb06 f303 	mul.w	r3, r6, r3
 8000aa6:	4423      	add	r3, r4
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <ssd1306_DrawPixel+0xe8>)
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	b25a      	sxtb	r2, r3
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	b259      	sxtb	r1, r3
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	462b      	mov	r3, r5
 8000ac8:	fb00 f303 	mul.w	r3, r0, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	b2c9      	uxtb	r1, r1
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <ssd1306_DrawPixel+0xe8>)
 8000ad2:	54d1      	strb	r1, [r2, r3]
 8000ad4:	e000      	b.n	8000ad8 <ssd1306_DrawPixel+0xdc>
		return;
 8000ad6:	bf00      	nop
	}
}
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000130 	.word	0x20000130
 8000ae4:	20000138 	.word	0x20000138

08000ae8 <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	460b      	mov	r3, r1
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	4613      	mov	r3, r2
 8000af8:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 8000afa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f2c0 8086 	blt.w	8000c10 <ssd1306_DrawHorizontalLine+0x128>
 8000b04:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000b08:	f7ff fe8f 	bl	800082a <height>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	da7e      	bge.n	8000c10 <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 8000b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da06      	bge.n	8000b28 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 8000b1a:	887a      	ldrh	r2, [r7, #2]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	4413      	add	r3, r2
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	807b      	strh	r3, [r7, #2]
    x = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 8000b28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b30:	18d4      	adds	r4, r2, r3
 8000b32:	f7ff fe73 	bl	800081c <width>
 8000b36:	4603      	mov	r3, r0
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	dd07      	ble.n	8000b4c <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 8000b3c:	f7ff fe6e 	bl	800081c <width>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 8000b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dd5f      	ble.n	8000c14 <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 8000b54:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <ssd1306_DrawHorizontalLine+0x134>)
 8000b56:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 8000b58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b5c:	10db      	asrs	r3, r3, #3
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	461c      	mov	r4, r3
 8000b62:	f7ff fe5b 	bl	800081c <width>
 8000b66:	4603      	mov	r3, r0
 8000b68:	fb04 f303 	mul.w	r3, r4, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 8000b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	2201      	movs	r2, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <ssd1306_DrawHorizontalLine+0x138>)
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d034      	beq.n	8000bfe <ssd1306_DrawHorizontalLine+0x116>
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	dc3e      	bgt.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <ssd1306_DrawHorizontalLine+0xdc>
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d13a      	bne.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 8000ba0:	e007      	b.n	8000bb2 <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	60fa      	str	r2, [r7, #12]
 8000ba8:	7819      	ldrb	r1, [r3, #0]
 8000baa:	7afa      	ldrb	r2, [r7, #11]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	b292      	uxth	r2, r2
 8000bbc:	807a      	strh	r2, [r7, #2]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1ef      	bne.n	8000ba2 <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 8000bc2:	e028      	b.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 8000bca:	e007      	b.n	8000bdc <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60fa      	str	r2, [r7, #12]
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	7afa      	ldrb	r2, [r7, #11]
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000bdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	3a01      	subs	r2, #1
 8000be4:	b292      	uxth	r2, r2
 8000be6:	807a      	strh	r2, [r7, #2]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1ef      	bne.n	8000bcc <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8000bec:	e013      	b.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	60fa      	str	r2, [r7, #12]
 8000bf4:	7819      	ldrb	r1, [r3, #0]
 8000bf6:	7afa      	ldrb	r2, [r7, #11]
 8000bf8:	404a      	eors	r2, r1
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000bfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	3a01      	subs	r2, #1
 8000c06:	b292      	uxth	r2, r2
 8000c08:	807a      	strh	r2, [r7, #2]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1ef      	bne.n	8000bee <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 8000c0e:	e002      	b.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 8000c10:	bf00      	nop
 8000c12:	e000      	b.n	8000c16 <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 8000c14:	bf00      	nop
  }
}
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	20000138 	.word	0x20000138
 8000c20:	20000130 	.word	0x20000130

08000c24 <ssd1306_FillCircle>:
	ssd1306_DrawPixel(x0, y0 - radius);
}


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	f1c3 0301 	rsb	r3, r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 8000c48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da0d      	bge.n	8000c6c <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	81fb      	strh	r3, [r7, #14]
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	897b      	ldrh	r3, [r7, #10]
 8000c60:	4413      	add	r3, r2
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	3303      	adds	r3, #3
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	817b      	strh	r3, [r7, #10]
 8000c6a:	e015      	b.n	8000c98 <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 8000c6c:	89fb      	ldrh	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	89fb      	ldrh	r3, [r7, #14]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	897b      	ldrh	r3, [r7, #10]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	81bb      	strh	r3, [r7, #12]
 8000c88:	89bb      	ldrh	r3, [r7, #12]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3305      	adds	r3, #5
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 8000c98:	88fa      	ldrh	r2, [r7, #6]
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b218      	sxth	r0, r3
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b219      	sxth	r1, r3
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f7ff ff17 	bl	8000ae8 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b218      	sxth	r0, r3
 8000cc4:	88ba      	ldrh	r2, [r7, #4]
 8000cc6:	89bb      	ldrh	r3, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b219      	sxth	r1, r3
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f7ff ff06 	bl	8000ae8 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 8000cdc:	88fa      	ldrh	r2, [r7, #6]
 8000cde:	89bb      	ldrh	r3, [r7, #12]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b218      	sxth	r0, r3
 8000ce6:	88ba      	ldrh	r2, [r7, #4]
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b219      	sxth	r1, r3
 8000cf0:	89bb      	ldrh	r3, [r7, #12]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f7ff fef5 	bl	8000ae8 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 8000cfe:	88fa      	ldrh	r2, [r7, #6]
 8000d00:	89bb      	ldrh	r3, [r7, #12]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b218      	sxth	r0, r3
 8000d08:	88ba      	ldrh	r2, [r7, #4]
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b219      	sxth	r1, r3
 8000d12:	89bb      	ldrh	r3, [r7, #12]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f7ff fee4 	bl	8000ae8 <ssd1306_DrawHorizontalLine>




  } while (x < y);
 8000d20:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	db8d      	blt.n	8000c48 <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b218      	sxth	r0, r3
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fed0 	bl	8000ae8 <ssd1306_DrawHorizontalLine>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d60:	f7ff fd5c 	bl	800081c <width>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	793b      	ldrb	r3, [r7, #4]
 8000d70:	440b      	add	r3, r1
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dd0a      	ble.n	8000d8c <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8000d76:	f7ff fd58 	bl	800082a <height>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	4619      	mov	r1, r3
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dc01      	bgt.n	8000d90 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e06a      	b.n	8000e66 <ssd1306_WriteChar+0x116>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	e059      	b.n	8000e4a <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	3b20      	subs	r3, #32
 8000d9c:	7979      	ldrb	r1, [r7, #5]
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	440b      	add	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e041      	b.n	8000e3a <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d011      	beq.n	8000dea <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b2d8      	uxtb	r0, r3
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000dd6:	885b      	ldrh	r3, [r3, #2]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fe0a 	bl	80009fc <ssd1306_DrawPixel>
 8000de8:	e024      	b.n	8000e34 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf0c      	ite	eq
 8000df2:	2301      	moveq	r3, #1
 8000df4:	2300      	movne	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000dfc:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e0e:	885b      	ldrh	r3, [r3, #2]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fdee 	bl	80009fc <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e22:	795b      	ldrb	r3, [r3, #5]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e32:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d3b8      	bcc.n	8000db6 <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3301      	adds	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d3a0      	bcc.n	8000d96 <ssd1306_WriteChar+0x46>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <ssd1306_WriteChar+0x120>)
 8000e62:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000130 	.word	0x20000130

08000e74 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8000e82:	e012      	b.n	8000eaa <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	7818      	ldrb	r0, [r3, #0]
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e8e:	f7ff ff5f 	bl	8000d50 <ssd1306_WriteChar>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d002      	beq.n	8000ea4 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	e008      	b.n	8000eb6 <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1e8      	bne.n	8000e84 <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <ssd1306_SetCursor+0x2c>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <ssd1306_SetCursor+0x2c>)
 8000ede:	805a      	strh	r2, [r3, #2]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000130 	.word	0x20000130

08000ef0 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8000ef4:	20a1      	movs	r0, #161	; 0xa1
 8000ef6:	f000 f811 	bl	8000f1c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8000efa:	20c8      	movs	r0, #200	; 0xc8
 8000efc:	f000 f80e 	bl	8000f1c <ssd1306_WriteCommand>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <ssd1306_Clear+0x14>)
 8000f10:	f002 f8fe 	bl	8003110 <memset>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000138 	.word	0x20000138

08000f1c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000f26:	230a      	movs	r3, #10
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	2200      	movs	r2, #0
 8000f36:	2178      	movs	r1, #120	; 0x78
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <ssd1306_WriteCommand+0x2c>)
 8000f3a:	f000 ff3b 	bl	8001db4 <HAL_I2C_Mem_Write>
#endif
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000094 	.word	0x20000094

08000f4c <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af04      	add	r7, sp, #16
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	2178      	movs	r1, #120	; 0x78
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <ssd1306_WriteData+0x2c>)
 8000f6c:	f000 ff22 	bl	8001db4 <HAL_I2C_Mem_Write>
#endif
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000094 	.word	0x20000094

08000f7c <toggle_circle_y_mode>:
 *  Created on: 3 мая 2025 г.
 *      Author: borsuk
 */
#include "ssd1306_circle.h"

static inline void toggle_circle_y_mode(VerticalDirection *const vertical_direction) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    *vertical_direction = !(*vertical_direction);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	701a      	strb	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <toggle_circle_x_mode>:

static inline void toggle_circle_x_mode(HorizontalDirection *const horizontal_direction) {
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
    *horizontal_direction = !(*horizontal_direction);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <assign_circle_random_horizontal_direction>:

static inline void assign_circle_random_horizontal_direction(HorizontalDirection *const horizontal_direction) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    srand(HAL_GetTick());
 8000fd0:	f000 fae6 	bl	80015a0 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 f8a2 	bl	8003120 <srand>
    *horizontal_direction = (HorizontalDirection)(rand() % HORIZONTAL_DIRECTION_COUNT);
 8000fdc:	f002 f8ce 	bl	800317c <rand>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <assign_circle_random_horizontal_direction+0x3c>)
 8000fe4:	fb83 3102 	smull	r3, r1, r3, r2
 8000fe8:	17d3      	asrs	r3, r2, #31
 8000fea:	1ac9      	subs	r1, r1, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	440b      	add	r3, r1
 8000ff2:	1ad1      	subs	r1, r2, r3
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	701a      	strb	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	55555556 	.word	0x55555556

08001008 <update_circle_x>:

static inline void update_circle_x(Circle *const circle) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    HorizontalDirection horizontal_direction = circle->movement_direction.horizontal_direction;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	795b      	ldrb	r3, [r3, #5]
 8001014:	73fb      	strb	r3, [r7, #15]
    switch(horizontal_direction) {
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d820      	bhi.n	800105e <update_circle_x+0x56>
 800101c:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <update_circle_x+0x1c>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001035 	.word	0x08001035
 8001028:	08001049 	.word	0x08001049
 800102c:	0800105d 	.word	0x0800105d
 8001030:	0800105d 	.word	0x0800105d
        case RIGHT:
            ++circle->x;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	b29b      	uxth	r3, r3
 800103c:	3301      	adds	r3, #1
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	801a      	strh	r2, [r3, #0]
            break;
 8001046:	e00a      	b.n	800105e <update_circle_x+0x56>
        case LEFT:
            --circle->x;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	b29b      	uxth	r3, r3
 8001050:	3b01      	subs	r3, #1
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	801a      	strh	r2, [r3, #0]
            break;
 800105a:	e000      	b.n	800105e <update_circle_x+0x56>
        case STRAIGHT:
            break;
 800105c:	bf00      	nop
        case HORIZONTAL_DIRECTION_COUNT:
        	break;
    }
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <update_circle_y>:

static inline void update_circle_y(Circle *const circle) {
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    VerticalDirection vertical_direction = circle->movement_direction.vertical_direction;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
    switch(vertical_direction) {
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <update_circle_y+0x2c>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d113      	bne.n	80010a8 <update_circle_y+0x40>
        case DOWN:
            ++circle->y;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001086:	b29b      	uxth	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21a      	sxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	805a      	strh	r2, [r3, #2]
            break;
 8001092:	e009      	b.n	80010a8 <update_circle_y+0x40>
        case UP:
            --circle->y;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800109a:	b29b      	uxth	r3, r3
 800109c:	3b01      	subs	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	805a      	strh	r2, [r3, #2]
            break;
 80010a6:	bf00      	nop
    }
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <update_circle_position>:

inline void update_circle_position(Circle *const circle) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
    update_circle_x(circle);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa4 	bl	8001008 <update_circle_x>
    update_circle_y(circle);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffd1 	bl	8001068 <update_circle_y>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <update_vertical_movement>:

inline void update_vertical_movement(Circle *const circle) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
    toggle_circle_y_mode(&circle->movement_direction.vertical_direction);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff4e 	bl	8000f7c <toggle_circle_y_mode>
    assign_circle_random_horizontal_direction(&circle->movement_direction.horizontal_direction);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3305      	adds	r3, #5
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff6f 	bl	8000fc8 <assign_circle_random_horizontal_direction>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <update_horizontal_movement>:

inline void update_horizontal_movement(Circle *const circle) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    toggle_circle_x_mode(&circle->movement_direction.horizontal_direction);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3305      	adds	r3, #5
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff4f 	bl	8000fa2 <toggle_circle_x_mode>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <init_circle>:

Circle init_circle(void) {
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    Circle circle = {
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <init_circle+0x34>)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111e:	6018      	str	r0, [r3, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	8019      	strh	r1, [r3, #0]
        .movement_direction = {
            .vertical_direction = DOWN,
            .horizontal_direction = STRAIGHT
        }
    };
    return circle;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	461a      	mov	r2, r3
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	6010      	str	r0, [r2, #0]
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	8093      	strh	r3, [r2, #4]
}
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	08004224 	.word	0x08004224

08001144 <init_paddle>:
 *  Created on: 3 мая 2025 г.
 *      Author: borsuk
 */
#include "ssd1306_paddle.h"

Paddle init_paddle(void) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
    Paddle paddle = {
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <init_paddle+0x28>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	603b      	str	r3, [r7, #0]
        .x = SSD1306_PADDLE_START_X,
        .y = SSD1306_PADDLE_Y
    };

    return paddle;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	2300      	movs	r3, #0
 8001156:	88ba      	ldrh	r2, [r7, #4]
 8001158:	f362 030f 	bfi	r3, r2, #0, #16
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	0800422c 	.word	0x0800422c

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_MspInit+0x40>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_MspInit+0x40>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_MspInit+0x40>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_MspInit+0x40>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_MspInit+0x40>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_MspInit+0x40>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <HAL_I2C_MspInit+0x70>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d123      	bne.n	800121c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ec:	23c0      	movs	r3, #192	; 0xc0
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_I2C_MspInit+0x78>)
 8001200:	f000 fae0 	bl	80017c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0x74>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0x74>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0x74>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_UART_MspInit+0x8c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d131      	bne.n	80012b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_UART_MspInit+0x90>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_UART_MspInit+0x90>)
 8001256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0x90>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0x90>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0x90>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_UART_MspInit+0x90>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <HAL_UART_MspInit+0x94>)
 8001296:	f000 fa95 	bl	80017c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x94>)
 80012b0:	f000 fa88 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 f935 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  return 1;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_kill>:

int _kill(int pid, int sig)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132e:	f001 fec5 	bl	80030bc <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2216      	movs	r2, #22
 8001336:	601a      	str	r2, [r3, #0]
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_exit>:

void _exit (int status)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffe7 	bl	8001324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001356:	e7fe      	b.n	8001356 <_exit+0x12>

08001358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e009      	b.n	80013b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf1      	blt.n	80013a4 <_write+0x12>
  }
  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f0:	605a      	str	r2, [r3, #4]
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800145c:	f001 fe2e 	bl	80030bc <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20005000 	.word	0x20005000
 800148c:	00000400 	.word	0x00000400
 8001490:	2000053c 	.word	0x2000053c
 8001494:	20000558 	.word	0x20000558

08001498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fff8 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014aa:	490c      	ldr	r1, [pc, #48]	; (80014dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c0:	4c09      	ldr	r4, [pc, #36]	; (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f001 fdfb 	bl	80030c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7fe fe3b 	bl	800014c <main>
  bx lr
 80014d6:	4770      	bx	lr
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014e0:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 80014e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014e8:	20000554 	.word	0x20000554

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x28>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x28>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f92b 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fe30 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f935 	bl	80017aa <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001558:	f000 f90b 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000008 	.word	0x20000008
 8001574:	20000010 	.word	0x20000010
 8001578:	2000000c 	.word	0x2000000c

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_IncTick+0x20>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000010 	.word	0x20000010
 800159c:	20000540 	.word	0x20000540

080015a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_GetTick+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000540 	.word	0x20000540

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffe0 	bl	80015a0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000010 	.word	0x20000010

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f7ff ff90 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff49 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff5e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffb0 	bl	8001718 <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e169      	b.n	8001aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8158 	bne.w	8001aa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a9a      	ldr	r2, [pc, #616]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4a98      	ldr	r2, [pc, #608]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <HAL_GPIO_Init+0x2a4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a96      	ldr	r2, [pc, #600]	; (8001a68 <HAL_GPIO_Init+0x2a4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a96      	ldr	r2, [pc, #600]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a94      	ldr	r2, [pc, #592]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a94      	ldr	r2, [pc, #592]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a92      	ldr	r2, [pc, #584]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a92      	ldr	r2, [pc, #584]	; (8001a74 <HAL_GPIO_Init+0x2b0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a90      	ldr	r2, [pc, #576]	; (8001a74 <HAL_GPIO_Init+0x2b0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a79      	ldr	r2, [pc, #484]	; (8001a78 <HAL_GPIO_Init+0x2b4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b1 	beq.w	8001aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2bc>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1ec>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1e8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3e      	ldr	r2, [pc, #248]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1e4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1e0>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019b0:	2300      	movs	r3, #0
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019c2:	492f      	ldr	r1, [pc, #188]	; (8001a80 <HAL_GPIO_Init+0x2bc>)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	492c      	ldr	r1, [pc, #176]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4928      	ldr	r1, [pc, #160]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4922      	ldr	r1, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	491e      	ldr	r1, [pc, #120]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4918      	ldr	r1, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4914      	ldr	r1, [pc, #80]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e021      	b.n	8001aa6 <HAL_GPIO_Init+0x2e2>
 8001a62:	bf00      	nop
 8001a64:	10320000 	.word	0x10320000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10220000 	.word	0x10220000
 8001a70:	10210000 	.word	0x10210000
 8001a74:	10120000 	.word	0x10120000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4909      	ldr	r1, [pc, #36]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f ae8e 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	372c      	adds	r7, #44	; 0x2c
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0a:	787b      	ldrb	r3, [r7, #1]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e12b      	b.n	8001d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fb2e 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b90:	f001 f970 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a81      	ldr	r2, [pc, #516]	; (8001da0 <HAL_I2C_Init+0x274>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d807      	bhi.n	8001bb0 <HAL_I2C_Init+0x84>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a80      	ldr	r2, [pc, #512]	; (8001da4 <HAL_I2C_Init+0x278>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e006      	b.n	8001bbe <HAL_I2C_Init+0x92>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a7d      	ldr	r2, [pc, #500]	; (8001da8 <HAL_I2C_Init+0x27c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0e7      	b.n	8001d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a78      	ldr	r2, [pc, #480]	; (8001dac <HAL_I2C_Init+0x280>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_I2C_Init+0x274>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d802      	bhi.n	8001c00 <HAL_I2C_Init+0xd4>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	e009      	b.n	8001c14 <HAL_I2C_Init+0xe8>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a69      	ldr	r2, [pc, #420]	; (8001db0 <HAL_I2C_Init+0x284>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	3301      	adds	r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	495c      	ldr	r1, [pc, #368]	; (8001da0 <HAL_I2C_Init+0x274>)
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d819      	bhi.n	8001c68 <HAL_I2C_Init+0x13c>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e59      	subs	r1, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c48:	400b      	ands	r3, r1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_I2C_Init+0x138>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e59      	subs	r1, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c62:	e051      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e04f      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_I2C_Init+0x168>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e58      	subs	r0, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e012      	b.n	8001cba <HAL_I2C_Init+0x18e>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e58      	subs	r0, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	0099      	lsls	r1, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Init+0x196>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e022      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_I2C_Init+0x1bc>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1e58      	subs	r0, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	440b      	add	r3, r1
 8001cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	e00f      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e58      	subs	r0, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	0099      	lsls	r1, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	6809      	ldr	r1, [r1, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6911      	ldr	r1, [r2, #16]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	000186a0 	.word	0x000186a0
 8001da4:	001e847f 	.word	0x001e847f
 8001da8:	003d08ff 	.word	0x003d08ff
 8001dac:	431bde83 	.word	0x431bde83
 8001db0:	10624dd3 	.word	0x10624dd3

08001db4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	817b      	strh	r3, [r7, #10]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	813b      	strh	r3, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dce:	f7ff fbe7 	bl	80015a0 <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	f040 80d9 	bne.w	8001f94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2319      	movs	r3, #25
 8001de8:	2201      	movs	r2, #1
 8001dea:	496d      	ldr	r1, [pc, #436]	; (8001fa0 <HAL_I2C_Mem_Write+0x1ec>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fa9f 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0cc      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_Mem_Write+0x56>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0c5      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d007      	beq.n	8001e30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2221      	movs	r2, #33	; 0x21
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_I2C_Mem_Write+0x1f0>)
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e72:	88f8      	ldrh	r0, [r7, #6]
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	8979      	ldrh	r1, [r7, #10]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4603      	mov	r3, r0
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f9be 	bl	8002204 <I2C_RequestMemoryWrite>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d052      	beq.n	8001f34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e081      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fb64 	bl	8002564 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d107      	bne.n	8001eba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_I2C_Mem_Write+0x180>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d017      	beq.n	8001f34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1aa      	bne.n	8001e92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fb57 	bl	80025f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d107      	bne.n	8001f64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e016      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	00100002 	.word	0x00100002
 8001fa4:	ffff0000 	.word	0xffff0000

08001fa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff faf2 	bl	80015a0 <HAL_GetTick>
 8001fbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 8111 	bne.w	80021f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2319      	movs	r3, #25
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4988      	ldr	r1, [pc, #544]	; (80021fc <HAL_I2C_IsDeviceReady+0x254>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9a8 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e104      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_IsDeviceReady+0x50>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0fd      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d007      	beq.n	800201e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2224      	movs	r2, #36	; 0x24
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a70      	ldr	r2, [pc, #448]	; (8002200 <HAL_I2C_IsDeviceReady+0x258>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f966 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002078:	d103      	bne.n	8002082 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0b6      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002094:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fa83 	bl	80015a0 <HAL_GetTick>
 800209a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ca:	e025      	b.n	8002118 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7ff fa68 	bl	80015a0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <HAL_I2C_IsDeviceReady+0x13a>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	22a0      	movs	r2, #160	; 0xa0
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2ba0      	cmp	r3, #160	; 0xa0
 8002122:	d005      	beq.n	8002130 <HAL_I2C_IsDeviceReady+0x188>
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_I2C_IsDeviceReady+0x188>
 800212a:	7dbb      	ldrb	r3, [r7, #22]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0cd      	beq.n	80020cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d129      	bne.n	800219a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	4921      	ldr	r1, [pc, #132]	; (80021fc <HAL_I2C_IsDeviceReady+0x254>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f8da 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e036      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e02c      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	490f      	ldr	r1, [pc, #60]	; (80021fc <HAL_I2C_IsDeviceReady+0x254>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f8b6 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e012      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f4ff af32 	bcc.w	8002042 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000

08002204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	817b      	strh	r3, [r7, #10]
 8002216:	460b      	mov	r3, r1
 8002218:	813b      	strh	r3, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2200      	movs	r2, #0
 8002236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f878 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002254:	d103      	bne.n	800225e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e05f      	b.n	8002322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	492d      	ldr	r1, [pc, #180]	; (800232c <I2C_RequestMemoryWrite+0x128>)
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8d3 	bl	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04c      	b.n	8002322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	6a39      	ldr	r1, [r7, #32]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f95e 	bl	8002564 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d107      	bne.n	80022c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e02b      	b.n	8002322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d0:	893b      	ldrh	r3, [r7, #8]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]
 80022da:	e021      	b.n	8002320 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022dc:	893b      	ldrh	r3, [r7, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6a39      	ldr	r1, [r7, #32]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f938 	bl	8002564 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d107      	bne.n	8002312 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e005      	b.n	8002322 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002316:	893b      	ldrh	r3, [r7, #8]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	00010002 	.word	0x00010002

08002330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	e048      	b.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002348:	d044      	beq.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff f929 	bl	80015a0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d139      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	43da      	mvns	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	e00c      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	43da      	mvns	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d116      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e023      	b.n	800241c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10d      	bne.n	80023fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	e00c      	b.n	8002414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	43da      	mvns	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	429a      	cmp	r2, r3
 8002418:	d093      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002432:	e071      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d123      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800245c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f043 0204 	orr.w	r2, r3, #4
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e067      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002492:	d041      	beq.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff f884 	bl	80015a0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d136      	bne.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10c      	bne.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4013      	ands	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e00b      	b.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	43da      	mvns	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e021      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10c      	bne.n	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e00b      	b.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af6d 	bne.w	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002570:	e034      	b.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f886 	bl	8002684 <I2C_IsAcknowledgeFailed>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e034      	b.n	80025ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002588:	d028      	beq.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7ff f809 	bl	80015a0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11d      	bne.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d016      	beq.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d1c3      	bne.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002600:	e034      	b.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f83e 	bl	8002684 <I2C_IsAcknowledgeFailed>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e034      	b.n	800267c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002618:	d028      	beq.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe ffc1 	bl	80015a0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11d      	bne.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d016      	beq.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e007      	b.n	800267c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d1c3      	bne.n	8002602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d11b      	bne.n	80026d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0204 	orr.w	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fef0 	bl	80015a0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe feec 	bl	80015a0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fedc 	bl	80015a0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fed8 	bl	80015a0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fe91 	bl	80015a0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fe8d 	bl	80015a0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe70 	bl	80015a0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fe6c 	bl	80015a0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fe50 	bl	80015a0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fe4c 	bl	80015a0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 face 	bl	8002ec4 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fe36 	bl	80015a0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fe32 	bl	80015a0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fdf3 	bl	80015a0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe fdef 	bl	80015a0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fda3 	bl	80015a0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fd9f 	bl	80015a0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fd8d 	bl	80015a0 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fd89 	bl	80015a0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fd5d 	bl	80015a0 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fd59 	bl	80015a0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd2d 	bl	80015a0 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fd29 	bl	80015a0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd16 	bl	80015a0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fd12 	bl	80015a0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fc64 	bl	80015a0 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe fc60 	bl	80015a0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fbc2 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	0800499c 	.word	0x0800499c
 8002db0:	20000008 	.word	0x20000008
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	693b      	ldr	r3, [r7, #16]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	080049b4 	.word	0x080049b4
 8002e58:	080049c4 	.word	0x080049c4
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000008 	.word	0x20000008

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff2 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	080049ac 	.word	0x080049ac

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	080049ac 	.word	0x080049ac

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f982 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f82b 	bl	8002fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fda:	f023 030c 	bic.w	r3, r3, #12
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2c      	ldr	r2, [pc, #176]	; (80030b4 <UART_SetConfig+0x114>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d103      	bne.n	8003010 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7ff ff48 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	e002      	b.n	8003016 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff ff30 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8003014:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <UART_SetConfig+0x118>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	0119      	lsls	r1, r3, #4
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009a      	lsls	r2, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fbb2 f2f3 	udiv	r2, r2, r3
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <UART_SetConfig+0x118>)
 800304e:	fba3 0302 	umull	r0, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2064      	movs	r0, #100	; 0x64
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	; 0x32
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <UART_SetConfig+0x118>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	4419      	add	r1, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f2f3 	udiv	r2, r2, r3
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <UART_SetConfig+0x118>)
 8003086:	fba3 0302 	umull	r0, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2064      	movs	r0, #100	; 0x64
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	3332      	adds	r3, #50	; 0x32
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <UART_SetConfig+0x118>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	440a      	add	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40013800 	.word	0x40013800
 80030b8:	51eb851f 	.word	0x51eb851f

080030bc <__errno>:
 80030bc:	4b01      	ldr	r3, [pc, #4]	; (80030c4 <__errno+0x8>)
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000014 	.word	0x20000014

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	2600      	movs	r6, #0
 80030cc:	4d0c      	ldr	r5, [pc, #48]	; (8003100 <__libc_init_array+0x38>)
 80030ce:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	f001 f88e 	bl	80041f8 <_init>
 80030dc:	2600      	movs	r6, #0
 80030de:	4d0a      	ldr	r5, [pc, #40]	; (8003108 <__libc_init_array+0x40>)
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <__libc_init_array+0x44>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	08004b10 	.word	0x08004b10
 8003104:	08004b10 	.word	0x08004b10
 8003108:	08004b10 	.word	0x08004b10
 800310c:	08004b14 	.word	0x08004b14

08003110 <memset>:
 8003110:	4603      	mov	r3, r0
 8003112:	4402      	add	r2, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <srand>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <srand+0x44>)
 8003124:	4604      	mov	r4, r0
 8003126:	681d      	ldr	r5, [r3, #0]
 8003128:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800312a:	b9b3      	cbnz	r3, 800315a <srand+0x3a>
 800312c:	2018      	movs	r0, #24
 800312e:	f000 f893 	bl	8003258 <malloc>
 8003132:	4602      	mov	r2, r0
 8003134:	63a8      	str	r0, [r5, #56]	; 0x38
 8003136:	b920      	cbnz	r0, 8003142 <srand+0x22>
 8003138:	2142      	movs	r1, #66	; 0x42
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <srand+0x48>)
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <srand+0x4c>)
 800313e:	f000 f85b 	bl	80031f8 <__assert_func>
 8003142:	490b      	ldr	r1, [pc, #44]	; (8003170 <srand+0x50>)
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <srand+0x54>)
 8003146:	e9c0 1300 	strd	r1, r3, [r0]
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <srand+0x58>)
 800314c:	2100      	movs	r1, #0
 800314e:	6083      	str	r3, [r0, #8]
 8003150:	230b      	movs	r3, #11
 8003152:	8183      	strh	r3, [r0, #12]
 8003154:	2001      	movs	r0, #1
 8003156:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800315a:	2200      	movs	r2, #0
 800315c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800315e:	611c      	str	r4, [r3, #16]
 8003160:	615a      	str	r2, [r3, #20]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	20000014 	.word	0x20000014
 8003168:	080049cc 	.word	0x080049cc
 800316c:	080049e3 	.word	0x080049e3
 8003170:	abcd330e 	.word	0xabcd330e
 8003174:	e66d1234 	.word	0xe66d1234
 8003178:	0005deec 	.word	0x0005deec

0800317c <rand>:
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <rand+0x5c>)
 800317e:	b510      	push	{r4, lr}
 8003180:	681c      	ldr	r4, [r3, #0]
 8003182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003184:	b9b3      	cbnz	r3, 80031b4 <rand+0x38>
 8003186:	2018      	movs	r0, #24
 8003188:	f000 f866 	bl	8003258 <malloc>
 800318c:	4602      	mov	r2, r0
 800318e:	63a0      	str	r0, [r4, #56]	; 0x38
 8003190:	b920      	cbnz	r0, 800319c <rand+0x20>
 8003192:	214e      	movs	r1, #78	; 0x4e
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <rand+0x60>)
 8003196:	4812      	ldr	r0, [pc, #72]	; (80031e0 <rand+0x64>)
 8003198:	f000 f82e 	bl	80031f8 <__assert_func>
 800319c:	4911      	ldr	r1, [pc, #68]	; (80031e4 <rand+0x68>)
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <rand+0x6c>)
 80031a0:	e9c0 1300 	strd	r1, r3, [r0]
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <rand+0x70>)
 80031a6:	2100      	movs	r1, #0
 80031a8:	6083      	str	r3, [r0, #8]
 80031aa:	230b      	movs	r3, #11
 80031ac:	8183      	strh	r3, [r0, #12]
 80031ae:	2001      	movs	r0, #1
 80031b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80031b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <rand+0x74>)
 80031b8:	6920      	ldr	r0, [r4, #16]
 80031ba:	6963      	ldr	r3, [r4, #20]
 80031bc:	4342      	muls	r2, r0
 80031be:	490d      	ldr	r1, [pc, #52]	; (80031f4 <rand+0x78>)
 80031c0:	fb01 2203 	mla	r2, r1, r3, r2
 80031c4:	fba0 0101 	umull	r0, r1, r0, r1
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	eb42 0001 	adc.w	r0, r2, r1
 80031ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80031d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80031d6:	bd10      	pop	{r4, pc}
 80031d8:	20000014 	.word	0x20000014
 80031dc:	080049cc 	.word	0x080049cc
 80031e0:	080049e3 	.word	0x080049e3
 80031e4:	abcd330e 	.word	0xabcd330e
 80031e8:	e66d1234 	.word	0xe66d1234
 80031ec:	0005deec 	.word	0x0005deec
 80031f0:	5851f42d 	.word	0x5851f42d
 80031f4:	4c957f2d 	.word	0x4c957f2d

080031f8 <__assert_func>:
 80031f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031fa:	4614      	mov	r4, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <__assert_func+0x2c>)
 8003200:	4605      	mov	r5, r0
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68d8      	ldr	r0, [r3, #12]
 8003206:	b14c      	cbz	r4, 800321c <__assert_func+0x24>
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <__assert_func+0x30>)
 800320a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800320e:	9100      	str	r1, [sp, #0]
 8003210:	462b      	mov	r3, r5
 8003212:	4906      	ldr	r1, [pc, #24]	; (800322c <__assert_func+0x34>)
 8003214:	f000 f80e 	bl	8003234 <fiprintf>
 8003218:	f000 fcc0 	bl	8003b9c <abort>
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__assert_func+0x38>)
 800321e:	461c      	mov	r4, r3
 8003220:	e7f3      	b.n	800320a <__assert_func+0x12>
 8003222:	bf00      	nop
 8003224:	20000014 	.word	0x20000014
 8003228:	08004a3e 	.word	0x08004a3e
 800322c:	08004a4b 	.word	0x08004a4b
 8003230:	08004a79 	.word	0x08004a79

08003234 <fiprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	b503      	push	{r0, r1, lr}
 8003238:	4601      	mov	r1, r0
 800323a:	ab03      	add	r3, sp, #12
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <fiprintf+0x20>)
 800323e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003242:	6800      	ldr	r0, [r0, #0]
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	f000 f913 	bl	8003470 <_vfiprintf_r>
 800324a:	b002      	add	sp, #8
 800324c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003250:	b003      	add	sp, #12
 8003252:	4770      	bx	lr
 8003254:	20000014 	.word	0x20000014

08003258 <malloc>:
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <malloc+0xc>)
 800325a:	4601      	mov	r1, r0
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f000 b86b 	b.w	8003338 <_malloc_r>
 8003262:	bf00      	nop
 8003264:	20000014 	.word	0x20000014

08003268 <_free_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4605      	mov	r5, r0
 800326c:	2900      	cmp	r1, #0
 800326e:	d040      	beq.n	80032f2 <_free_r+0x8a>
 8003270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003274:	1f0c      	subs	r4, r1, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	bfb8      	it	lt
 800327a:	18e4      	addlt	r4, r4, r3
 800327c:	f000 fec0 	bl	8004000 <__malloc_lock>
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <_free_r+0x8c>)
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	b933      	cbnz	r3, 8003294 <_free_r+0x2c>
 8003286:	6063      	str	r3, [r4, #4]
 8003288:	6014      	str	r4, [r2, #0]
 800328a:	4628      	mov	r0, r5
 800328c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003290:	f000 bebc 	b.w	800400c <__malloc_unlock>
 8003294:	42a3      	cmp	r3, r4
 8003296:	d908      	bls.n	80032aa <_free_r+0x42>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428b      	cmp	r3, r1
 800329e:	bf01      	itttt	eq
 80032a0:	6819      	ldreq	r1, [r3, #0]
 80032a2:	685b      	ldreq	r3, [r3, #4]
 80032a4:	1809      	addeq	r1, r1, r0
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	e7ed      	b.n	8003286 <_free_r+0x1e>
 80032aa:	461a      	mov	r2, r3
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	b10b      	cbz	r3, 80032b4 <_free_r+0x4c>
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	d9fa      	bls.n	80032aa <_free_r+0x42>
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	1850      	adds	r0, r2, r1
 80032b8:	42a0      	cmp	r0, r4
 80032ba:	d10b      	bne.n	80032d4 <_free_r+0x6c>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	4401      	add	r1, r0
 80032c0:	1850      	adds	r0, r2, r1
 80032c2:	4283      	cmp	r3, r0
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	d1e0      	bne.n	800328a <_free_r+0x22>
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4401      	add	r1, r0
 80032ce:	6011      	str	r1, [r2, #0]
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	e7da      	b.n	800328a <_free_r+0x22>
 80032d4:	d902      	bls.n	80032dc <_free_r+0x74>
 80032d6:	230c      	movs	r3, #12
 80032d8:	602b      	str	r3, [r5, #0]
 80032da:	e7d6      	b.n	800328a <_free_r+0x22>
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	1821      	adds	r1, r4, r0
 80032e0:	428b      	cmp	r3, r1
 80032e2:	bf01      	itttt	eq
 80032e4:	6819      	ldreq	r1, [r3, #0]
 80032e6:	685b      	ldreq	r3, [r3, #4]
 80032e8:	1809      	addeq	r1, r1, r0
 80032ea:	6021      	streq	r1, [r4, #0]
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	6054      	str	r4, [r2, #4]
 80032f0:	e7cb      	b.n	800328a <_free_r+0x22>
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000544 	.word	0x20000544

080032f8 <sbrk_aligned>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	4e0e      	ldr	r6, [pc, #56]	; (8003334 <sbrk_aligned+0x3c>)
 80032fc:	460c      	mov	r4, r1
 80032fe:	6831      	ldr	r1, [r6, #0]
 8003300:	4605      	mov	r5, r0
 8003302:	b911      	cbnz	r1, 800330a <sbrk_aligned+0x12>
 8003304:	f000 fb7a 	bl	80039fc <_sbrk_r>
 8003308:	6030      	str	r0, [r6, #0]
 800330a:	4621      	mov	r1, r4
 800330c:	4628      	mov	r0, r5
 800330e:	f000 fb75 	bl	80039fc <_sbrk_r>
 8003312:	1c43      	adds	r3, r0, #1
 8003314:	d00a      	beq.n	800332c <sbrk_aligned+0x34>
 8003316:	1cc4      	adds	r4, r0, #3
 8003318:	f024 0403 	bic.w	r4, r4, #3
 800331c:	42a0      	cmp	r0, r4
 800331e:	d007      	beq.n	8003330 <sbrk_aligned+0x38>
 8003320:	1a21      	subs	r1, r4, r0
 8003322:	4628      	mov	r0, r5
 8003324:	f000 fb6a 	bl	80039fc <_sbrk_r>
 8003328:	3001      	adds	r0, #1
 800332a:	d101      	bne.n	8003330 <sbrk_aligned+0x38>
 800332c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003330:	4620      	mov	r0, r4
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	20000548 	.word	0x20000548

08003338 <_malloc_r>:
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333c:	1ccd      	adds	r5, r1, #3
 800333e:	f025 0503 	bic.w	r5, r5, #3
 8003342:	3508      	adds	r5, #8
 8003344:	2d0c      	cmp	r5, #12
 8003346:	bf38      	it	cc
 8003348:	250c      	movcc	r5, #12
 800334a:	2d00      	cmp	r5, #0
 800334c:	4607      	mov	r7, r0
 800334e:	db01      	blt.n	8003354 <_malloc_r+0x1c>
 8003350:	42a9      	cmp	r1, r5
 8003352:	d905      	bls.n	8003360 <_malloc_r+0x28>
 8003354:	230c      	movs	r3, #12
 8003356:	2600      	movs	r6, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4630      	mov	r0, r6
 800335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003360:	4e2e      	ldr	r6, [pc, #184]	; (800341c <_malloc_r+0xe4>)
 8003362:	f000 fe4d 	bl	8004000 <__malloc_lock>
 8003366:	6833      	ldr	r3, [r6, #0]
 8003368:	461c      	mov	r4, r3
 800336a:	bb34      	cbnz	r4, 80033ba <_malloc_r+0x82>
 800336c:	4629      	mov	r1, r5
 800336e:	4638      	mov	r0, r7
 8003370:	f7ff ffc2 	bl	80032f8 <sbrk_aligned>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	4604      	mov	r4, r0
 8003378:	d14d      	bne.n	8003416 <_malloc_r+0xde>
 800337a:	6834      	ldr	r4, [r6, #0]
 800337c:	4626      	mov	r6, r4
 800337e:	2e00      	cmp	r6, #0
 8003380:	d140      	bne.n	8003404 <_malloc_r+0xcc>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4631      	mov	r1, r6
 8003386:	4638      	mov	r0, r7
 8003388:	eb04 0803 	add.w	r8, r4, r3
 800338c:	f000 fb36 	bl	80039fc <_sbrk_r>
 8003390:	4580      	cmp	r8, r0
 8003392:	d13a      	bne.n	800340a <_malloc_r+0xd2>
 8003394:	6821      	ldr	r1, [r4, #0]
 8003396:	3503      	adds	r5, #3
 8003398:	1a6d      	subs	r5, r5, r1
 800339a:	f025 0503 	bic.w	r5, r5, #3
 800339e:	3508      	adds	r5, #8
 80033a0:	2d0c      	cmp	r5, #12
 80033a2:	bf38      	it	cc
 80033a4:	250c      	movcc	r5, #12
 80033a6:	4638      	mov	r0, r7
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7ff ffa5 	bl	80032f8 <sbrk_aligned>
 80033ae:	3001      	adds	r0, #1
 80033b0:	d02b      	beq.n	800340a <_malloc_r+0xd2>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	442b      	add	r3, r5
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	e00e      	b.n	80033d8 <_malloc_r+0xa0>
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	1b52      	subs	r2, r2, r5
 80033be:	d41e      	bmi.n	80033fe <_malloc_r+0xc6>
 80033c0:	2a0b      	cmp	r2, #11
 80033c2:	d916      	bls.n	80033f2 <_malloc_r+0xba>
 80033c4:	1961      	adds	r1, r4, r5
 80033c6:	42a3      	cmp	r3, r4
 80033c8:	6025      	str	r5, [r4, #0]
 80033ca:	bf18      	it	ne
 80033cc:	6059      	strne	r1, [r3, #4]
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	bf08      	it	eq
 80033d2:	6031      	streq	r1, [r6, #0]
 80033d4:	5162      	str	r2, [r4, r5]
 80033d6:	604b      	str	r3, [r1, #4]
 80033d8:	4638      	mov	r0, r7
 80033da:	f104 060b 	add.w	r6, r4, #11
 80033de:	f000 fe15 	bl	800400c <__malloc_unlock>
 80033e2:	f026 0607 	bic.w	r6, r6, #7
 80033e6:	1d23      	adds	r3, r4, #4
 80033e8:	1af2      	subs	r2, r6, r3
 80033ea:	d0b6      	beq.n	800335a <_malloc_r+0x22>
 80033ec:	1b9b      	subs	r3, r3, r6
 80033ee:	50a3      	str	r3, [r4, r2]
 80033f0:	e7b3      	b.n	800335a <_malloc_r+0x22>
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	bf0c      	ite	eq
 80033f8:	6032      	streq	r2, [r6, #0]
 80033fa:	605a      	strne	r2, [r3, #4]
 80033fc:	e7ec      	b.n	80033d8 <_malloc_r+0xa0>
 80033fe:	4623      	mov	r3, r4
 8003400:	6864      	ldr	r4, [r4, #4]
 8003402:	e7b2      	b.n	800336a <_malloc_r+0x32>
 8003404:	4634      	mov	r4, r6
 8003406:	6876      	ldr	r6, [r6, #4]
 8003408:	e7b9      	b.n	800337e <_malloc_r+0x46>
 800340a:	230c      	movs	r3, #12
 800340c:	4638      	mov	r0, r7
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	f000 fdfc 	bl	800400c <__malloc_unlock>
 8003414:	e7a1      	b.n	800335a <_malloc_r+0x22>
 8003416:	6025      	str	r5, [r4, #0]
 8003418:	e7de      	b.n	80033d8 <_malloc_r+0xa0>
 800341a:	bf00      	nop
 800341c:	20000544 	.word	0x20000544

08003420 <__sfputc_r>:
 8003420:	6893      	ldr	r3, [r2, #8]
 8003422:	b410      	push	{r4}
 8003424:	3b01      	subs	r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	da07      	bge.n	800343c <__sfputc_r+0x1c>
 800342c:	6994      	ldr	r4, [r2, #24]
 800342e:	42a3      	cmp	r3, r4
 8003430:	db01      	blt.n	8003436 <__sfputc_r+0x16>
 8003432:	290a      	cmp	r1, #10
 8003434:	d102      	bne.n	800343c <__sfputc_r+0x1c>
 8003436:	bc10      	pop	{r4}
 8003438:	f000 baf0 	b.w	8003a1c <__swbuf_r>
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	1c58      	adds	r0, r3, #1
 8003440:	6010      	str	r0, [r2, #0]
 8003442:	7019      	strb	r1, [r3, #0]
 8003444:	4608      	mov	r0, r1
 8003446:	bc10      	pop	{r4}
 8003448:	4770      	bx	lr

0800344a <__sfputs_r>:
 800344a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344c:	4606      	mov	r6, r0
 800344e:	460f      	mov	r7, r1
 8003450:	4614      	mov	r4, r2
 8003452:	18d5      	adds	r5, r2, r3
 8003454:	42ac      	cmp	r4, r5
 8003456:	d101      	bne.n	800345c <__sfputs_r+0x12>
 8003458:	2000      	movs	r0, #0
 800345a:	e007      	b.n	800346c <__sfputs_r+0x22>
 800345c:	463a      	mov	r2, r7
 800345e:	4630      	mov	r0, r6
 8003460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003464:	f7ff ffdc 	bl	8003420 <__sfputc_r>
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	d1f3      	bne.n	8003454 <__sfputs_r+0xa>
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003470 <_vfiprintf_r>:
 8003470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003474:	460d      	mov	r5, r1
 8003476:	4614      	mov	r4, r2
 8003478:	4698      	mov	r8, r3
 800347a:	4606      	mov	r6, r0
 800347c:	b09d      	sub	sp, #116	; 0x74
 800347e:	b118      	cbz	r0, 8003488 <_vfiprintf_r+0x18>
 8003480:	6983      	ldr	r3, [r0, #24]
 8003482:	b90b      	cbnz	r3, 8003488 <_vfiprintf_r+0x18>
 8003484:	f000 fca8 	bl	8003dd8 <__sinit>
 8003488:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <_vfiprintf_r+0x240>)
 800348a:	429d      	cmp	r5, r3
 800348c:	d11b      	bne.n	80034c6 <_vfiprintf_r+0x56>
 800348e:	6875      	ldr	r5, [r6, #4]
 8003490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003492:	07d9      	lsls	r1, r3, #31
 8003494:	d405      	bmi.n	80034a2 <_vfiprintf_r+0x32>
 8003496:	89ab      	ldrh	r3, [r5, #12]
 8003498:	059a      	lsls	r2, r3, #22
 800349a:	d402      	bmi.n	80034a2 <_vfiprintf_r+0x32>
 800349c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800349e:	f000 fd39 	bl	8003f14 <__retarget_lock_acquire_recursive>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	d501      	bpl.n	80034ac <_vfiprintf_r+0x3c>
 80034a8:	692b      	ldr	r3, [r5, #16]
 80034aa:	b9eb      	cbnz	r3, 80034e8 <_vfiprintf_r+0x78>
 80034ac:	4629      	mov	r1, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	f000 fb06 	bl	8003ac0 <__swsetup_r>
 80034b4:	b1c0      	cbz	r0, 80034e8 <_vfiprintf_r+0x78>
 80034b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034b8:	07dc      	lsls	r4, r3, #31
 80034ba:	d50e      	bpl.n	80034da <_vfiprintf_r+0x6a>
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c0:	b01d      	add	sp, #116	; 0x74
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c6:	4b7b      	ldr	r3, [pc, #492]	; (80036b4 <_vfiprintf_r+0x244>)
 80034c8:	429d      	cmp	r5, r3
 80034ca:	d101      	bne.n	80034d0 <_vfiprintf_r+0x60>
 80034cc:	68b5      	ldr	r5, [r6, #8]
 80034ce:	e7df      	b.n	8003490 <_vfiprintf_r+0x20>
 80034d0:	4b79      	ldr	r3, [pc, #484]	; (80036b8 <_vfiprintf_r+0x248>)
 80034d2:	429d      	cmp	r5, r3
 80034d4:	bf08      	it	eq
 80034d6:	68f5      	ldreq	r5, [r6, #12]
 80034d8:	e7da      	b.n	8003490 <_vfiprintf_r+0x20>
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	0598      	lsls	r0, r3, #22
 80034de:	d4ed      	bmi.n	80034bc <_vfiprintf_r+0x4c>
 80034e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034e2:	f000 fd18 	bl	8003f16 <__retarget_lock_release_recursive>
 80034e6:	e7e9      	b.n	80034bc <_vfiprintf_r+0x4c>
 80034e8:	2300      	movs	r3, #0
 80034ea:	9309      	str	r3, [sp, #36]	; 0x24
 80034ec:	2320      	movs	r3, #32
 80034ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034f2:	2330      	movs	r3, #48	; 0x30
 80034f4:	f04f 0901 	mov.w	r9, #1
 80034f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80036bc <_vfiprintf_r+0x24c>
 8003500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003504:	4623      	mov	r3, r4
 8003506:	469a      	mov	sl, r3
 8003508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800350c:	b10a      	cbz	r2, 8003512 <_vfiprintf_r+0xa2>
 800350e:	2a25      	cmp	r2, #37	; 0x25
 8003510:	d1f9      	bne.n	8003506 <_vfiprintf_r+0x96>
 8003512:	ebba 0b04 	subs.w	fp, sl, r4
 8003516:	d00b      	beq.n	8003530 <_vfiprintf_r+0xc0>
 8003518:	465b      	mov	r3, fp
 800351a:	4622      	mov	r2, r4
 800351c:	4629      	mov	r1, r5
 800351e:	4630      	mov	r0, r6
 8003520:	f7ff ff93 	bl	800344a <__sfputs_r>
 8003524:	3001      	adds	r0, #1
 8003526:	f000 80aa 	beq.w	800367e <_vfiprintf_r+0x20e>
 800352a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800352c:	445a      	add	r2, fp
 800352e:	9209      	str	r2, [sp, #36]	; 0x24
 8003530:	f89a 3000 	ldrb.w	r3, [sl]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a2 	beq.w	800367e <_vfiprintf_r+0x20e>
 800353a:	2300      	movs	r3, #0
 800353c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003544:	f10a 0a01 	add.w	sl, sl, #1
 8003548:	9304      	str	r3, [sp, #16]
 800354a:	9307      	str	r3, [sp, #28]
 800354c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003550:	931a      	str	r3, [sp, #104]	; 0x68
 8003552:	4654      	mov	r4, sl
 8003554:	2205      	movs	r2, #5
 8003556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800355a:	4858      	ldr	r0, [pc, #352]	; (80036bc <_vfiprintf_r+0x24c>)
 800355c:	f000 fd42 	bl	8003fe4 <memchr>
 8003560:	9a04      	ldr	r2, [sp, #16]
 8003562:	b9d8      	cbnz	r0, 800359c <_vfiprintf_r+0x12c>
 8003564:	06d1      	lsls	r1, r2, #27
 8003566:	bf44      	itt	mi
 8003568:	2320      	movmi	r3, #32
 800356a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800356e:	0713      	lsls	r3, r2, #28
 8003570:	bf44      	itt	mi
 8003572:	232b      	movmi	r3, #43	; 0x2b
 8003574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003578:	f89a 3000 	ldrb.w	r3, [sl]
 800357c:	2b2a      	cmp	r3, #42	; 0x2a
 800357e:	d015      	beq.n	80035ac <_vfiprintf_r+0x13c>
 8003580:	4654      	mov	r4, sl
 8003582:	2000      	movs	r0, #0
 8003584:	f04f 0c0a 	mov.w	ip, #10
 8003588:	9a07      	ldr	r2, [sp, #28]
 800358a:	4621      	mov	r1, r4
 800358c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003590:	3b30      	subs	r3, #48	; 0x30
 8003592:	2b09      	cmp	r3, #9
 8003594:	d94e      	bls.n	8003634 <_vfiprintf_r+0x1c4>
 8003596:	b1b0      	cbz	r0, 80035c6 <_vfiprintf_r+0x156>
 8003598:	9207      	str	r2, [sp, #28]
 800359a:	e014      	b.n	80035c6 <_vfiprintf_r+0x156>
 800359c:	eba0 0308 	sub.w	r3, r0, r8
 80035a0:	fa09 f303 	lsl.w	r3, r9, r3
 80035a4:	4313      	orrs	r3, r2
 80035a6:	46a2      	mov	sl, r4
 80035a8:	9304      	str	r3, [sp, #16]
 80035aa:	e7d2      	b.n	8003552 <_vfiprintf_r+0xe2>
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	1d19      	adds	r1, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	9103      	str	r1, [sp, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bfbb      	ittet	lt
 80035b8:	425b      	neglt	r3, r3
 80035ba:	f042 0202 	orrlt.w	r2, r2, #2
 80035be:	9307      	strge	r3, [sp, #28]
 80035c0:	9307      	strlt	r3, [sp, #28]
 80035c2:	bfb8      	it	lt
 80035c4:	9204      	strlt	r2, [sp, #16]
 80035c6:	7823      	ldrb	r3, [r4, #0]
 80035c8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ca:	d10c      	bne.n	80035e6 <_vfiprintf_r+0x176>
 80035cc:	7863      	ldrb	r3, [r4, #1]
 80035ce:	2b2a      	cmp	r3, #42	; 0x2a
 80035d0:	d135      	bne.n	800363e <_vfiprintf_r+0x1ce>
 80035d2:	9b03      	ldr	r3, [sp, #12]
 80035d4:	3402      	adds	r4, #2
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	9203      	str	r2, [sp, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bfb8      	it	lt
 80035e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035e4:	9305      	str	r3, [sp, #20]
 80035e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80036c0 <_vfiprintf_r+0x250>
 80035ea:	2203      	movs	r2, #3
 80035ec:	4650      	mov	r0, sl
 80035ee:	7821      	ldrb	r1, [r4, #0]
 80035f0:	f000 fcf8 	bl	8003fe4 <memchr>
 80035f4:	b140      	cbz	r0, 8003608 <_vfiprintf_r+0x198>
 80035f6:	2340      	movs	r3, #64	; 0x40
 80035f8:	eba0 000a 	sub.w	r0, r0, sl
 80035fc:	fa03 f000 	lsl.w	r0, r3, r0
 8003600:	9b04      	ldr	r3, [sp, #16]
 8003602:	3401      	adds	r4, #1
 8003604:	4303      	orrs	r3, r0
 8003606:	9304      	str	r3, [sp, #16]
 8003608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360c:	2206      	movs	r2, #6
 800360e:	482d      	ldr	r0, [pc, #180]	; (80036c4 <_vfiprintf_r+0x254>)
 8003610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003614:	f000 fce6 	bl	8003fe4 <memchr>
 8003618:	2800      	cmp	r0, #0
 800361a:	d03f      	beq.n	800369c <_vfiprintf_r+0x22c>
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <_vfiprintf_r+0x258>)
 800361e:	bb1b      	cbnz	r3, 8003668 <_vfiprintf_r+0x1f8>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	3307      	adds	r3, #7
 8003624:	f023 0307 	bic.w	r3, r3, #7
 8003628:	3308      	adds	r3, #8
 800362a:	9303      	str	r3, [sp, #12]
 800362c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800362e:	443b      	add	r3, r7
 8003630:	9309      	str	r3, [sp, #36]	; 0x24
 8003632:	e767      	b.n	8003504 <_vfiprintf_r+0x94>
 8003634:	460c      	mov	r4, r1
 8003636:	2001      	movs	r0, #1
 8003638:	fb0c 3202 	mla	r2, ip, r2, r3
 800363c:	e7a5      	b.n	800358a <_vfiprintf_r+0x11a>
 800363e:	2300      	movs	r3, #0
 8003640:	f04f 0c0a 	mov.w	ip, #10
 8003644:	4619      	mov	r1, r3
 8003646:	3401      	adds	r4, #1
 8003648:	9305      	str	r3, [sp, #20]
 800364a:	4620      	mov	r0, r4
 800364c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003650:	3a30      	subs	r2, #48	; 0x30
 8003652:	2a09      	cmp	r2, #9
 8003654:	d903      	bls.n	800365e <_vfiprintf_r+0x1ee>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0c5      	beq.n	80035e6 <_vfiprintf_r+0x176>
 800365a:	9105      	str	r1, [sp, #20]
 800365c:	e7c3      	b.n	80035e6 <_vfiprintf_r+0x176>
 800365e:	4604      	mov	r4, r0
 8003660:	2301      	movs	r3, #1
 8003662:	fb0c 2101 	mla	r1, ip, r1, r2
 8003666:	e7f0      	b.n	800364a <_vfiprintf_r+0x1da>
 8003668:	ab03      	add	r3, sp, #12
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	462a      	mov	r2, r5
 800366e:	4630      	mov	r0, r6
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <_vfiprintf_r+0x25c>)
 8003672:	a904      	add	r1, sp, #16
 8003674:	f3af 8000 	nop.w
 8003678:	4607      	mov	r7, r0
 800367a:	1c78      	adds	r0, r7, #1
 800367c:	d1d6      	bne.n	800362c <_vfiprintf_r+0x1bc>
 800367e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003680:	07d9      	lsls	r1, r3, #31
 8003682:	d405      	bmi.n	8003690 <_vfiprintf_r+0x220>
 8003684:	89ab      	ldrh	r3, [r5, #12]
 8003686:	059a      	lsls	r2, r3, #22
 8003688:	d402      	bmi.n	8003690 <_vfiprintf_r+0x220>
 800368a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800368c:	f000 fc43 	bl	8003f16 <__retarget_lock_release_recursive>
 8003690:	89ab      	ldrh	r3, [r5, #12]
 8003692:	065b      	lsls	r3, r3, #25
 8003694:	f53f af12 	bmi.w	80034bc <_vfiprintf_r+0x4c>
 8003698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800369a:	e711      	b.n	80034c0 <_vfiprintf_r+0x50>
 800369c:	ab03      	add	r3, sp, #12
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	462a      	mov	r2, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <_vfiprintf_r+0x25c>)
 80036a6:	a904      	add	r1, sp, #16
 80036a8:	f000 f882 	bl	80037b0 <_printf_i>
 80036ac:	e7e4      	b.n	8003678 <_vfiprintf_r+0x208>
 80036ae:	bf00      	nop
 80036b0:	08004ad0 	.word	0x08004ad0
 80036b4:	08004af0 	.word	0x08004af0
 80036b8:	08004ab0 	.word	0x08004ab0
 80036bc:	08004a7a 	.word	0x08004a7a
 80036c0:	08004a80 	.word	0x08004a80
 80036c4:	08004a84 	.word	0x08004a84
 80036c8:	00000000 	.word	0x00000000
 80036cc:	0800344b 	.word	0x0800344b

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4699      	mov	r9, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4607      	mov	r7, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfb8      	it	lt
 80036e2:	4613      	movlt	r3, r2
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ea:	460c      	mov	r4, r1
 80036ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc28      	bgt.n	800376a <_printf_common+0x9a>
 8003718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d42d      	bmi.n	8003784 <_printf_common+0xb4>
 8003728:	4649      	mov	r1, r9
 800372a:	4638      	mov	r0, r7
 800372c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d020      	beq.n	8003778 <_printf_common+0xa8>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	68e5      	ldr	r5, [r4, #12]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf18      	it	ne
 8003742:	2500      	movne	r5, #0
 8003744:	6832      	ldr	r2, [r6, #0]
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	bf08      	it	eq
 800374e:	1aad      	subeq	r5, r5, r2
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	bf08      	it	eq
 8003754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003758:	4293      	cmp	r3, r2
 800375a:	bfc4      	itt	gt
 800375c:	1a9b      	subgt	r3, r3, r2
 800375e:	18ed      	addgt	r5, r5, r3
 8003760:	341a      	adds	r4, #26
 8003762:	42b5      	cmp	r5, r6
 8003764:	d11a      	bne.n	800379c <_printf_common+0xcc>
 8003766:	2000      	movs	r0, #0
 8003768:	e008      	b.n	800377c <_printf_common+0xac>
 800376a:	2301      	movs	r3, #1
 800376c:	4652      	mov	r2, sl
 800376e:	4649      	mov	r1, r9
 8003770:	4638      	mov	r0, r7
 8003772:	47c0      	blx	r8
 8003774:	3001      	adds	r0, #1
 8003776:	d103      	bne.n	8003780 <_printf_common+0xb0>
 8003778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003780:	3501      	adds	r5, #1
 8003782:	e7c4      	b.n	800370e <_printf_common+0x3e>
 8003784:	2030      	movs	r0, #48	; 0x30
 8003786:	18e1      	adds	r1, r4, r3
 8003788:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003792:	4422      	add	r2, r4
 8003794:	3302      	adds	r3, #2
 8003796:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800379a:	e7c5      	b.n	8003728 <_printf_common+0x58>
 800379c:	2301      	movs	r3, #1
 800379e:	4622      	mov	r2, r4
 80037a0:	4649      	mov	r1, r9
 80037a2:	4638      	mov	r0, r7
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d0e6      	beq.n	8003778 <_printf_common+0xa8>
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7d9      	b.n	8003762 <_printf_common+0x92>
	...

080037b0 <_printf_i>:
 80037b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	7e0f      	ldrb	r7, [r1, #24]
 80037b6:	4691      	mov	r9, r2
 80037b8:	2f78      	cmp	r7, #120	; 0x78
 80037ba:	4680      	mov	r8, r0
 80037bc:	460c      	mov	r4, r1
 80037be:	469a      	mov	sl, r3
 80037c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037c6:	d807      	bhi.n	80037d8 <_printf_i+0x28>
 80037c8:	2f62      	cmp	r7, #98	; 0x62
 80037ca:	d80a      	bhi.n	80037e2 <_printf_i+0x32>
 80037cc:	2f00      	cmp	r7, #0
 80037ce:	f000 80d9 	beq.w	8003984 <_printf_i+0x1d4>
 80037d2:	2f58      	cmp	r7, #88	; 0x58
 80037d4:	f000 80a4 	beq.w	8003920 <_printf_i+0x170>
 80037d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e0:	e03a      	b.n	8003858 <_printf_i+0xa8>
 80037e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037e6:	2b15      	cmp	r3, #21
 80037e8:	d8f6      	bhi.n	80037d8 <_printf_i+0x28>
 80037ea:	a101      	add	r1, pc, #4	; (adr r1, 80037f0 <_printf_i+0x40>)
 80037ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f0:	08003849 	.word	0x08003849
 80037f4:	0800385d 	.word	0x0800385d
 80037f8:	080037d9 	.word	0x080037d9
 80037fc:	080037d9 	.word	0x080037d9
 8003800:	080037d9 	.word	0x080037d9
 8003804:	080037d9 	.word	0x080037d9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037d9 	.word	0x080037d9
 8003810:	080037d9 	.word	0x080037d9
 8003814:	080037d9 	.word	0x080037d9
 8003818:	080037d9 	.word	0x080037d9
 800381c:	0800396b 	.word	0x0800396b
 8003820:	0800388d 	.word	0x0800388d
 8003824:	0800394d 	.word	0x0800394d
 8003828:	080037d9 	.word	0x080037d9
 800382c:	080037d9 	.word	0x080037d9
 8003830:	0800398d 	.word	0x0800398d
 8003834:	080037d9 	.word	0x080037d9
 8003838:	0800388d 	.word	0x0800388d
 800383c:	080037d9 	.word	0x080037d9
 8003840:	080037d9 	.word	0x080037d9
 8003844:	08003955 	.word	0x08003955
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003858:	2301      	movs	r3, #1
 800385a:	e0a4      	b.n	80039a6 <_printf_i+0x1f6>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	6829      	ldr	r1, [r5, #0]
 8003860:	0606      	lsls	r6, r0, #24
 8003862:	f101 0304 	add.w	r3, r1, #4
 8003866:	d50a      	bpl.n	800387e <_printf_i+0xce>
 8003868:	680e      	ldr	r6, [r1, #0]
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	2e00      	cmp	r6, #0
 800386e:	da03      	bge.n	8003878 <_printf_i+0xc8>
 8003870:	232d      	movs	r3, #45	; 0x2d
 8003872:	4276      	negs	r6, r6
 8003874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003878:	230a      	movs	r3, #10
 800387a:	485e      	ldr	r0, [pc, #376]	; (80039f4 <_printf_i+0x244>)
 800387c:	e019      	b.n	80038b2 <_printf_i+0x102>
 800387e:	680e      	ldr	r6, [r1, #0]
 8003880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003884:	602b      	str	r3, [r5, #0]
 8003886:	bf18      	it	ne
 8003888:	b236      	sxthne	r6, r6
 800388a:	e7ef      	b.n	800386c <_printf_i+0xbc>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	1d19      	adds	r1, r3, #4
 8003892:	6029      	str	r1, [r5, #0]
 8003894:	0601      	lsls	r1, r0, #24
 8003896:	d501      	bpl.n	800389c <_printf_i+0xec>
 8003898:	681e      	ldr	r6, [r3, #0]
 800389a:	e002      	b.n	80038a2 <_printf_i+0xf2>
 800389c:	0646      	lsls	r6, r0, #25
 800389e:	d5fb      	bpl.n	8003898 <_printf_i+0xe8>
 80038a0:	881e      	ldrh	r6, [r3, #0]
 80038a2:	2f6f      	cmp	r7, #111	; 0x6f
 80038a4:	bf0c      	ite	eq
 80038a6:	2308      	moveq	r3, #8
 80038a8:	230a      	movne	r3, #10
 80038aa:	4852      	ldr	r0, [pc, #328]	; (80039f4 <_printf_i+0x244>)
 80038ac:	2100      	movs	r1, #0
 80038ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b2:	6865      	ldr	r5, [r4, #4]
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	bfa8      	it	ge
 80038b8:	6821      	ldrge	r1, [r4, #0]
 80038ba:	60a5      	str	r5, [r4, #8]
 80038bc:	bfa4      	itt	ge
 80038be:	f021 0104 	bicge.w	r1, r1, #4
 80038c2:	6021      	strge	r1, [r4, #0]
 80038c4:	b90e      	cbnz	r6, 80038ca <_printf_i+0x11a>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d04d      	beq.n	8003966 <_printf_i+0x1b6>
 80038ca:	4615      	mov	r5, r2
 80038cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80038d0:	fb03 6711 	mls	r7, r3, r1, r6
 80038d4:	5dc7      	ldrb	r7, [r0, r7]
 80038d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038da:	4637      	mov	r7, r6
 80038dc:	42bb      	cmp	r3, r7
 80038de:	460e      	mov	r6, r1
 80038e0:	d9f4      	bls.n	80038cc <_printf_i+0x11c>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d10b      	bne.n	80038fe <_printf_i+0x14e>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	07de      	lsls	r6, r3, #31
 80038ea:	d508      	bpl.n	80038fe <_printf_i+0x14e>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6861      	ldr	r1, [r4, #4]
 80038f0:	4299      	cmp	r1, r3
 80038f2:	bfde      	ittt	le
 80038f4:	2330      	movle	r3, #48	; 0x30
 80038f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038fe:	1b52      	subs	r2, r2, r5
 8003900:	6122      	str	r2, [r4, #16]
 8003902:	464b      	mov	r3, r9
 8003904:	4621      	mov	r1, r4
 8003906:	4640      	mov	r0, r8
 8003908:	f8cd a000 	str.w	sl, [sp]
 800390c:	aa03      	add	r2, sp, #12
 800390e:	f7ff fedf 	bl	80036d0 <_printf_common>
 8003912:	3001      	adds	r0, #1
 8003914:	d14c      	bne.n	80039b0 <_printf_i+0x200>
 8003916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800391a:	b004      	add	sp, #16
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003920:	4834      	ldr	r0, [pc, #208]	; (80039f4 <_printf_i+0x244>)
 8003922:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003926:	6829      	ldr	r1, [r5, #0]
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f851 6b04 	ldr.w	r6, [r1], #4
 800392e:	6029      	str	r1, [r5, #0]
 8003930:	061d      	lsls	r5, r3, #24
 8003932:	d514      	bpl.n	800395e <_printf_i+0x1ae>
 8003934:	07df      	lsls	r7, r3, #31
 8003936:	bf44      	itt	mi
 8003938:	f043 0320 	orrmi.w	r3, r3, #32
 800393c:	6023      	strmi	r3, [r4, #0]
 800393e:	b91e      	cbnz	r6, 8003948 <_printf_i+0x198>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	f023 0320 	bic.w	r3, r3, #32
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	2310      	movs	r3, #16
 800394a:	e7af      	b.n	80038ac <_printf_i+0xfc>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	2378      	movs	r3, #120	; 0x78
 8003956:	4828      	ldr	r0, [pc, #160]	; (80039f8 <_printf_i+0x248>)
 8003958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800395c:	e7e3      	b.n	8003926 <_printf_i+0x176>
 800395e:	0659      	lsls	r1, r3, #25
 8003960:	bf48      	it	mi
 8003962:	b2b6      	uxthmi	r6, r6
 8003964:	e7e6      	b.n	8003934 <_printf_i+0x184>
 8003966:	4615      	mov	r5, r2
 8003968:	e7bb      	b.n	80038e2 <_printf_i+0x132>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	6826      	ldr	r6, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6961      	ldr	r1, [r4, #20]
 8003972:	6028      	str	r0, [r5, #0]
 8003974:	0635      	lsls	r5, r6, #24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	d501      	bpl.n	800397e <_printf_i+0x1ce>
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	e002      	b.n	8003984 <_printf_i+0x1d4>
 800397e:	0670      	lsls	r0, r6, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0x1ca>
 8003982:	8019      	strh	r1, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	4615      	mov	r5, r2
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	e7ba      	b.n	8003902 <_printf_i+0x152>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	1d1a      	adds	r2, r3, #4
 8003992:	602a      	str	r2, [r5, #0]
 8003994:	681d      	ldr	r5, [r3, #0]
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	4628      	mov	r0, r5
 800399a:	f000 fb23 	bl	8003fe4 <memchr>
 800399e:	b108      	cbz	r0, 80039a4 <_printf_i+0x1f4>
 80039a0:	1b40      	subs	r0, r0, r5
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ae:	e7a8      	b.n	8003902 <_printf_i+0x152>
 80039b0:	462a      	mov	r2, r5
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0ab      	beq.n	8003916 <_printf_i+0x166>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079b      	lsls	r3, r3, #30
 80039c2:	d413      	bmi.n	80039ec <_printf_i+0x23c>
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	4298      	cmp	r0, r3
 80039ca:	bfb8      	it	lt
 80039cc:	4618      	movlt	r0, r3
 80039ce:	e7a4      	b.n	800391a <_printf_i+0x16a>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4632      	mov	r2, r6
 80039d4:	4649      	mov	r1, r9
 80039d6:	4640      	mov	r0, r8
 80039d8:	47d0      	blx	sl
 80039da:	3001      	adds	r0, #1
 80039dc:	d09b      	beq.n	8003916 <_printf_i+0x166>
 80039de:	3501      	adds	r5, #1
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	9903      	ldr	r1, [sp, #12]
 80039e4:	1a5b      	subs	r3, r3, r1
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	dcf2      	bgt.n	80039d0 <_printf_i+0x220>
 80039ea:	e7eb      	b.n	80039c4 <_printf_i+0x214>
 80039ec:	2500      	movs	r5, #0
 80039ee:	f104 0619 	add.w	r6, r4, #25
 80039f2:	e7f5      	b.n	80039e0 <_printf_i+0x230>
 80039f4:	08004a8b 	.word	0x08004a8b
 80039f8:	08004a9c 	.word	0x08004a9c

080039fc <_sbrk_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	2300      	movs	r3, #0
 8003a00:	4d05      	ldr	r5, [pc, #20]	; (8003a18 <_sbrk_r+0x1c>)
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	f7fd fd10 	bl	800142c <_sbrk>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_sbrk_r+0x1a>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_sbrk_r+0x1a>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	20000550 	.word	0x20000550

08003a1c <__swbuf_r>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	460e      	mov	r6, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	4605      	mov	r5, r0
 8003a24:	b118      	cbz	r0, 8003a2e <__swbuf_r+0x12>
 8003a26:	6983      	ldr	r3, [r0, #24]
 8003a28:	b90b      	cbnz	r3, 8003a2e <__swbuf_r+0x12>
 8003a2a:	f000 f9d5 	bl	8003dd8 <__sinit>
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <__swbuf_r+0x98>)
 8003a30:	429c      	cmp	r4, r3
 8003a32:	d12b      	bne.n	8003a8c <__swbuf_r+0x70>
 8003a34:	686c      	ldr	r4, [r5, #4]
 8003a36:	69a3      	ldr	r3, [r4, #24]
 8003a38:	60a3      	str	r3, [r4, #8]
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	071a      	lsls	r2, r3, #28
 8003a3e:	d52f      	bpl.n	8003aa0 <__swbuf_r+0x84>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	b36b      	cbz	r3, 8003aa0 <__swbuf_r+0x84>
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	b2f6      	uxtb	r6, r6
 8003a4a:	1ac0      	subs	r0, r0, r3
 8003a4c:	6963      	ldr	r3, [r4, #20]
 8003a4e:	4637      	mov	r7, r6
 8003a50:	4283      	cmp	r3, r0
 8003a52:	dc04      	bgt.n	8003a5e <__swbuf_r+0x42>
 8003a54:	4621      	mov	r1, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 f92a 	bl	8003cb0 <_fflush_r>
 8003a5c:	bb30      	cbnz	r0, 8003aac <__swbuf_r+0x90>
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	3001      	adds	r0, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	6022      	str	r2, [r4, #0]
 8003a6c:	701e      	strb	r6, [r3, #0]
 8003a6e:	6963      	ldr	r3, [r4, #20]
 8003a70:	4283      	cmp	r3, r0
 8003a72:	d004      	beq.n	8003a7e <__swbuf_r+0x62>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	07db      	lsls	r3, r3, #31
 8003a78:	d506      	bpl.n	8003a88 <__swbuf_r+0x6c>
 8003a7a:	2e0a      	cmp	r6, #10
 8003a7c:	d104      	bne.n	8003a88 <__swbuf_r+0x6c>
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 f915 	bl	8003cb0 <_fflush_r>
 8003a86:	b988      	cbnz	r0, 8003aac <__swbuf_r+0x90>
 8003a88:	4638      	mov	r0, r7
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <__swbuf_r+0x9c>)
 8003a8e:	429c      	cmp	r4, r3
 8003a90:	d101      	bne.n	8003a96 <__swbuf_r+0x7a>
 8003a92:	68ac      	ldr	r4, [r5, #8]
 8003a94:	e7cf      	b.n	8003a36 <__swbuf_r+0x1a>
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <__swbuf_r+0xa0>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	bf08      	it	eq
 8003a9c:	68ec      	ldreq	r4, [r5, #12]
 8003a9e:	e7ca      	b.n	8003a36 <__swbuf_r+0x1a>
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f80c 	bl	8003ac0 <__swsetup_r>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d0cb      	beq.n	8003a44 <__swbuf_r+0x28>
 8003aac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ab0:	e7ea      	b.n	8003a88 <__swbuf_r+0x6c>
 8003ab2:	bf00      	nop
 8003ab4:	08004ad0 	.word	0x08004ad0
 8003ab8:	08004af0 	.word	0x08004af0
 8003abc:	08004ab0 	.word	0x08004ab0

08003ac0 <__swsetup_r>:
 8003ac0:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <__swsetup_r+0xcc>)
 8003ac2:	b570      	push	{r4, r5, r6, lr}
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	460c      	mov	r4, r1
 8003aca:	b125      	cbz	r5, 8003ad6 <__swsetup_r+0x16>
 8003acc:	69ab      	ldr	r3, [r5, #24]
 8003ace:	b913      	cbnz	r3, 8003ad6 <__swsetup_r+0x16>
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 f981 	bl	8003dd8 <__sinit>
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <__swsetup_r+0xd0>)
 8003ad8:	429c      	cmp	r4, r3
 8003ada:	d10f      	bne.n	8003afc <__swsetup_r+0x3c>
 8003adc:	686c      	ldr	r4, [r5, #4]
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ae4:	0719      	lsls	r1, r3, #28
 8003ae6:	d42c      	bmi.n	8003b42 <__swsetup_r+0x82>
 8003ae8:	06dd      	lsls	r5, r3, #27
 8003aea:	d411      	bmi.n	8003b10 <__swsetup_r+0x50>
 8003aec:	2309      	movs	r3, #9
 8003aee:	6033      	str	r3, [r6, #0]
 8003af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	e03e      	b.n	8003b7a <__swsetup_r+0xba>
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <__swsetup_r+0xd4>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d101      	bne.n	8003b06 <__swsetup_r+0x46>
 8003b02:	68ac      	ldr	r4, [r5, #8]
 8003b04:	e7eb      	b.n	8003ade <__swsetup_r+0x1e>
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <__swsetup_r+0xd8>)
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	bf08      	it	eq
 8003b0c:	68ec      	ldreq	r4, [r5, #12]
 8003b0e:	e7e6      	b.n	8003ade <__swsetup_r+0x1e>
 8003b10:	0758      	lsls	r0, r3, #29
 8003b12:	d512      	bpl.n	8003b3a <__swsetup_r+0x7a>
 8003b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b16:	b141      	cbz	r1, 8003b2a <__swsetup_r+0x6a>
 8003b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d002      	beq.n	8003b26 <__swsetup_r+0x66>
 8003b20:	4630      	mov	r0, r6
 8003b22:	f7ff fba1 	bl	8003268 <_free_r>
 8003b26:	2300      	movs	r3, #0
 8003b28:	6363      	str	r3, [r4, #52]	; 0x34
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	b94b      	cbnz	r3, 8003b5a <__swsetup_r+0x9a>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d003      	beq.n	8003b5a <__swsetup_r+0x9a>
 8003b52:	4621      	mov	r1, r4
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 fa05 	bl	8003f64 <__smakebuf_r>
 8003b5a:	89a0      	ldrh	r0, [r4, #12]
 8003b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b60:	f010 0301 	ands.w	r3, r0, #1
 8003b64:	d00a      	beq.n	8003b7c <__swsetup_r+0xbc>
 8003b66:	2300      	movs	r3, #0
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	6963      	ldr	r3, [r4, #20]
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	61a3      	str	r3, [r4, #24]
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	b943      	cbnz	r3, 8003b86 <__swsetup_r+0xc6>
 8003b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b78:	d1ba      	bne.n	8003af0 <__swsetup_r+0x30>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	0781      	lsls	r1, r0, #30
 8003b7e:	bf58      	it	pl
 8003b80:	6963      	ldrpl	r3, [r4, #20]
 8003b82:	60a3      	str	r3, [r4, #8]
 8003b84:	e7f4      	b.n	8003b70 <__swsetup_r+0xb0>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e7f7      	b.n	8003b7a <__swsetup_r+0xba>
 8003b8a:	bf00      	nop
 8003b8c:	20000014 	.word	0x20000014
 8003b90:	08004ad0 	.word	0x08004ad0
 8003b94:	08004af0 	.word	0x08004af0
 8003b98:	08004ab0 	.word	0x08004ab0

08003b9c <abort>:
 8003b9c:	2006      	movs	r0, #6
 8003b9e:	b508      	push	{r3, lr}
 8003ba0:	f000 fa62 	bl	8004068 <raise>
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7fd fbcd 	bl	8001344 <_exit>
	...

08003bac <__sflush_r>:
 8003bac:	898a      	ldrh	r2, [r1, #12]
 8003bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	0710      	lsls	r0, r2, #28
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	d457      	bmi.n	8003c68 <__sflush_r+0xbc>
 8003bb8:	684b      	ldr	r3, [r1, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	dc04      	bgt.n	8003bc8 <__sflush_r+0x1c>
 8003bbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	dc01      	bgt.n	8003bc8 <__sflush_r+0x1c>
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	d0fa      	beq.n	8003bc4 <__sflush_r+0x18>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bd4:	682f      	ldr	r7, [r5, #0]
 8003bd6:	602b      	str	r3, [r5, #0]
 8003bd8:	d032      	beq.n	8003c40 <__sflush_r+0x94>
 8003bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	075a      	lsls	r2, r3, #29
 8003be0:	d505      	bpl.n	8003bee <__sflush_r+0x42>
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	1ac0      	subs	r0, r0, r3
 8003be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003be8:	b10b      	cbz	r3, 8003bee <__sflush_r+0x42>
 8003bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bec:	1ac0      	subs	r0, r0, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	6a21      	ldr	r1, [r4, #32]
 8003bf8:	47b0      	blx	r6
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	d106      	bne.n	8003c0e <__sflush_r+0x62>
 8003c00:	6829      	ldr	r1, [r5, #0]
 8003c02:	291d      	cmp	r1, #29
 8003c04:	d82c      	bhi.n	8003c60 <__sflush_r+0xb4>
 8003c06:	4a29      	ldr	r2, [pc, #164]	; (8003cac <__sflush_r+0x100>)
 8003c08:	40ca      	lsrs	r2, r1
 8003c0a:	07d6      	lsls	r6, r2, #31
 8003c0c:	d528      	bpl.n	8003c60 <__sflush_r+0xb4>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	6062      	str	r2, [r4, #4]
 8003c12:	6922      	ldr	r2, [r4, #16]
 8003c14:	04d9      	lsls	r1, r3, #19
 8003c16:	6022      	str	r2, [r4, #0]
 8003c18:	d504      	bpl.n	8003c24 <__sflush_r+0x78>
 8003c1a:	1c42      	adds	r2, r0, #1
 8003c1c:	d101      	bne.n	8003c22 <__sflush_r+0x76>
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	b903      	cbnz	r3, 8003c24 <__sflush_r+0x78>
 8003c22:	6560      	str	r0, [r4, #84]	; 0x54
 8003c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c26:	602f      	str	r7, [r5, #0]
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	d0cb      	beq.n	8003bc4 <__sflush_r+0x18>
 8003c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c30:	4299      	cmp	r1, r3
 8003c32:	d002      	beq.n	8003c3a <__sflush_r+0x8e>
 8003c34:	4628      	mov	r0, r5
 8003c36:	f7ff fb17 	bl	8003268 <_free_r>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c3e:	e7c2      	b.n	8003bc6 <__sflush_r+0x1a>
 8003c40:	6a21      	ldr	r1, [r4, #32]
 8003c42:	2301      	movs	r3, #1
 8003c44:	4628      	mov	r0, r5
 8003c46:	47b0      	blx	r6
 8003c48:	1c41      	adds	r1, r0, #1
 8003c4a:	d1c7      	bne.n	8003bdc <__sflush_r+0x30>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0c4      	beq.n	8003bdc <__sflush_r+0x30>
 8003c52:	2b1d      	cmp	r3, #29
 8003c54:	d001      	beq.n	8003c5a <__sflush_r+0xae>
 8003c56:	2b16      	cmp	r3, #22
 8003c58:	d101      	bne.n	8003c5e <__sflush_r+0xb2>
 8003c5a:	602f      	str	r7, [r5, #0]
 8003c5c:	e7b2      	b.n	8003bc4 <__sflush_r+0x18>
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	e7ae      	b.n	8003bc6 <__sflush_r+0x1a>
 8003c68:	690f      	ldr	r7, [r1, #16]
 8003c6a:	2f00      	cmp	r7, #0
 8003c6c:	d0aa      	beq.n	8003bc4 <__sflush_r+0x18>
 8003c6e:	0793      	lsls	r3, r2, #30
 8003c70:	bf18      	it	ne
 8003c72:	2300      	movne	r3, #0
 8003c74:	680e      	ldr	r6, [r1, #0]
 8003c76:	bf08      	it	eq
 8003c78:	694b      	ldreq	r3, [r1, #20]
 8003c7a:	1bf6      	subs	r6, r6, r7
 8003c7c:	600f      	str	r7, [r1, #0]
 8003c7e:	608b      	str	r3, [r1, #8]
 8003c80:	2e00      	cmp	r6, #0
 8003c82:	dd9f      	ble.n	8003bc4 <__sflush_r+0x18>
 8003c84:	4633      	mov	r3, r6
 8003c86:	463a      	mov	r2, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	6a21      	ldr	r1, [r4, #32]
 8003c8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c90:	47e0      	blx	ip
 8003c92:	2800      	cmp	r0, #0
 8003c94:	dc06      	bgt.n	8003ca4 <__sflush_r+0xf8>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	e790      	b.n	8003bc6 <__sflush_r+0x1a>
 8003ca4:	4407      	add	r7, r0
 8003ca6:	1a36      	subs	r6, r6, r0
 8003ca8:	e7ea      	b.n	8003c80 <__sflush_r+0xd4>
 8003caa:	bf00      	nop
 8003cac:	20400001 	.word	0x20400001

08003cb0 <_fflush_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	690b      	ldr	r3, [r1, #16]
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	b913      	cbnz	r3, 8003cc0 <_fflush_r+0x10>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	b118      	cbz	r0, 8003cca <_fflush_r+0x1a>
 8003cc2:	6983      	ldr	r3, [r0, #24]
 8003cc4:	b90b      	cbnz	r3, 8003cca <_fflush_r+0x1a>
 8003cc6:	f000 f887 	bl	8003dd8 <__sinit>
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <_fflush_r+0x6c>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	d11b      	bne.n	8003d08 <_fflush_r+0x58>
 8003cd0:	686c      	ldr	r4, [r5, #4]
 8003cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <_fflush_r+0xa>
 8003cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cdc:	07d0      	lsls	r0, r2, #31
 8003cde:	d404      	bmi.n	8003cea <_fflush_r+0x3a>
 8003ce0:	0599      	lsls	r1, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_fflush_r+0x3a>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f000 f915 	bl	8003f14 <__retarget_lock_acquire_recursive>
 8003cea:	4628      	mov	r0, r5
 8003cec:	4621      	mov	r1, r4
 8003cee:	f7ff ff5d 	bl	8003bac <__sflush_r>
 8003cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	07da      	lsls	r2, r3, #31
 8003cf8:	d4e0      	bmi.n	8003cbc <_fflush_r+0xc>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	d4dd      	bmi.n	8003cbc <_fflush_r+0xc>
 8003d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d02:	f000 f908 	bl	8003f16 <__retarget_lock_release_recursive>
 8003d06:	e7d9      	b.n	8003cbc <_fflush_r+0xc>
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <_fflush_r+0x70>)
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d101      	bne.n	8003d12 <_fflush_r+0x62>
 8003d0e:	68ac      	ldr	r4, [r5, #8]
 8003d10:	e7df      	b.n	8003cd2 <_fflush_r+0x22>
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <_fflush_r+0x74>)
 8003d14:	429c      	cmp	r4, r3
 8003d16:	bf08      	it	eq
 8003d18:	68ec      	ldreq	r4, [r5, #12]
 8003d1a:	e7da      	b.n	8003cd2 <_fflush_r+0x22>
 8003d1c:	08004ad0 	.word	0x08004ad0
 8003d20:	08004af0 	.word	0x08004af0
 8003d24:	08004ab0 	.word	0x08004ab0

08003d28 <std>:
 8003d28:	2300      	movs	r3, #0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d36:	6083      	str	r3, [r0, #8]
 8003d38:	8181      	strh	r1, [r0, #12]
 8003d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d3c:	81c2      	strh	r2, [r0, #14]
 8003d3e:	6183      	str	r3, [r0, #24]
 8003d40:	4619      	mov	r1, r3
 8003d42:	2208      	movs	r2, #8
 8003d44:	305c      	adds	r0, #92	; 0x5c
 8003d46:	f7ff f9e3 	bl	8003110 <memset>
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <std+0x38>)
 8003d4c:	6224      	str	r4, [r4, #32]
 8003d4e:	6263      	str	r3, [r4, #36]	; 0x24
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <std+0x3c>)
 8003d52:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <std+0x40>)
 8003d56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <std+0x44>)
 8003d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	bf00      	nop
 8003d60:	080040a1 	.word	0x080040a1
 8003d64:	080040c3 	.word	0x080040c3
 8003d68:	080040fb 	.word	0x080040fb
 8003d6c:	0800411f 	.word	0x0800411f

08003d70 <_cleanup_r>:
 8003d70:	4901      	ldr	r1, [pc, #4]	; (8003d78 <_cleanup_r+0x8>)
 8003d72:	f000 b8af 	b.w	8003ed4 <_fwalk_reent>
 8003d76:	bf00      	nop
 8003d78:	08003cb1 	.word	0x08003cb1

08003d7c <__sfmoreglue>:
 8003d7c:	2268      	movs	r2, #104	; 0x68
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	1e4d      	subs	r5, r1, #1
 8003d82:	4355      	muls	r5, r2
 8003d84:	460e      	mov	r6, r1
 8003d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d8a:	f7ff fad5 	bl	8003338 <_malloc_r>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	b140      	cbz	r0, 8003da4 <__sfmoreglue+0x28>
 8003d92:	2100      	movs	r1, #0
 8003d94:	e9c0 1600 	strd	r1, r6, [r0]
 8003d98:	300c      	adds	r0, #12
 8003d9a:	60a0      	str	r0, [r4, #8]
 8003d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003da0:	f7ff f9b6 	bl	8003110 <memset>
 8003da4:	4620      	mov	r0, r4
 8003da6:	bd70      	pop	{r4, r5, r6, pc}

08003da8 <__sfp_lock_acquire>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__sfp_lock_acquire+0x8>)
 8003daa:	f000 b8b3 	b.w	8003f14 <__retarget_lock_acquire_recursive>
 8003dae:	bf00      	nop
 8003db0:	2000054d 	.word	0x2000054d

08003db4 <__sfp_lock_release>:
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <__sfp_lock_release+0x8>)
 8003db6:	f000 b8ae 	b.w	8003f16 <__retarget_lock_release_recursive>
 8003dba:	bf00      	nop
 8003dbc:	2000054d 	.word	0x2000054d

08003dc0 <__sinit_lock_acquire>:
 8003dc0:	4801      	ldr	r0, [pc, #4]	; (8003dc8 <__sinit_lock_acquire+0x8>)
 8003dc2:	f000 b8a7 	b.w	8003f14 <__retarget_lock_acquire_recursive>
 8003dc6:	bf00      	nop
 8003dc8:	2000054e 	.word	0x2000054e

08003dcc <__sinit_lock_release>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__sinit_lock_release+0x8>)
 8003dce:	f000 b8a2 	b.w	8003f16 <__retarget_lock_release_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	2000054e 	.word	0x2000054e

08003dd8 <__sinit>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	f7ff fff0 	bl	8003dc0 <__sinit_lock_acquire>
 8003de0:	69a3      	ldr	r3, [r4, #24]
 8003de2:	b11b      	cbz	r3, 8003dec <__sinit+0x14>
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de8:	f7ff bff0 	b.w	8003dcc <__sinit_lock_release>
 8003dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003df0:	6523      	str	r3, [r4, #80]	; 0x50
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <__sinit+0x68>)
 8003df4:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <__sinit+0x6c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dfa:	42a3      	cmp	r3, r4
 8003dfc:	bf08      	it	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	4620      	mov	r0, r4
 8003e02:	bf08      	it	eq
 8003e04:	61a3      	streq	r3, [r4, #24]
 8003e06:	f000 f81f 	bl	8003e48 <__sfp>
 8003e0a:	6060      	str	r0, [r4, #4]
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 f81b 	bl	8003e48 <__sfp>
 8003e12:	60a0      	str	r0, [r4, #8]
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 f817 	bl	8003e48 <__sfp>
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	60e0      	str	r0, [r4, #12]
 8003e20:	6860      	ldr	r0, [r4, #4]
 8003e22:	f7ff ff81 	bl	8003d28 <std>
 8003e26:	2201      	movs	r2, #1
 8003e28:	2109      	movs	r1, #9
 8003e2a:	68a0      	ldr	r0, [r4, #8]
 8003e2c:	f7ff ff7c 	bl	8003d28 <std>
 8003e30:	2202      	movs	r2, #2
 8003e32:	2112      	movs	r1, #18
 8003e34:	68e0      	ldr	r0, [r4, #12]
 8003e36:	f7ff ff77 	bl	8003d28 <std>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61a3      	str	r3, [r4, #24]
 8003e3e:	e7d1      	b.n	8003de4 <__sinit+0xc>
 8003e40:	080049c8 	.word	0x080049c8
 8003e44:	08003d71 	.word	0x08003d71

08003e48 <__sfp>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	f7ff ffac 	bl	8003da8 <__sfp_lock_acquire>
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <__sfp+0x84>)
 8003e52:	681e      	ldr	r6, [r3, #0]
 8003e54:	69b3      	ldr	r3, [r6, #24]
 8003e56:	b913      	cbnz	r3, 8003e5e <__sfp+0x16>
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7ff ffbd 	bl	8003dd8 <__sinit>
 8003e5e:	3648      	adds	r6, #72	; 0x48
 8003e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	d503      	bpl.n	8003e70 <__sfp+0x28>
 8003e68:	6833      	ldr	r3, [r6, #0]
 8003e6a:	b30b      	cbz	r3, 8003eb0 <__sfp+0x68>
 8003e6c:	6836      	ldr	r6, [r6, #0]
 8003e6e:	e7f7      	b.n	8003e60 <__sfp+0x18>
 8003e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e74:	b9d5      	cbnz	r5, 8003eac <__sfp+0x64>
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <__sfp+0x88>)
 8003e78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e7c:	60e3      	str	r3, [r4, #12]
 8003e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e80:	f000 f847 	bl	8003f12 <__retarget_lock_init_recursive>
 8003e84:	f7ff ff96 	bl	8003db4 <__sfp_lock_release>
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e94:	6025      	str	r5, [r4, #0]
 8003e96:	61a5      	str	r5, [r4, #24]
 8003e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e9c:	f7ff f938 	bl	8003110 <memset>
 8003ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eac:	3468      	adds	r4, #104	; 0x68
 8003eae:	e7d9      	b.n	8003e64 <__sfp+0x1c>
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f7ff ff62 	bl	8003d7c <__sfmoreglue>
 8003eb8:	4604      	mov	r4, r0
 8003eba:	6030      	str	r0, [r6, #0]
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d1d5      	bne.n	8003e6c <__sfp+0x24>
 8003ec0:	f7ff ff78 	bl	8003db4 <__sfp_lock_release>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	e7ee      	b.n	8003ea8 <__sfp+0x60>
 8003eca:	bf00      	nop
 8003ecc:	080049c8 	.word	0x080049c8
 8003ed0:	ffff0001 	.word	0xffff0001

08003ed4 <_fwalk_reent>:
 8003ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed8:	4606      	mov	r6, r0
 8003eda:	4688      	mov	r8, r1
 8003edc:	2700      	movs	r7, #0
 8003ede:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8003eea:	d505      	bpl.n	8003ef8 <_fwalk_reent+0x24>
 8003eec:	6824      	ldr	r4, [r4, #0]
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d1f7      	bne.n	8003ee2 <_fwalk_reent+0xe>
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef8:	89ab      	ldrh	r3, [r5, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d907      	bls.n	8003f0e <_fwalk_reent+0x3a>
 8003efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f02:	3301      	adds	r3, #1
 8003f04:	d003      	beq.n	8003f0e <_fwalk_reent+0x3a>
 8003f06:	4629      	mov	r1, r5
 8003f08:	4630      	mov	r0, r6
 8003f0a:	47c0      	blx	r8
 8003f0c:	4307      	orrs	r7, r0
 8003f0e:	3568      	adds	r5, #104	; 0x68
 8003f10:	e7e9      	b.n	8003ee6 <_fwalk_reent+0x12>

08003f12 <__retarget_lock_init_recursive>:
 8003f12:	4770      	bx	lr

08003f14 <__retarget_lock_acquire_recursive>:
 8003f14:	4770      	bx	lr

08003f16 <__retarget_lock_release_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <__swhatbuf_r>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	460e      	mov	r6, r1
 8003f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f20:	4614      	mov	r4, r2
 8003f22:	2900      	cmp	r1, #0
 8003f24:	461d      	mov	r5, r3
 8003f26:	b096      	sub	sp, #88	; 0x58
 8003f28:	da08      	bge.n	8003f3c <__swhatbuf_r+0x24>
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f30:	602a      	str	r2, [r5, #0]
 8003f32:	061a      	lsls	r2, r3, #24
 8003f34:	d410      	bmi.n	8003f58 <__swhatbuf_r+0x40>
 8003f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3a:	e00e      	b.n	8003f5a <__swhatbuf_r+0x42>
 8003f3c:	466a      	mov	r2, sp
 8003f3e:	f000 f915 	bl	800416c <_fstat_r>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	dbf1      	blt.n	8003f2a <__swhatbuf_r+0x12>
 8003f46:	9a01      	ldr	r2, [sp, #4]
 8003f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f50:	425a      	negs	r2, r3
 8003f52:	415a      	adcs	r2, r3
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	e7ee      	b.n	8003f36 <__swhatbuf_r+0x1e>
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	b016      	add	sp, #88	; 0x58
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f64 <__smakebuf_r>:
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f68:	079d      	lsls	r5, r3, #30
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	d507      	bpl.n	8003f80 <__smakebuf_r+0x1c>
 8003f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6163      	str	r3, [r4, #20]
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	466a      	mov	r2, sp
 8003f82:	ab01      	add	r3, sp, #4
 8003f84:	f7ff ffc8 	bl	8003f18 <__swhatbuf_r>
 8003f88:	9900      	ldr	r1, [sp, #0]
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff f9d3 	bl	8003338 <_malloc_r>
 8003f92:	b948      	cbnz	r0, 8003fa8 <__smakebuf_r+0x44>
 8003f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d4ef      	bmi.n	8003f7c <__smakebuf_r+0x18>
 8003f9c:	f023 0303 	bic.w	r3, r3, #3
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7e3      	b.n	8003f70 <__smakebuf_r+0xc>
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <__smakebuf_r+0x7c>)
 8003faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	9b00      	ldr	r3, [sp, #0]
 8003fb8:	6120      	str	r0, [r4, #16]
 8003fba:	6163      	str	r3, [r4, #20]
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	b15b      	cbz	r3, 8003fd8 <__smakebuf_r+0x74>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc6:	f000 f8e3 	bl	8004190 <_isatty_r>
 8003fca:	b128      	cbz	r0, 8003fd8 <__smakebuf_r+0x74>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	89a0      	ldrh	r0, [r4, #12]
 8003fda:	4305      	orrs	r5, r0
 8003fdc:	81a5      	strh	r5, [r4, #12]
 8003fde:	e7cd      	b.n	8003f7c <__smakebuf_r+0x18>
 8003fe0:	08003d71 	.word	0x08003d71

08003fe4 <memchr>:
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	b2c9      	uxtb	r1, r1
 8003fea:	4402      	add	r2, r0
 8003fec:	4293      	cmp	r3, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	d101      	bne.n	8003ff6 <memchr+0x12>
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e003      	b.n	8003ffe <memchr+0x1a>
 8003ff6:	7804      	ldrb	r4, [r0, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	428c      	cmp	r4, r1
 8003ffc:	d1f6      	bne.n	8003fec <memchr+0x8>
 8003ffe:	bd10      	pop	{r4, pc}

08004000 <__malloc_lock>:
 8004000:	4801      	ldr	r0, [pc, #4]	; (8004008 <__malloc_lock+0x8>)
 8004002:	f7ff bf87 	b.w	8003f14 <__retarget_lock_acquire_recursive>
 8004006:	bf00      	nop
 8004008:	2000054c 	.word	0x2000054c

0800400c <__malloc_unlock>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__malloc_unlock+0x8>)
 800400e:	f7ff bf82 	b.w	8003f16 <__retarget_lock_release_recursive>
 8004012:	bf00      	nop
 8004014:	2000054c 	.word	0x2000054c

08004018 <_raise_r>:
 8004018:	291f      	cmp	r1, #31
 800401a:	b538      	push	{r3, r4, r5, lr}
 800401c:	4604      	mov	r4, r0
 800401e:	460d      	mov	r5, r1
 8004020:	d904      	bls.n	800402c <_raise_r+0x14>
 8004022:	2316      	movs	r3, #22
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800402e:	b112      	cbz	r2, 8004036 <_raise_r+0x1e>
 8004030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004034:	b94b      	cbnz	r3, 800404a <_raise_r+0x32>
 8004036:	4620      	mov	r0, r4
 8004038:	f000 f830 	bl	800409c <_getpid_r>
 800403c:	462a      	mov	r2, r5
 800403e:	4601      	mov	r1, r0
 8004040:	4620      	mov	r0, r4
 8004042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004046:	f000 b817 	b.w	8004078 <_kill_r>
 800404a:	2b01      	cmp	r3, #1
 800404c:	d00a      	beq.n	8004064 <_raise_r+0x4c>
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	d103      	bne.n	800405a <_raise_r+0x42>
 8004052:	2316      	movs	r3, #22
 8004054:	6003      	str	r3, [r0, #0]
 8004056:	2001      	movs	r0, #1
 8004058:	e7e7      	b.n	800402a <_raise_r+0x12>
 800405a:	2400      	movs	r4, #0
 800405c:	4628      	mov	r0, r5
 800405e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004062:	4798      	blx	r3
 8004064:	2000      	movs	r0, #0
 8004066:	e7e0      	b.n	800402a <_raise_r+0x12>

08004068 <raise>:
 8004068:	4b02      	ldr	r3, [pc, #8]	; (8004074 <raise+0xc>)
 800406a:	4601      	mov	r1, r0
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f7ff bfd3 	b.w	8004018 <_raise_r>
 8004072:	bf00      	nop
 8004074:	20000014 	.word	0x20000014

08004078 <_kill_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	2300      	movs	r3, #0
 800407c:	4d06      	ldr	r5, [pc, #24]	; (8004098 <_kill_r+0x20>)
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	f7fd f94d 	bl	8001324 <_kill>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d102      	bne.n	8004094 <_kill_r+0x1c>
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	b103      	cbz	r3, 8004094 <_kill_r+0x1c>
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	bf00      	nop
 8004098:	20000550 	.word	0x20000550

0800409c <_getpid_r>:
 800409c:	f7fd b93b 	b.w	8001316 <_getpid>

080040a0 <__sread>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	460c      	mov	r4, r1
 80040a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a8:	f000 f894 	bl	80041d4 <_read_r>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	bfab      	itete	ge
 80040b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040b2:	89a3      	ldrhlt	r3, [r4, #12]
 80040b4:	181b      	addge	r3, r3, r0
 80040b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040ba:	bfac      	ite	ge
 80040bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80040be:	81a3      	strhlt	r3, [r4, #12]
 80040c0:	bd10      	pop	{r4, pc}

080040c2 <__swrite>:
 80040c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c6:	461f      	mov	r7, r3
 80040c8:	898b      	ldrh	r3, [r1, #12]
 80040ca:	4605      	mov	r5, r0
 80040cc:	05db      	lsls	r3, r3, #23
 80040ce:	460c      	mov	r4, r1
 80040d0:	4616      	mov	r6, r2
 80040d2:	d505      	bpl.n	80040e0 <__swrite+0x1e>
 80040d4:	2302      	movs	r3, #2
 80040d6:	2200      	movs	r2, #0
 80040d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040dc:	f000 f868 	bl	80041b0 <_lseek_r>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	4632      	mov	r2, r6
 80040e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	4628      	mov	r0, r5
 80040ec:	463b      	mov	r3, r7
 80040ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f6:	f000 b817 	b.w	8004128 <_write_r>

080040fa <__sseek>:
 80040fa:	b510      	push	{r4, lr}
 80040fc:	460c      	mov	r4, r1
 80040fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004102:	f000 f855 	bl	80041b0 <_lseek_r>
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	bf15      	itete	ne
 800410c:	6560      	strne	r0, [r4, #84]	; 0x54
 800410e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004116:	81a3      	strheq	r3, [r4, #12]
 8004118:	bf18      	it	ne
 800411a:	81a3      	strhne	r3, [r4, #12]
 800411c:	bd10      	pop	{r4, pc}

0800411e <__sclose>:
 800411e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004122:	f000 b813 	b.w	800414c <_close_r>
	...

08004128 <_write_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	2200      	movs	r2, #0
 8004132:	4d05      	ldr	r5, [pc, #20]	; (8004148 <_write_r+0x20>)
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fd f92b 	bl	8001392 <_write>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_write_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_write_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	20000550 	.word	0x20000550

0800414c <_close_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	2300      	movs	r3, #0
 8004150:	4d05      	ldr	r5, [pc, #20]	; (8004168 <_close_r+0x1c>)
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fd f937 	bl	80013ca <_close>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_close_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_close_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000550 	.word	0x20000550

0800416c <_fstat_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	2300      	movs	r3, #0
 8004170:	4d06      	ldr	r5, [pc, #24]	; (800418c <_fstat_r+0x20>)
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	f7fd f931 	bl	80013e0 <_fstat>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	d102      	bne.n	8004188 <_fstat_r+0x1c>
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	b103      	cbz	r3, 8004188 <_fstat_r+0x1c>
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20000550 	.word	0x20000550

08004190 <_isatty_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	2300      	movs	r3, #0
 8004194:	4d05      	ldr	r5, [pc, #20]	; (80041ac <_isatty_r+0x1c>)
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	f7fd f92f 	bl	80013fe <_isatty>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_isatty_r+0x1a>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_isatty_r+0x1a>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20000550 	.word	0x20000550

080041b0 <_lseek_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4604      	mov	r4, r0
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	2200      	movs	r2, #0
 80041ba:	4d05      	ldr	r5, [pc, #20]	; (80041d0 <_lseek_r+0x20>)
 80041bc:	602a      	str	r2, [r5, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	f7fd f927 	bl	8001412 <_lseek>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_lseek_r+0x1e>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_lseek_r+0x1e>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20000550 	.word	0x20000550

080041d4 <_read_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	2200      	movs	r2, #0
 80041de:	4d05      	ldr	r5, [pc, #20]	; (80041f4 <_read_r+0x20>)
 80041e0:	602a      	str	r2, [r5, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f7fd f8b8 	bl	8001358 <_read>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_read_r+0x1e>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_read_r+0x1e>
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	20000550 	.word	0x20000550

080041f8 <_init>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr

08004204 <_fini>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr
