
game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800495c  0800495c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800495c  0800495c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000078  080049dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080049dc  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9a4  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d06  00000000  00000000  0002ba45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000189ff  00000000  00000000  0002e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d6e4  00000000  00000000  00046cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000879c5  00000000  00000000  000543db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000dbda0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000af0  00000000  00000000  000dbdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003928  00000000  00000000  000dc8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004044 	.word	0x08004044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004044 	.word	0x08004044

0800014c <is_at_bottom_boundary>:
    int16_t y;
    MovementDirection movement_direction;
} Circle;


static inline bool is_at_bottom_boundary(const Circle *const circle) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    return circle->y + SSD1306_BALL_RADIUS >= SSD1306_HEIGHT;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800015a:	2b35      	cmp	r3, #53	; 0x35
 800015c:	bfcc      	ite	gt
 800015e:	2301      	movgt	r3, #1
 8000160:	2300      	movle	r3, #0
 8000162:	b2db      	uxtb	r3, r3
}
 8000164:	4618      	mov	r0, r3
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
	...

08000170 <is_move_right_pressed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool is_move_right_pressed(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_SET;
 8000174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <is_move_right_pressed+0x20>)
 800017a:	f001 fbcd 	bl	8001918 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	2b01      	cmp	r3, #1
 8000182:	bf0c      	ite	eq
 8000184:	2301      	moveq	r3, #1
 8000186:	2300      	movne	r3, #0
 8000188:	b2db      	uxtb	r3, r3
}
 800018a:	4618      	mov	r0, r3
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010c00 	.word	0x40010c00

08000194 <is_move_left_pressed>:

bool is_move_left_pressed(void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET;
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <is_move_left_pressed+0x1c>)
 800019c:	f001 fbbc 	bl	8001918 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	bf0c      	ite	eq
 80001a6:	2301      	moveq	r3, #1
 80001a8:	2300      	movne	r3, #0
 80001aa:	b2db      	uxtb	r3, r3
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <update_paddle_right>:

void update_paddle_right(Paddle *const p_paddle) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
    if (is_move_right_pressed()) {
 80001bc:	f7ff ffd8 	bl	8000170 <is_move_right_pressed>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d008      	beq.n	80001d8 <update_paddle_right+0x24>
        ++p_paddle->x;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	3301      	adds	r3, #1
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	b21a      	sxth	r2, r3
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	801a      	strh	r2, [r3, #0]
    }
}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <update_paddle_left>:

void update_paddle_left(Paddle *const p_paddle) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    if (is_move_left_pressed()) {
 80001e8:	f7ff ffd4 	bl	8000194 <is_move_left_pressed>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d008      	beq.n	8000204 <update_paddle_left+0x24>
        --p_paddle->x;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	3b01      	subs	r3, #1
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	b21a      	sxth	r2, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	801a      	strh	r2, [r3, #0]
    }
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <move_paddle_by_input>:


void move_paddle_by_input(Paddle *const p_paddle) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	update_paddle_right(p_paddle);
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f7ff ffcd 	bl	80001b4 <update_paddle_right>
	update_paddle_left(p_paddle);
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f7ff ffe0 	bl	80001e0 <update_paddle_left>
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <show_game_over_screen>:

void show_game_over_screen(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
    ssd1306_Clear();
 800022e:	f000 fd0f 	bl	8000c50 <ssd1306_Clear>
    ssd1306_SetCursor(0, 0);
 8000232:	2100      	movs	r1, #0
 8000234:	2000      	movs	r0, #0
 8000236:	f000 fce9 	bl	8000c0c <ssd1306_SetCursor>
    FontDef font = Font_7x10;
 800023a:	4a09      	ldr	r2, [pc, #36]	; (8000260 <show_game_over_screen+0x38>)
 800023c:	463b      	mov	r3, r7
 800023e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000242:	e883 0003 	stmia.w	r3, {r0, r1}
    ssd1306_WriteString("THE GAME IS OVER!", font);
 8000246:	463b      	mov	r3, r7
 8000248:	e893 0006 	ldmia.w	r3, {r1, r2}
 800024c:	4805      	ldr	r0, [pc, #20]	; (8000264 <show_game_over_screen+0x3c>)
 800024e:	f000 fcb7 	bl	8000bc0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000252:	f000 fa4f 	bl	80006f4 <ssd1306_UpdateScreen>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000000 	.word	0x20000000
 8000264:	0800405c 	.word	0x0800405c

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f001 f865 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f861 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f000 f8fd 	bl	8000474 <MX_GPIO_Init>
  MX_I2C1_Init();
 800027a:	f000 f8a3 	bl	80003c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800027e:	f000 f8cf 	bl	8000420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000282:	f000 f99d 	bl	80005c0 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8000286:	f000 fcd9 	bl	8000c3c <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800028a:	f000 fce1 	bl	8000c50 <ssd1306_Clear>
  ssd1306_SetColor(White);
 800028e:	2001      	movs	r0, #1
 8000290:	f000 f986 	bl	80005a0 <ssd1306_SetColor>

  Circle circle = {
 8000294:	4a26      	ldr	r2, [pc, #152]	; (8000330 <main+0xc8>)
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800029e:	6018      	str	r0, [r3, #0]
 80002a0:	3304      	adds	r3, #4
 80002a2:	8019      	strh	r1, [r3, #0]
		  .y = SSD1306_BALL_START_Y,
		  .movement_direction.vertical_direction = DOWN,
		  .movement_direction.horizontal_direction = STRAIGHT,
  };

  Paddle paddle = {
 80002a4:	4b23      	ldr	r3, [pc, #140]	; (8000334 <main+0xcc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	607b      	str	r3, [r7, #4]
		  .x = SSD1306_PADDLE_START_X,
		  .y = SSD1306_PADDLE_Y,
  };
  Circle *const p_circle = &circle;
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	617b      	str	r3, [r7, #20]
  Paddle *const p_paddle = &paddle;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	613b      	str	r3, [r7, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (is_at_bottom_boundary(p_circle)) {
 80002b4:	6978      	ldr	r0, [r7, #20]
 80002b6:	f7ff ff49 	bl	800014c <is_at_bottom_boundary>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <main+0x5e>
		  show_game_over_screen();
 80002c0:	f7ff ffb2 	bl	8000228 <show_game_over_screen>
		  continue;
 80002c4:	e033      	b.n	800032e <main+0xc6>
	  }

	  move_paddle_by_input(p_paddle);
 80002c6:	6938      	ldr	r0, [r7, #16]
 80002c8:	f7ff ffa0 	bl	800020c <move_paddle_by_input>

	  update_circle_on_wall_hit(p_circle);
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	f000 fe58 	bl	8000f82 <update_circle_on_wall_hit>
	  update_circle_position(p_circle);
 80002d2:	6978      	ldr	r0, [r7, #20]
 80002d4:	f000 fdc0 	bl	8000e58 <update_circle_position>

	  ssd1306_Clear();
 80002d8:	f000 fcba 	bl	8000c50 <ssd1306_Clear>
	  ssd1306_FillCircle(circle.x,  circle.y, SSD1306_BALL_RADIUS);
 80002dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80002e0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80002e4:	220a      	movs	r2, #10
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fb42 	bl	8000970 <ssd1306_FillCircle>

	  ssd1306_DrawHorizontalLine(paddle.x, paddle.y, SSD1306_PADDLE_LENGTH);
 80002ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002f0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002f4:	2214      	movs	r2, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fa9c 	bl	8000834 <ssd1306_DrawHorizontalLine>
	  if ((circle.x + SSD1306_BALL_RADIUS >= paddle.x && circle.x - SSD1306_BALL_RADIUS <= paddle.x + SSD1306_PADDLE_LENGTH) &&
 80002fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000300:	330a      	adds	r3, #10
 8000302:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000306:	4293      	cmp	r3, r2
 8000308:	db0f      	blt.n	800032a <main+0xc2>
 800030a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800030e:	f1a3 020a 	sub.w	r2, r3, #10
 8000312:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000316:	3314      	adds	r3, #20
 8000318:	429a      	cmp	r2, r3
 800031a:	dc06      	bgt.n	800032a <main+0xc2>
	      (circle.y + SSD1306_BALL_RADIUS >= SSD1306_PADDLE_Y)) {
 800031c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
	  if ((circle.x + SSD1306_BALL_RADIUS >= paddle.x && circle.x - SSD1306_BALL_RADIUS <= paddle.x + SSD1306_PADDLE_LENGTH) &&
 8000320:	2b31      	cmp	r3, #49	; 0x31
 8000322:	dd02      	ble.n	800032a <main+0xc2>
	      update_circle_on_line_hit(p_circle);
 8000324:	6978      	ldr	r0, [r7, #20]
 8000326:	f000 fe3a 	bl	8000f9e <update_circle_on_line_hit>
	  }

	  ssd1306_UpdateScreen();
 800032a:	f000 f9e3 	bl	80006f4 <ssd1306_UpdateScreen>
	  if (is_at_bottom_boundary(p_circle)) {
 800032e:	e7c1      	b.n	80002b4 <main+0x4c>
 8000330:	08004070 	.word	0x08004070
 8000334:	08004078 	.word	0x08004078

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fe08 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f002 f8d3 	bl	800252c <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f8e6 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fb40 	bl	8002a30 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f8d1 	bl	800055c <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <MX_I2C1_Init+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <MX_I2C1_Init+0x58>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_I2C1_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_I2C1_Init+0x50>)
 80003e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_I2C1_Init+0x50>)
 8000402:	f001 fab9 	bl	8001978 <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 f8a6 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000094 	.word	0x20000094
 8000418:	40005400 	.word	0x40005400
 800041c:	00061a80 	.word	0x00061a80

08000420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <MX_USART1_UART_Init+0x50>)
 8000428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000458:	f002 fc78 	bl	8002d4c <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000462:	f000 f87b 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000e8 	.word	0x200000e8
 8000470:	40013800 	.word	0x40013800

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000488:	4b30      	ldr	r3, [pc, #192]	; (800054c <MX_GPIO_Init+0xd8>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a2f      	ldr	r2, [pc, #188]	; (800054c <MX_GPIO_Init+0xd8>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <MX_GPIO_Init+0xd8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0310 	and.w	r3, r3, #16
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0xd8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a29      	ldr	r2, [pc, #164]	; (800054c <MX_GPIO_Init+0xd8>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_GPIO_Init+0xd8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_GPIO_Init+0xd8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a23      	ldr	r2, [pc, #140]	; (800054c <MX_GPIO_Init+0xd8>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_GPIO_Init+0xd8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0xd8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1d      	ldr	r2, [pc, #116]	; (800054c <MX_GPIO_Init+0xd8>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0xd8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ee:	4818      	ldr	r0, [pc, #96]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004f0:	f001 fa29 	bl	8001946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <MX_GPIO_Init+0xdc>)
 800050e:	f001 f87f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <MX_GPIO_Init+0xe0>)
 8000526:	f001 f873 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800052a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_GPIO_Init+0xe4>)
 8000540:	f001 f866 	bl	8001610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	40011000 	.word	0x40011000
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>

08000566 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8000586:	2380      	movs	r3, #128	; 0x80
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8000594:	2340      	movs	r3, #64	; 0x40
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <ssd1306_SetColor+0x1c>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	7153      	strb	r3, [r2, #5]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000130 	.word	0x20000130

080005c0 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	2205      	movs	r2, #5
 80005ca:	2178      	movs	r1, #120	; 0x78
 80005cc:	4846      	ldr	r0, [pc, #280]	; (80006e8 <ssd1306_Init+0x128>)
 80005ce:	f001 fc11 	bl	8001df4 <HAL_I2C_IsDeviceReady>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d004      	beq.n	80005e2 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 80005d8:	4b44      	ldr	r3, [pc, #272]	; (80006ec <ssd1306_Init+0x12c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e07f      	b.n	80006e2 <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 ff0c 	bl	8001400 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 80005e8:	20ae      	movs	r0, #174	; 0xae
 80005ea:	f000 fb3d 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80005ee:	20d5      	movs	r0, #213	; 0xd5
 80005f0:	f000 fb3a 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80005f4:	20f0      	movs	r0, #240	; 0xf0
 80005f6:	f000 fb37 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 80005fa:	20a8      	movs	r0, #168	; 0xa8
 80005fc:	f000 fb34 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8000600:	f7ff ffb8 	bl	8000574 <height>
 8000604:	4603      	mov	r3, r0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	3b01      	subs	r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fb2b 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8000612:	20d3      	movs	r0, #211	; 0xd3
 8000614:	f000 fb28 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fb25 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800061e:	2040      	movs	r0, #64	; 0x40
 8000620:	f000 fb22 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8000624:	208d      	movs	r0, #141	; 0x8d
 8000626:	f000 fb1f 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 800062a:	2014      	movs	r0, #20
 800062c:	f000 fb1c 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8000630:	2020      	movs	r0, #32
 8000632:	f000 fb19 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fb16 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 800063c:	20a0      	movs	r0, #160	; 0xa0
 800063e:	f000 fb13 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8000642:	20c0      	movs	r0, #192	; 0xc0
 8000644:	f000 fb10 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8000648:	20da      	movs	r0, #218	; 0xda
 800064a:	f000 fb0d 	bl	8000c68 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <ssd1306_Init+0x130>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 8000656:	2012      	movs	r0, #18
 8000658:	f000 fb06 	bl	8000c68 <ssd1306_WriteCommand>
 800065c:	e006      	b.n	800066c <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <ssd1306_Init+0x130>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d102      	bne.n	800066c <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 8000666:	2002      	movs	r0, #2
 8000668:	f000 fafe 	bl	8000c68 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 800066c:	2081      	movs	r0, #129	; 0x81
 800066e:	f000 fafb 	bl	8000c68 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <ssd1306_Init+0x130>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 800067a:	20cf      	movs	r0, #207	; 0xcf
 800067c:	f000 faf4 	bl	8000c68 <ssd1306_WriteCommand>
 8000680:	e006      	b.n	8000690 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <ssd1306_Init+0x130>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d102      	bne.n	8000690 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 800068a:	208f      	movs	r0, #143	; 0x8f
 800068c:	f000 faec 	bl	8000c68 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8000690:	20d9      	movs	r0, #217	; 0xd9
 8000692:	f000 fae9 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8000696:	20f1      	movs	r0, #241	; 0xf1
 8000698:	f000 fae6 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 800069c:	20db      	movs	r0, #219	; 0xdb
 800069e:	f000 fae3 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f000 fae0 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 80006a8:	20a4      	movs	r0, #164	; 0xa4
 80006aa:	f000 fadd 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 80006ae:	20a6      	movs	r0, #166	; 0xa6
 80006b0:	f000 fada 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 80006b4:	202e      	movs	r0, #46	; 0x2e
 80006b6:	f000 fad7 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 80006ba:	20af      	movs	r0, #175	; 0xaf
 80006bc:	f000 fad4 	bl	8000c68 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <ssd1306_Init+0x12c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <ssd1306_Init+0x12c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <ssd1306_Init+0x12c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 80006d2:	f000 fabd 	bl	8000c50 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80006d6:	f000 f80d 	bl	80006f4 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <ssd1306_Init+0x12c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 80006e0:	2301      	movs	r3, #1
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000130 	.word	0x20000130
 80006f0:	20000538 	.word	0x20000538

080006f4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e019      	b.n	8000734 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	3b50      	subs	r3, #80	; 0x50
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 faae 	bl	8000c68 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 faab 	bl	8000c68 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8000712:	2010      	movs	r0, #16
 8000714:	f000 faa8 	bl	8000c68 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	01db      	lsls	r3, r3, #7
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <ssd1306_UpdateScreen+0x50>)
 800071e:	189c      	adds	r4, r3, r2
 8000720:	f7ff ff21 	bl	8000566 <width>
 8000724:	4603      	mov	r3, r0
 8000726:	4619      	mov	r1, r3
 8000728:	4620      	mov	r0, r4
 800072a:	f000 fab5 	bl	8000c98 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3301      	adds	r3, #1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d9e2      	bls.n	8000700 <ssd1306_UpdateScreen+0xc>
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000138 	.word	0x20000138

08000748 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <ssd1306_DrawPixel+0xe4>)
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	b29c      	uxth	r4, r3
 8000762:	f7ff ff0e 	bl	8000582 <ssd1306_GetWidth>
 8000766:	4603      	mov	r3, r0
 8000768:	429c      	cmp	r4, r3
 800076a:	d25a      	bcs.n	8000822 <ssd1306_DrawPixel+0xda>
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	b29c      	uxth	r4, r3
 8000770:	f7ff ff0e 	bl	8000590 <ssd1306_GetHeight>
 8000774:	4603      	mov	r3, r0
 8000776:	429c      	cmp	r4, r3
 8000778:	d253      	bcs.n	8000822 <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <ssd1306_DrawPixel+0xe4>)
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d121      	bne.n	80007da <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8000796:	79fc      	ldrb	r4, [r7, #7]
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	b2dd      	uxtb	r5, r3
 800079e:	462e      	mov	r6, r5
 80007a0:	f7ff fee1 	bl	8000566 <width>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4618      	mov	r0, r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	fb06 f303 	mul.w	r3, r6, r3
 80007ae:	4423      	add	r3, r4
 80007b0:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <ssd1306_DrawPixel+0xe8>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b259      	sxtb	r1, r3
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	462b      	mov	r3, r5
 80007cc:	fb00 f303 	mul.w	r3, r0, r3
 80007d0:	4413      	add	r3, r2
 80007d2:	b2c9      	uxtb	r1, r1
 80007d4:	4a16      	ldr	r2, [pc, #88]	; (8000830 <ssd1306_DrawPixel+0xe8>)
 80007d6:	54d1      	strb	r1, [r2, r3]
 80007d8:	e024      	b.n	8000824 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 80007da:	79fc      	ldrb	r4, [r7, #7]
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b2dd      	uxtb	r5, r3
 80007e2:	462e      	mov	r6, r5
 80007e4:	f7ff febf 	bl	8000566 <width>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4618      	mov	r0, r3
 80007ec:	4603      	mov	r3, r0
 80007ee:	fb06 f303 	mul.w	r3, r6, r3
 80007f2:	4423      	add	r3, r4
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <ssd1306_DrawPixel+0xe8>)
 80007f6:	5cd3      	ldrb	r3, [r2, r3]
 80007f8:	b25a      	sxtb	r2, r3
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2101      	movs	r1, #1
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4013      	ands	r3, r2
 800080e:	b259      	sxtb	r1, r3
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	462b      	mov	r3, r5
 8000814:	fb00 f303 	mul.w	r3, r0, r3
 8000818:	4413      	add	r3, r2
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <ssd1306_DrawPixel+0xe8>)
 800081e:	54d1      	strb	r1, [r2, r3]
 8000820:	e000      	b.n	8000824 <ssd1306_DrawPixel+0xdc>
		return;
 8000822:	bf00      	nop
	}
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	bf00      	nop
 800082c:	20000130 	.word	0x20000130
 8000830:	20000138 	.word	0x20000138

08000834 <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 8000846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f2c0 8086 	blt.w	800095c <ssd1306_DrawHorizontalLine+0x128>
 8000850:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000854:	f7ff fe8e 	bl	8000574 <height>
 8000858:	4603      	mov	r3, r0
 800085a:	429c      	cmp	r4, r3
 800085c:	da7e      	bge.n	800095c <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 800085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da06      	bge.n	8000874 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 8000866:	887a      	ldrh	r2, [r7, #2]
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4413      	add	r3, r2
 800086c:	b29b      	uxth	r3, r3
 800086e:	807b      	strh	r3, [r7, #2]
    x = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 8000874:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800087c:	18d4      	adds	r4, r2, r3
 800087e:	f7ff fe72 	bl	8000566 <width>
 8000882:	4603      	mov	r3, r0
 8000884:	429c      	cmp	r4, r3
 8000886:	dd07      	ble.n	8000898 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 8000888:	f7ff fe6d 	bl	8000566 <width>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b29b      	uxth	r3, r3
 8000896:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 8000898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800089c:	2b00      	cmp	r3, #0
 800089e:	dd5f      	ble.n	8000960 <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <ssd1306_DrawHorizontalLine+0x134>)
 80008a2:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 80008a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a8:	10db      	asrs	r3, r3, #3
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	461c      	mov	r4, r3
 80008ae:	f7ff fe5a 	bl	8000566 <width>
 80008b2:	4603      	mov	r3, r0
 80008b4:	fb04 f303 	mul.w	r3, r4, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 80008c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	2201      	movs	r2, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <ssd1306_DrawHorizontalLine+0x138>)
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d034      	beq.n	800094a <ssd1306_DrawHorizontalLine+0x116>
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	dc3e      	bgt.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d013      	beq.n	8000910 <ssd1306_DrawHorizontalLine+0xdc>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d13a      	bne.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 80008ec:	e007      	b.n	80008fe <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60fa      	str	r2, [r7, #12]
 80008f4:	7819      	ldrb	r1, [r3, #0]
 80008f6:	7afa      	ldrb	r2, [r7, #11]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	701a      	strb	r2, [r3, #0]
    	while (length--)
 80008fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000902:	b29a      	uxth	r2, r3
 8000904:	3a01      	subs	r2, #1
 8000906:	b292      	uxth	r2, r2
 8000908:	807a      	strh	r2, [r7, #2]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1ef      	bne.n	80008ee <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 800090e:	e028      	b.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 8000910:	7afb      	ldrb	r3, [r7, #11]
 8000912:	43db      	mvns	r3, r3
 8000914:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 8000916:	e007      	b.n	8000928 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60fa      	str	r2, [r7, #12]
 800091e:	7819      	ldrb	r1, [r3, #0]
 8000920:	7afa      	ldrb	r2, [r7, #11]
 8000922:	400a      	ands	r2, r1
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800092c:	b29a      	uxth	r2, r3
 800092e:	3a01      	subs	r2, #1
 8000930:	b292      	uxth	r2, r2
 8000932:	807a      	strh	r2, [r7, #2]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ef      	bne.n	8000918 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8000938:	e013      	b.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	60fa      	str	r2, [r7, #12]
 8000940:	7819      	ldrb	r1, [r3, #0]
 8000942:	7afa      	ldrb	r2, [r7, #11]
 8000944:	404a      	eors	r2, r1
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	701a      	strb	r2, [r3, #0]
    	while (length--)
 800094a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800094e:	b29a      	uxth	r2, r3
 8000950:	3a01      	subs	r2, #1
 8000952:	b292      	uxth	r2, r2
 8000954:	807a      	strh	r2, [r7, #2]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1ef      	bne.n	800093a <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 800095a:	e002      	b.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 8000960:	bf00      	nop
  }
}
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	20000138 	.word	0x20000138
 800096c:	20000130 	.word	0x20000130

08000970 <ssd1306_FillCircle>:
	ssd1306_DrawPixel(x0, y0 - radius);
}


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	460b      	mov	r3, r1
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 8000982:	2300      	movs	r3, #0
 8000984:	81fb      	strh	r3, [r7, #14]
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	f1c3 0301 	rsb	r3, r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 8000994:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000998:	2b00      	cmp	r3, #0
 800099a:	da0d      	bge.n	80009b8 <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	3301      	adds	r3, #1
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	81fb      	strh	r3, [r7, #14]
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	3303      	adds	r3, #3
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	817b      	strh	r3, [r7, #10]
 80009b6:	e015      	b.n	80009e4 <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29b      	uxth	r3, r3
 80009be:	81fb      	strh	r3, [r7, #14]
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	897b      	ldrh	r3, [r7, #10]
 80009c8:	4413      	add	r3, r2
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	89bb      	ldrh	r3, [r7, #12]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	81bb      	strh	r3, [r7, #12]
 80009d4:	89bb      	ldrh	r3, [r7, #12]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3305      	adds	r3, #5
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	89fb      	ldrh	r3, [r7, #14]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b218      	sxth	r0, r3
 80009ee:	88ba      	ldrh	r2, [r7, #4]
 80009f0:	89bb      	ldrh	r3, [r7, #12]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b219      	sxth	r1, r3
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	f7ff ff17 	bl	8000834 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 8000a06:	88fa      	ldrh	r2, [r7, #6]
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b218      	sxth	r0, r3
 8000a10:	88ba      	ldrh	r2, [r7, #4]
 8000a12:	89bb      	ldrh	r3, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b219      	sxth	r1, r3
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	f7ff ff06 	bl	8000834 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 8000a28:	88fa      	ldrh	r2, [r7, #6]
 8000a2a:	89bb      	ldrh	r3, [r7, #12]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b218      	sxth	r0, r3
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b219      	sxth	r1, r3
 8000a3c:	89bb      	ldrh	r3, [r7, #12]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	f7ff fef5 	bl	8000834 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 8000a4a:	88fa      	ldrh	r2, [r7, #6]
 8000a4c:	89bb      	ldrh	r3, [r7, #12]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b218      	sxth	r0, r3
 8000a54:	88ba      	ldrh	r2, [r7, #4]
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	4413      	add	r3, r2
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b219      	sxth	r1, r3
 8000a5e:	89bb      	ldrh	r3, [r7, #12]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	f7ff fee4 	bl	8000834 <ssd1306_DrawHorizontalLine>




  } while (x < y);
 8000a6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	db8d      	blt.n	8000994 <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b218      	sxth	r0, r3
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fed0 	bl	8000834 <ssd1306_DrawHorizontalLine>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	e883 0006 	stmia.w	r3, {r1, r2}
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000aac:	f7ff fd5b 	bl	8000566 <width>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	793b      	ldrb	r3, [r7, #4]
 8000abc:	440b      	add	r3, r1
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dd0a      	ble.n	8000ad8 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8000ac2:	f7ff fd57 	bl	8000574 <height>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000acc:	885b      	ldrh	r3, [r3, #2]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	797b      	ldrb	r3, [r7, #5]
 8000ad2:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dc01      	bgt.n	8000adc <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e06a      	b.n	8000bb2 <ssd1306_WriteChar+0x116>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	e059      	b.n	8000b96 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3b20      	subs	r3, #32
 8000ae8:	7979      	ldrb	r1, [r7, #5]
 8000aea:	fb01 f303 	mul.w	r3, r1, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	440b      	add	r3, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	e041      	b.n	8000b86 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d011      	beq.n	8000b36 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2d8      	uxtb	r0, r3
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b22:	885b      	ldrh	r3, [r3, #2]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f7ff fe0a 	bl	8000748 <ssd1306_DrawPixel>
 8000b34:	e024      	b.n	8000b80 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b38:	795b      	ldrb	r3, [r3, #5]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b48:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b2d8      	uxtb	r0, r3
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	f7ff fdee 	bl	8000748 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000b7e:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	3301      	adds	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	793b      	ldrb	r3, [r7, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d3b8      	bcc.n	8000b02 <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	797b      	ldrb	r3, [r7, #5]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d3a0      	bcc.n	8000ae2 <ssd1306_WriteChar+0x46>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000ba2:	881a      	ldrh	r2, [r3, #0]
 8000ba4:	793b      	ldrb	r3, [r7, #4]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <ssd1306_WriteChar+0x120>)
 8000bae:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000130 	.word	0x20000130

08000bc0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8000bce:	e012      	b.n	8000bf6 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7818      	ldrb	r0, [r3, #0]
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000bda:	f7ff ff5f 	bl	8000a9c <ssd1306_WriteChar>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d002      	beq.n	8000bf0 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	e008      	b.n	8000c02 <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e8      	bne.n	8000bd0 <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	781b      	ldrb	r3, [r3, #0]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ssd1306_SetCursor+0x2c>)
 8000c22:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <ssd1306_SetCursor+0x2c>)
 8000c2a:	805a      	strh	r2, [r3, #2]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000130 	.word	0x20000130

08000c3c <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8000c40:	20a1      	movs	r0, #161	; 0xa1
 8000c42:	f000 f811 	bl	8000c68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8000c46:	20c8      	movs	r0, #200	; 0xc8
 8000c48:	f000 f80e 	bl	8000c68 <ssd1306_WriteCommand>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8000c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4802      	ldr	r0, [pc, #8]	; (8000c64 <ssd1306_Clear+0x14>)
 8000c5c:	f002 f97e 	bl	8002f5c <memset>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000138 	.word	0x20000138

08000c68 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000c72:	230a      	movs	r3, #10
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	2301      	movs	r3, #1
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2200      	movs	r2, #0
 8000c82:	2178      	movs	r1, #120	; 0x78
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <ssd1306_WriteCommand+0x2c>)
 8000c86:	f000 ffbb 	bl	8001c00 <HAL_I2C_Mem_Write>
#endif
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000094 	.word	0x20000094

08000c98 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	2240      	movs	r2, #64	; 0x40
 8000cb4:	2178      	movs	r1, #120	; 0x78
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <ssd1306_WriteData+0x2c>)
 8000cb8:	f000 ffa2 	bl	8001c00 <HAL_I2C_Mem_Write>
#endif
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000094 	.word	0x20000094

08000cc8 <is_at_bottom_boundary>:
static inline bool is_at_bottom_boundary(const Circle *const circle) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    return circle->y + SSD1306_BALL_RADIUS >= SSD1306_HEIGHT;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cd6:	2b35      	cmp	r3, #53	; 0x35
 8000cd8:	bfcc      	ite	gt
 8000cda:	2301      	movgt	r3, #1
 8000cdc:	2300      	movle	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <is_at_top_boundary>:

static inline bool is_at_top_boundary(const Circle *const circle) {
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    return circle->y - SSD1306_BALL_RADIUS <= 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf8:	2b0a      	cmp	r3, #10
 8000cfa:	bfd4      	ite	le
 8000cfc:	2301      	movle	r3, #1
 8000cfe:	2300      	movgt	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <is_at_vertical_boundary>:

static inline bool is_at_vertical_boundary(const Circle *const circle) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    return is_at_bottom_boundary(circle) || is_at_top_boundary(circle);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ffd7 	bl	8000cc8 <is_at_bottom_boundary>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <is_at_vertical_boundary+0x20>
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffe2 	bl	8000cea <is_at_top_boundary>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <is_at_vertical_boundary+0x24>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <is_at_vertical_boundary+0x26>
 8000d30:	2300      	movs	r3, #0
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <is_at_left_boundary>:

static inline bool is_at_left_boundary(const Circle *const circle) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return circle->x <= SSD1306_BALL_RADIUS;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	bfd4      	ite	le
 8000d52:	2301      	movle	r3, #1
 8000d54:	2300      	movgt	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <is_at_right_boundary>:

static inline bool is_at_right_boundary(const Circle *const circle) {
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
    return circle->x >= SSD1306_WIDTH - SSD1306_BALL_RADIUS;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	2b75      	cmp	r3, #117	; 0x75
 8000d72:	bfcc      	ite	gt
 8000d74:	2301      	movgt	r3, #1
 8000d76:	2300      	movle	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <is_at_horizontal_boundary>:

static inline bool is_at_horizontal_boundary(const Circle *const circle) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    return is_at_left_boundary(circle) || is_at_right_boundary(circle);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffd7 	bl	8000d40 <is_at_left_boundary>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <is_at_horizontal_boundary+0x20>
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe2 	bl	8000d62 <is_at_right_boundary>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <is_at_horizontal_boundary+0x24>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <is_at_horizontal_boundary+0x26>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <update_circle_x>:
 *      Author: borsuk
 */
#include "ssd1306_circle.h"


static inline void update_circle_x(Circle *const circle) {
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HorizontalDirection horizontal_direction = circle->movement_direction.horizontal_direction;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	73fb      	strb	r3, [r7, #15]

    switch(horizontal_direction) {
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d01a      	beq.n	8000e02 <update_circle_x+0x4a>
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	dc19      	bgt.n	8000e04 <update_circle_x+0x4c>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <update_circle_x+0x22>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d00a      	beq.n	8000dee <update_circle_x+0x36>
            --circle->x;
            break;
        case STRAIGHT:
            break;
    }
}
 8000dd8:	e014      	b.n	8000e04 <update_circle_x+0x4c>
            ++circle->x;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	801a      	strh	r2, [r3, #0]
            break;
 8000dec:	e00a      	b.n	8000e04 <update_circle_x+0x4c>
            --circle->x;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	801a      	strh	r2, [r3, #0]
            break;
 8000e00:	e000      	b.n	8000e04 <update_circle_x+0x4c>
            break;
 8000e02:	bf00      	nop
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <update_circle_y>:

static inline void update_circle_y(Circle *const circle) {
 8000e0e:	b480      	push	{r7}
 8000e10:	b085      	sub	sp, #20
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	VerticalDirection vertical_direction = circle->movement_direction.vertical_direction;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	791b      	ldrb	r3, [r3, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]

    switch(vertical_direction) {
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00b      	beq.n	8000e3a <update_circle_y+0x2c>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d113      	bne.n	8000e4e <update_circle_y+0x40>
        case DOWN:
            ++circle->y;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	805a      	strh	r2, [r3, #2]
            break;
 8000e38:	e009      	b.n	8000e4e <update_circle_y+0x40>
        case UP:
            --circle->y;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	3b01      	subs	r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	805a      	strh	r2, [r3, #2]
            break;
 8000e4c:	bf00      	nop
    }
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <update_circle_position>:

void inline update_circle_position(Circle *const circle) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	update_circle_x(circle);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ffa9 	bl	8000db8 <update_circle_x>
	update_circle_y(circle);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffd1 	bl	8000e0e <update_circle_y>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <toggle_circle_y_mode>:

static inline void toggle_circle_y_mode(VerticalDirection *const vertical_direction) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	*vertical_direction = !(*vertical_direction);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <toggle_circle_x_mode>:

static inline void toggle_circle_x_mode(HorizontalDirection *const horizontal_direction) {
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	*horizontal_direction = !(*horizontal_direction);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf0c      	ite	eq
 8000eaa:	2301      	moveq	r3, #1
 8000eac:	2300      	movne	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <assign_random_horizontal_direction>:

void assign_random_horizontal_direction(HorizontalDirection *const horizontal_direction) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	 srand(HAL_GetTick());
 8000ec8:	f000 fa90 	bl	80013ec <HAL_GetTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f84c 	bl	8002f6c <srand>
    *horizontal_direction = (HorizontalDirection)(rand() % 3);
 8000ed4:	f002 f878 	bl	8002fc8 <rand>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <assign_random_horizontal_direction+0x3c>)
 8000edc:	fb83 3102 	smull	r3, r1, r3, r2
 8000ee0:	17d3      	asrs	r3, r2, #31
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	440b      	add	r3, r1
 8000eea:	1ad1      	subs	r1, r2, r3
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	55555556 	.word	0x55555556

08000f00 <update_vertical_movement_on_hit>:

static inline void update_vertical_movement_on_hit(Circle *const circle) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    	toggle_circle_y_mode(&circle->movement_direction.vertical_direction);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ffb1 	bl	8000e74 <toggle_circle_y_mode>
        assign_random_horizontal_direction(&circle->movement_direction.horizontal_direction);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3305      	adds	r3, #5
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffd2 	bl	8000ec0 <assign_random_horizontal_direction>

}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <update_horizontal_movement_on_hit>:

static inline void update_horizontal_movement_on_hit(Circle *const circle) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    	toggle_circle_x_mode(&circle->movement_direction.horizontal_direction);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3305      	adds	r3, #5
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffb2 	bl	8000e9a <toggle_circle_x_mode>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <update_vertical_movement_on_wall_hit>:

static inline void update_vertical_movement_on_wall_hit(Circle *const circle) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
    if (is_at_vertical_boundary(circle)) {
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fee0 	bl	8000d0c <is_at_vertical_boundary>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <update_vertical_movement_on_wall_hit+0x1a>
    	update_vertical_movement_on_hit(circle);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffd4 	bl	8000f00 <update_vertical_movement_on_hit>
    }
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <update_horizontal_movement_on_wall_hit>:

static inline void update_horizontal_movement_on_wall_hit(Circle *const circle) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    if (is_at_horizontal_boundary(circle)) {
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff0b 	bl	8000d84 <is_at_horizontal_boundary>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <update_horizontal_movement_on_wall_hit+0x1a>
    	update_horizontal_movement_on_hit(circle);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffd5 	bl	8000f24 <update_horizontal_movement_on_hit>
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <update_circle_on_wall_hit>:

inline void update_circle_on_wall_hit(Circle *const circle) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	update_vertical_movement_on_wall_hit(circle);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffd7 	bl	8000f3e <update_vertical_movement_on_wall_hit>
	update_horizontal_movement_on_wall_hit(circle);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffe5 	bl	8000f60 <update_horizontal_movement_on_wall_hit>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <update_circle_on_line_hit>:

inline void update_circle_on_line_hit(Circle *const circle) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
    update_vertical_movement_on_hit(circle);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffaa 	bl	8000f00 <update_vertical_movement_on_hit>
    update_horizontal_movement_on_hit(circle);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffb9 	bl	8000f24 <update_horizontal_movement_on_hit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_MspInit+0x40>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_MspInit+0x40>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_MspInit+0x40>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_MspInit+0x40>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_MspInit+0x40>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_MspInit+0x40>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_I2C_MspInit+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d123      	bne.n	8001068 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_I2C_MspInit+0x74>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <HAL_I2C_MspInit+0x74>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_I2C_MspInit+0x74>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <HAL_I2C_MspInit+0x78>)
 800104c:	f000 fae0 	bl	8001610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_I2C_MspInit+0x74>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_I2C_MspInit+0x74>)
 8001056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_I2C_MspInit+0x74>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40005400 	.word	0x40005400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010c00 	.word	0x40010c00

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_UART_MspInit+0x8c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d131      	bne.n	8001100 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_UART_MspInit+0x90>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1a      	ldr	r2, [pc, #104]	; (800110c <HAL_UART_MspInit+0x90>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_UART_MspInit+0x90>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_UART_MspInit+0x90>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_UART_MspInit+0x90>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_UART_MspInit+0x90>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010e2:	f000 fa95 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010fc:	f000 fa88 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115a:	f000 f935 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}

08001162 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <_kill>:

int _kill(int pid, int sig)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800117a:	f001 fec5 	bl	8002f08 <__errno>
 800117e:	4603      	mov	r3, r0
 8001180:	2216      	movs	r2, #22
 8001182:	601a      	str	r2, [r3, #0]
  return -1;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_exit>:

void _exit (int status)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffe7 	bl	8001170 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011a2:	e7fe      	b.n	80011a2 <_exit+0x12>

080011a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e00a      	b.n	80011cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b6:	f3af 8000 	nop.w
 80011ba:	4601      	mov	r1, r0
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	b2ca      	uxtb	r2, r1
 80011c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf0      	blt.n	80011b6 <_read+0x12>
  }

  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e009      	b.n	8001204 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbf1      	blt.n	80011f0 <_write+0x12>
  }
  return len;
 800120c:	687b      	ldr	r3, [r7, #4]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_close>:

int _close(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123c:	605a      	str	r2, [r3, #4]
  return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <_isatty>:

int _isatty(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f001 fe2e 	bl	8002f08 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20005000 	.word	0x20005000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	2000053c 	.word	0x2000053c
 80012e0:	20000558 	.word	0x20000558

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff fff8 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f6:	490c      	ldr	r1, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800130c:	4c09      	ldr	r4, [pc, #36]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f001 fdfb 	bl	8002f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7fe ffa3 	bl	8000268 <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800132c:	08004964 	.word	0x08004964
  ldr r2, =_sbss
 8001330:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001334:	20000554 	.word	0x20000554

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f92b 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fe30 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f935 	bl	80015f6 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f000 f90b 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000010 	.word	0x20000010
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <HAL_IncTick+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000010 	.word	0x20000010
 80013e8:	20000540 	.word	0x20000540

080013ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <HAL_GetTick+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000540 	.word	0x20000540

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff0 	bl	80013ec <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_Delay+0x44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffe0 	bl	80013ec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000010 	.word	0x20000010

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff49 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb0 	bl	8001564 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e169      	b.n	80018f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001624:	2201      	movs	r2, #1
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8158 	bne.w	80018f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a9a      	ldr	r2, [pc, #616]	; (80018b0 <HAL_GPIO_Init+0x2a0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d05e      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800164c:	4a98      	ldr	r2, [pc, #608]	; (80018b0 <HAL_GPIO_Init+0x2a0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d875      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001652:	4a98      	ldr	r2, [pc, #608]	; (80018b4 <HAL_GPIO_Init+0x2a4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d058      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001658:	4a96      	ldr	r2, [pc, #600]	; (80018b4 <HAL_GPIO_Init+0x2a4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d86f      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800165e:	4a96      	ldr	r2, [pc, #600]	; (80018b8 <HAL_GPIO_Init+0x2a8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d052      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001664:	4a94      	ldr	r2, [pc, #592]	; (80018b8 <HAL_GPIO_Init+0x2a8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d869      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800166a:	4a94      	ldr	r2, [pc, #592]	; (80018bc <HAL_GPIO_Init+0x2ac>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d04c      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001670:	4a92      	ldr	r2, [pc, #584]	; (80018bc <HAL_GPIO_Init+0x2ac>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d863      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001676:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d046      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800167c:	4a90      	ldr	r2, [pc, #576]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d85d      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d82a      	bhi.n	80016dc <HAL_GPIO_Init+0xcc>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d859      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_GPIO_Init+0x80>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800170b 	.word	0x0800170b
 8001694:	080016e5 	.word	0x080016e5
 8001698:	080016f7 	.word	0x080016f7
 800169c:	08001739 	.word	0x08001739
 80016a0:	0800173f 	.word	0x0800173f
 80016a4:	0800173f 	.word	0x0800173f
 80016a8:	0800173f 	.word	0x0800173f
 80016ac:	0800173f 	.word	0x0800173f
 80016b0:	0800173f 	.word	0x0800173f
 80016b4:	0800173f 	.word	0x0800173f
 80016b8:	0800173f 	.word	0x0800173f
 80016bc:	0800173f 	.word	0x0800173f
 80016c0:	0800173f 	.word	0x0800173f
 80016c4:	0800173f 	.word	0x0800173f
 80016c8:	0800173f 	.word	0x0800173f
 80016cc:	0800173f 	.word	0x0800173f
 80016d0:	0800173f 	.word	0x0800173f
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	08001701 	.word	0x08001701
 80016dc:	4a79      	ldr	r2, [pc, #484]	; (80018c4 <HAL_GPIO_Init+0x2b4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e2:	e02c      	b.n	800173e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e029      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e024      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	3308      	adds	r3, #8
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e01f      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	330c      	adds	r3, #12
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e01a      	b.n	8001740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001712:	2304      	movs	r3, #4
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e013      	b.n	8001740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	611a      	str	r2, [r3, #16]
          break;
 800172a:	e009      	b.n	8001740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	615a      	str	r2, [r3, #20]
          break;
 8001736:	e003      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x130>
          break;
 800173e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d801      	bhi.n	800174a <HAL_GPIO_Init+0x13a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	e001      	b.n	800174e <HAL_GPIO_Init+0x13e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d802      	bhi.n	800175c <HAL_GPIO_Init+0x14c>
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x152>
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3b08      	subs	r3, #8
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	210f      	movs	r1, #15
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	6a39      	ldr	r1, [r7, #32]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	431a      	orrs	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80b1 	beq.w	80018f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a8:	4a48      	ldr	r2, [pc, #288]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <HAL_GPIO_Init+0x2c0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d013      	beq.n	80017fc <HAL_GPIO_Init+0x1ec>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1e8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3e      	ldr	r2, [pc, #248]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1e4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <HAL_GPIO_Init+0x2cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e004      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017fc:	2300      	movs	r3, #0
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	f002 0203 	and.w	r2, r2, #3
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	4093      	lsls	r3, r2
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180e:	492f      	ldr	r1, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	492c      	ldr	r1, [pc, #176]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4928      	ldr	r1, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4922      	ldr	r1, [pc, #136]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	491e      	ldr	r1, [pc, #120]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4918      	ldr	r1, [pc, #96]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4914      	ldr	r1, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d021      	beq.n	80018e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e021      	b.n	80018f2 <HAL_GPIO_Init+0x2e2>
 80018ae:	bf00      	nop
 80018b0:	10320000 	.word	0x10320000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10220000 	.word	0x10220000
 80018bc:	10210000 	.word	0x10210000
 80018c0:	10120000 	.word	0x10120000
 80018c4:	10110000 	.word	0x10110000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40011400 	.word	0x40011400
 80018e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4909      	ldr	r1, [pc, #36]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f ae8e 	bne.w	8001624 <HAL_GPIO_Init+0x14>
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	372c      	adds	r7, #44	; 0x2c
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001962:	e003      	b.n	800196c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e12b      	b.n	8001be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fb2e 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019dc:	f001 f970 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <HAL_I2C_Init+0x274>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d807      	bhi.n	80019fc <HAL_I2C_Init+0x84>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a80      	ldr	r2, [pc, #512]	; (8001bf0 <HAL_I2C_Init+0x278>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x92>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a7d      	ldr	r2, [pc, #500]	; (8001bf4 <HAL_I2C_Init+0x27c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0e7      	b.n	8001be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a78      	ldr	r2, [pc, #480]	; (8001bf8 <HAL_I2C_Init+0x280>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_I2C_Init+0x274>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d802      	bhi.n	8001a4c <HAL_I2C_Init+0xd4>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	e009      	b.n	8001a60 <HAL_I2C_Init+0xe8>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_I2C_Init+0x284>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	495c      	ldr	r1, [pc, #368]	; (8001bec <HAL_I2C_Init+0x274>)
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	d819      	bhi.n	8001ab4 <HAL_I2C_Init+0x13c>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e59      	subs	r1, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a94:	400b      	ands	r3, r1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <HAL_I2C_Init+0x138>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e59      	subs	r1, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	e051      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e04f      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <HAL_I2C_Init+0x168>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e58      	subs	r0, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e012      	b.n	8001b06 <HAL_I2C_Init+0x18e>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e58      	subs	r0, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	0099      	lsls	r1, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Init+0x196>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e022      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <HAL_I2C_Init+0x1bc>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1e58      	subs	r0, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	440b      	add	r3, r1
 8001b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	0099      	lsls	r1, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6911      	ldr	r1, [r2, #16]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68d2      	ldr	r2, [r2, #12]
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	000186a0 	.word	0x000186a0
 8001bf0:	001e847f 	.word	0x001e847f
 8001bf4:	003d08ff 	.word	0x003d08ff
 8001bf8:	431bde83 	.word	0x431bde83
 8001bfc:	10624dd3 	.word	0x10624dd3

08001c00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	817b      	strh	r3, [r7, #10]
 8001c12:	460b      	mov	r3, r1
 8001c14:	813b      	strh	r3, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c1a:	f7ff fbe7 	bl	80013ec <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	f040 80d9 	bne.w	8001de0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2319      	movs	r3, #25
 8001c34:	2201      	movs	r2, #1
 8001c36:	496d      	ldr	r1, [pc, #436]	; (8001dec <HAL_I2C_Mem_Write+0x1ec>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fa9f 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0cc      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Mem_Write+0x56>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0c5      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d007      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2221      	movs	r2, #33	; 0x21
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_I2C_Mem_Write+0x1f0>)
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cbe:	88f8      	ldrh	r0, [r7, #6]
 8001cc0:	893a      	ldrh	r2, [r7, #8]
 8001cc2:	8979      	ldrh	r1, [r7, #10]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f9be 	bl	8002050 <I2C_RequestMemoryWrite>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d052      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e081      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fb64 	bl	80023b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06b      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d11b      	bne.n	8001d80 <HAL_I2C_Mem_Write+0x180>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d017      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1aa      	bne.n	8001cde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fb57 	bl	8002440 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00d      	beq.n	8001db4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e016      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	00100002 	.word	0x00100002
 8001df0:	ffff0000 	.word	0xffff0000

08001df4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	460b      	mov	r3, r1
 8001e02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff faf2 	bl	80013ec <HAL_GetTick>
 8001e08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	f040 8111 	bne.w	800203e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2319      	movs	r3, #25
 8001e22:	2201      	movs	r2, #1
 8001e24:	4988      	ldr	r1, [pc, #544]	; (8002048 <HAL_I2C_IsDeviceReady+0x254>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f9a8 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
 8001e34:	e104      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2C_IsDeviceReady+0x50>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0fd      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d007      	beq.n	8001e6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2224      	movs	r2, #36	; 0x24
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_I2C_IsDeviceReady+0x258>)
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f966 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec4:	d103      	bne.n	8001ece <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0b6      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fa83 	bl	80013ec <HAL_GetTick>
 8001ee6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2301      	moveq	r3, #1
 8001f10:	2300      	movne	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f16:	e025      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f18:	f7ff fa68 	bl	80013ec <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d302      	bcc.n	8001f2e <HAL_I2C_IsDeviceReady+0x13a>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22a0      	movs	r2, #160	; 0xa0
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f6e:	d005      	beq.n	8001f7c <HAL_I2C_IsDeviceReady+0x188>
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_I2C_IsDeviceReady+0x188>
 8001f76:	7dbb      	ldrb	r3, [r7, #22]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0cd      	beq.n	8001f18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d129      	bne.n	8001fe6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2319      	movs	r3, #25
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4921      	ldr	r1, [pc, #132]	; (8002048 <HAL_I2C_IsDeviceReady+0x254>)
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8da 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e036      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e02c      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ffe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	490f      	ldr	r1, [pc, #60]	; (8002048 <HAL_I2C_IsDeviceReady+0x254>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8b6 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e012      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3301      	adds	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	f4ff af32 	bcc.w	8001e8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	00100002 	.word	0x00100002
 800204c:	ffff0000 	.word	0xffff0000

08002050 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
 8002062:	460b      	mov	r3, r1
 8002064:	813b      	strh	r3, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2200      	movs	r2, #0
 8002082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f878 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d103      	bne.n	80020aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e05f      	b.n	800216e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <I2C_RequestMemoryWrite+0x128>)
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8d3 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04c      	b.n	800216e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f95e 	bl	80023b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d107      	bne.n	8002112 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e02b      	b.n	800216e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800211c:	893b      	ldrh	r3, [r7, #8]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]
 8002126:	e021      	b.n	800216c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	b29b      	uxth	r3, r3
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	6a39      	ldr	r1, [r7, #32]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f938 	bl	80023b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b04      	cmp	r3, #4
 800214c:	d107      	bne.n	800215e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e005      	b.n	800216e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002162:	893b      	ldrh	r3, [r7, #8]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	00010002 	.word	0x00010002

0800217c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800218c:	e048      	b.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d044      	beq.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f929 	bl	80013ec <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d139      	bne.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	e00c      	b.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d116      	bne.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e023      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0xca>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	e00c      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d093      	beq.n	800218e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800227e:	e071      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d123      	bne.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e067      	b.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022de:	d041      	beq.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7ff f884 	bl	80013ec <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d302      	bcc.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d136      	bne.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e00b      	b.n	8002332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	43da      	mvns	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e021      	b.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10c      	bne.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e00b      	b.n	80023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f af6d 	bne.w	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023bc:	e034      	b.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f886 	bl	80024d0 <I2C_IsAcknowledgeFailed>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e034      	b.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d4:	d028      	beq.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7ff f809 	bl	80013ec <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11d      	bne.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d016      	beq.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d1c3      	bne.n	80023be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800244c:	e034      	b.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f83e 	bl	80024d0 <I2C_IsAcknowledgeFailed>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e034      	b.n	80024c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002464:	d028      	beq.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7fe ffc1 	bl	80013ec <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11d      	bne.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d016      	beq.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e007      	b.n	80024c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d1c3      	bne.n	800244e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d11b      	bne.n	8002520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f043 0204 	orr.w	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e272      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00c      	beq.n	8002572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d112      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
 8002564:	4b8c      	ldr	r3, [pc, #560]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06c      	beq.n	8002658 <HAL_RCC_OscConfig+0x12c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d168      	bne.n	8002658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e24c      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x76>
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e02e      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7a      	ldr	r2, [pc, #488]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0xbc>
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fef0 	bl	80013ec <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe feec 	bl	80013ec <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e200      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xe4>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fedc 	bl	80013ec <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fed8 	bl	80013ec <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1ec      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x10c>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002666:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1c0      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4939      	ldr	r1, [pc, #228]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x270>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe91 	bl	80013ec <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe8d 	bl	80013ec <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1a1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4927      	ldr	r1, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_OscConfig+0x270>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fe70 	bl	80013ec <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002710:	f7fe fe6c 	bl	80013ec <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e180      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe fe50 	bl	80013ec <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe fe4c 	bl	80013ec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e160      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 face 	bl	8002d10 <RCC_Delay>
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe fe36 	bl	80013ec <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fe32 	bl	80013ec <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e146      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	42420000 	.word	0x42420000
 80027a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e9      	bne.n	8002784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a6 	beq.w	800290a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b8b      	ldr	r3, [pc, #556]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b88      	ldr	r3, [pc, #544]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a87      	ldr	r2, [pc, #540]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b85      	ldr	r3, [pc, #532]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7e      	ldr	r2, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fdf3 	bl	80013ec <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fdef 	bl	80013ec <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e103      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b75      	ldr	r3, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x312>
 8002830:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e02d      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002846:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a69      	ldr	r2, [pc, #420]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a66      	ldr	r2, [pc, #408]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x356>
 8002868:	4b61      	ldr	r3, [pc, #388]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a60      	ldr	r2, [pc, #384]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a5a      	ldr	r2, [pc, #360]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a57      	ldr	r2, [pc, #348]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fda3 	bl	80013ec <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fd9f 	bl	80013ec <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0b1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ee      	beq.n	80028aa <HAL_RCC_OscConfig+0x37e>
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fd8d 	bl	80013ec <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fd89 	bl	80013ec <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e09b      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8087 	beq.w	8002a22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d061      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d146      	bne.n	80029b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fd5d 	bl	80013ec <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fd59 	bl	80013ec <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e06d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4921      	ldr	r1, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a19      	ldr	r1, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	430b      	orrs	r3, r1
 8002982:	491b      	ldr	r1, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fd2d 	bl	80013ec <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fd29 	bl	80013ec <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x46a>
 80029b4:	e035      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fd16 	bl	80013ec <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fd12 	bl	80013ec <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e026      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x498>
 80029e2:	e01e      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e019      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x500>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4965      	ldr	r1, [pc, #404]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fc64 	bl	80013ec <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fc60 	bl	80013ec <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1d0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fbc2 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080047e8 	.word	0x080047e8
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x30>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x36>
 8002c32:	e027      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	e027      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e004      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	613b      	str	r3, [r7, #16]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	613b      	str	r3, [r7, #16]
      break;
 8002c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8a:	693b      	ldr	r3, [r7, #16]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	08004800 	.word	0x08004800
 8002ca4:	08004810 	.word	0x08004810
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080047f8 	.word	0x080047f8

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080047f8 	.word	0x080047f8

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000008 	.word	0x20000008
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f982 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f82b 	bl	8002dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e26:	f023 030c 	bic.w	r3, r3, #12
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <UART_SetConfig+0x114>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff ff48 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	e002      	b.n	8002e62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff ff30 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8002e60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <UART_SetConfig+0x118>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	0119      	lsls	r1, r3, #4
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <UART_SetConfig+0x118>)
 8002e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2064      	movs	r0, #100	; 0x64
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <UART_SetConfig+0x118>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb8:	4419      	add	r1, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009a      	lsls	r2, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <UART_SetConfig+0x118>)
 8002ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2064      	movs	r0, #100	; 0x64
 8002eda:	fb00 f303 	mul.w	r3, r0, r3
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3332      	adds	r3, #50	; 0x32
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <UART_SetConfig+0x118>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40013800 	.word	0x40013800
 8002f04:	51eb851f 	.word	0x51eb851f

08002f08 <__errno>:
 8002f08:	4b01      	ldr	r3, [pc, #4]	; (8002f10 <__errno+0x8>)
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000014 	.word	0x20000014

08002f14 <__libc_init_array>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	2600      	movs	r6, #0
 8002f18:	4d0c      	ldr	r5, [pc, #48]	; (8002f4c <__libc_init_array+0x38>)
 8002f1a:	4c0d      	ldr	r4, [pc, #52]	; (8002f50 <__libc_init_array+0x3c>)
 8002f1c:	1b64      	subs	r4, r4, r5
 8002f1e:	10a4      	asrs	r4, r4, #2
 8002f20:	42a6      	cmp	r6, r4
 8002f22:	d109      	bne.n	8002f38 <__libc_init_array+0x24>
 8002f24:	f001 f88e 	bl	8004044 <_init>
 8002f28:	2600      	movs	r6, #0
 8002f2a:	4d0a      	ldr	r5, [pc, #40]	; (8002f54 <__libc_init_array+0x40>)
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <__libc_init_array+0x44>)
 8002f2e:	1b64      	subs	r4, r4, r5
 8002f30:	10a4      	asrs	r4, r4, #2
 8002f32:	42a6      	cmp	r6, r4
 8002f34:	d105      	bne.n	8002f42 <__libc_init_array+0x2e>
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3c:	4798      	blx	r3
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7ee      	b.n	8002f20 <__libc_init_array+0xc>
 8002f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f46:	4798      	blx	r3
 8002f48:	3601      	adds	r6, #1
 8002f4a:	e7f2      	b.n	8002f32 <__libc_init_array+0x1e>
 8002f4c:	0800495c 	.word	0x0800495c
 8002f50:	0800495c 	.word	0x0800495c
 8002f54:	0800495c 	.word	0x0800495c
 8002f58:	08004960 	.word	0x08004960

08002f5c <memset>:
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4402      	add	r2, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <srand>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <srand+0x44>)
 8002f70:	4604      	mov	r4, r0
 8002f72:	681d      	ldr	r5, [r3, #0]
 8002f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002f76:	b9b3      	cbnz	r3, 8002fa6 <srand+0x3a>
 8002f78:	2018      	movs	r0, #24
 8002f7a:	f000 f893 	bl	80030a4 <malloc>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	63a8      	str	r0, [r5, #56]	; 0x38
 8002f82:	b920      	cbnz	r0, 8002f8e <srand+0x22>
 8002f84:	2142      	movs	r1, #66	; 0x42
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <srand+0x48>)
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <srand+0x4c>)
 8002f8a:	f000 f85b 	bl	8003044 <__assert_func>
 8002f8e:	490b      	ldr	r1, [pc, #44]	; (8002fbc <srand+0x50>)
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <srand+0x54>)
 8002f92:	e9c0 1300 	strd	r1, r3, [r0]
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <srand+0x58>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	6083      	str	r3, [r0, #8]
 8002f9c:	230b      	movs	r3, #11
 8002f9e:	8183      	strh	r3, [r0, #12]
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002faa:	611c      	str	r4, [r3, #16]
 8002fac:	615a      	str	r2, [r3, #20]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	20000014 	.word	0x20000014
 8002fb4:	08004818 	.word	0x08004818
 8002fb8:	0800482f 	.word	0x0800482f
 8002fbc:	abcd330e 	.word	0xabcd330e
 8002fc0:	e66d1234 	.word	0xe66d1234
 8002fc4:	0005deec 	.word	0x0005deec

08002fc8 <rand>:
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <rand+0x5c>)
 8002fca:	b510      	push	{r4, lr}
 8002fcc:	681c      	ldr	r4, [r3, #0]
 8002fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fd0:	b9b3      	cbnz	r3, 8003000 <rand+0x38>
 8002fd2:	2018      	movs	r0, #24
 8002fd4:	f000 f866 	bl	80030a4 <malloc>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	63a0      	str	r0, [r4, #56]	; 0x38
 8002fdc:	b920      	cbnz	r0, 8002fe8 <rand+0x20>
 8002fde:	214e      	movs	r1, #78	; 0x4e
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <rand+0x60>)
 8002fe2:	4812      	ldr	r0, [pc, #72]	; (800302c <rand+0x64>)
 8002fe4:	f000 f82e 	bl	8003044 <__assert_func>
 8002fe8:	4911      	ldr	r1, [pc, #68]	; (8003030 <rand+0x68>)
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <rand+0x6c>)
 8002fec:	e9c0 1300 	strd	r1, r3, [r0]
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <rand+0x70>)
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6083      	str	r3, [r0, #8]
 8002ff6:	230b      	movs	r3, #11
 8002ff8:	8183      	strh	r3, [r0, #12]
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003000:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <rand+0x74>)
 8003004:	6920      	ldr	r0, [r4, #16]
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	4342      	muls	r2, r0
 800300a:	490d      	ldr	r1, [pc, #52]	; (8003040 <rand+0x78>)
 800300c:	fb01 2203 	mla	r2, r1, r3, r2
 8003010:	fba0 0101 	umull	r0, r1, r0, r1
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	eb42 0001 	adc.w	r0, r2, r1
 800301a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800301e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003022:	bd10      	pop	{r4, pc}
 8003024:	20000014 	.word	0x20000014
 8003028:	08004818 	.word	0x08004818
 800302c:	0800482f 	.word	0x0800482f
 8003030:	abcd330e 	.word	0xabcd330e
 8003034:	e66d1234 	.word	0xe66d1234
 8003038:	0005deec 	.word	0x0005deec
 800303c:	5851f42d 	.word	0x5851f42d
 8003040:	4c957f2d 	.word	0x4c957f2d

08003044 <__assert_func>:
 8003044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003046:	4614      	mov	r4, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <__assert_func+0x2c>)
 800304c:	4605      	mov	r5, r0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68d8      	ldr	r0, [r3, #12]
 8003052:	b14c      	cbz	r4, 8003068 <__assert_func+0x24>
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <__assert_func+0x30>)
 8003056:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800305a:	9100      	str	r1, [sp, #0]
 800305c:	462b      	mov	r3, r5
 800305e:	4906      	ldr	r1, [pc, #24]	; (8003078 <__assert_func+0x34>)
 8003060:	f000 f80e 	bl	8003080 <fiprintf>
 8003064:	f000 fcc0 	bl	80039e8 <abort>
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <__assert_func+0x38>)
 800306a:	461c      	mov	r4, r3
 800306c:	e7f3      	b.n	8003056 <__assert_func+0x12>
 800306e:	bf00      	nop
 8003070:	20000014 	.word	0x20000014
 8003074:	0800488a 	.word	0x0800488a
 8003078:	08004897 	.word	0x08004897
 800307c:	080048c5 	.word	0x080048c5

08003080 <fiprintf>:
 8003080:	b40e      	push	{r1, r2, r3}
 8003082:	b503      	push	{r0, r1, lr}
 8003084:	4601      	mov	r1, r0
 8003086:	ab03      	add	r3, sp, #12
 8003088:	4805      	ldr	r0, [pc, #20]	; (80030a0 <fiprintf+0x20>)
 800308a:	f853 2b04 	ldr.w	r2, [r3], #4
 800308e:	6800      	ldr	r0, [r0, #0]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	f000 f913 	bl	80032bc <_vfiprintf_r>
 8003096:	b002      	add	sp, #8
 8003098:	f85d eb04 	ldr.w	lr, [sp], #4
 800309c:	b003      	add	sp, #12
 800309e:	4770      	bx	lr
 80030a0:	20000014 	.word	0x20000014

080030a4 <malloc>:
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <malloc+0xc>)
 80030a6:	4601      	mov	r1, r0
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	f000 b86b 	b.w	8003184 <_malloc_r>
 80030ae:	bf00      	nop
 80030b0:	20000014 	.word	0x20000014

080030b4 <_free_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4605      	mov	r5, r0
 80030b8:	2900      	cmp	r1, #0
 80030ba:	d040      	beq.n	800313e <_free_r+0x8a>
 80030bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030c0:	1f0c      	subs	r4, r1, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	18e4      	addlt	r4, r4, r3
 80030c8:	f000 fec0 	bl	8003e4c <__malloc_lock>
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <_free_r+0x8c>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	b933      	cbnz	r3, 80030e0 <_free_r+0x2c>
 80030d2:	6063      	str	r3, [r4, #4]
 80030d4:	6014      	str	r4, [r2, #0]
 80030d6:	4628      	mov	r0, r5
 80030d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030dc:	f000 bebc 	b.w	8003e58 <__malloc_unlock>
 80030e0:	42a3      	cmp	r3, r4
 80030e2:	d908      	bls.n	80030f6 <_free_r+0x42>
 80030e4:	6820      	ldr	r0, [r4, #0]
 80030e6:	1821      	adds	r1, r4, r0
 80030e8:	428b      	cmp	r3, r1
 80030ea:	bf01      	itttt	eq
 80030ec:	6819      	ldreq	r1, [r3, #0]
 80030ee:	685b      	ldreq	r3, [r3, #4]
 80030f0:	1809      	addeq	r1, r1, r0
 80030f2:	6021      	streq	r1, [r4, #0]
 80030f4:	e7ed      	b.n	80030d2 <_free_r+0x1e>
 80030f6:	461a      	mov	r2, r3
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b10b      	cbz	r3, 8003100 <_free_r+0x4c>
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	d9fa      	bls.n	80030f6 <_free_r+0x42>
 8003100:	6811      	ldr	r1, [r2, #0]
 8003102:	1850      	adds	r0, r2, r1
 8003104:	42a0      	cmp	r0, r4
 8003106:	d10b      	bne.n	8003120 <_free_r+0x6c>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	4401      	add	r1, r0
 800310c:	1850      	adds	r0, r2, r1
 800310e:	4283      	cmp	r3, r0
 8003110:	6011      	str	r1, [r2, #0]
 8003112:	d1e0      	bne.n	80030d6 <_free_r+0x22>
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4401      	add	r1, r0
 800311a:	6011      	str	r1, [r2, #0]
 800311c:	6053      	str	r3, [r2, #4]
 800311e:	e7da      	b.n	80030d6 <_free_r+0x22>
 8003120:	d902      	bls.n	8003128 <_free_r+0x74>
 8003122:	230c      	movs	r3, #12
 8003124:	602b      	str	r3, [r5, #0]
 8003126:	e7d6      	b.n	80030d6 <_free_r+0x22>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	1821      	adds	r1, r4, r0
 800312c:	428b      	cmp	r3, r1
 800312e:	bf01      	itttt	eq
 8003130:	6819      	ldreq	r1, [r3, #0]
 8003132:	685b      	ldreq	r3, [r3, #4]
 8003134:	1809      	addeq	r1, r1, r0
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	6054      	str	r4, [r2, #4]
 800313c:	e7cb      	b.n	80030d6 <_free_r+0x22>
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	20000544 	.word	0x20000544

08003144 <sbrk_aligned>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4e0e      	ldr	r6, [pc, #56]	; (8003180 <sbrk_aligned+0x3c>)
 8003148:	460c      	mov	r4, r1
 800314a:	6831      	ldr	r1, [r6, #0]
 800314c:	4605      	mov	r5, r0
 800314e:	b911      	cbnz	r1, 8003156 <sbrk_aligned+0x12>
 8003150:	f000 fb7a 	bl	8003848 <_sbrk_r>
 8003154:	6030      	str	r0, [r6, #0]
 8003156:	4621      	mov	r1, r4
 8003158:	4628      	mov	r0, r5
 800315a:	f000 fb75 	bl	8003848 <_sbrk_r>
 800315e:	1c43      	adds	r3, r0, #1
 8003160:	d00a      	beq.n	8003178 <sbrk_aligned+0x34>
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d007      	beq.n	800317c <sbrk_aligned+0x38>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 fb6a 	bl	8003848 <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d101      	bne.n	800317c <sbrk_aligned+0x38>
 8003178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800317c:	4620      	mov	r0, r4
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	20000548 	.word	0x20000548

08003184 <_malloc_r>:
 8003184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003188:	1ccd      	adds	r5, r1, #3
 800318a:	f025 0503 	bic.w	r5, r5, #3
 800318e:	3508      	adds	r5, #8
 8003190:	2d0c      	cmp	r5, #12
 8003192:	bf38      	it	cc
 8003194:	250c      	movcc	r5, #12
 8003196:	2d00      	cmp	r5, #0
 8003198:	4607      	mov	r7, r0
 800319a:	db01      	blt.n	80031a0 <_malloc_r+0x1c>
 800319c:	42a9      	cmp	r1, r5
 800319e:	d905      	bls.n	80031ac <_malloc_r+0x28>
 80031a0:	230c      	movs	r3, #12
 80031a2:	2600      	movs	r6, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4630      	mov	r0, r6
 80031a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ac:	4e2e      	ldr	r6, [pc, #184]	; (8003268 <_malloc_r+0xe4>)
 80031ae:	f000 fe4d 	bl	8003e4c <__malloc_lock>
 80031b2:	6833      	ldr	r3, [r6, #0]
 80031b4:	461c      	mov	r4, r3
 80031b6:	bb34      	cbnz	r4, 8003206 <_malloc_r+0x82>
 80031b8:	4629      	mov	r1, r5
 80031ba:	4638      	mov	r0, r7
 80031bc:	f7ff ffc2 	bl	8003144 <sbrk_aligned>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	4604      	mov	r4, r0
 80031c4:	d14d      	bne.n	8003262 <_malloc_r+0xde>
 80031c6:	6834      	ldr	r4, [r6, #0]
 80031c8:	4626      	mov	r6, r4
 80031ca:	2e00      	cmp	r6, #0
 80031cc:	d140      	bne.n	8003250 <_malloc_r+0xcc>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	4631      	mov	r1, r6
 80031d2:	4638      	mov	r0, r7
 80031d4:	eb04 0803 	add.w	r8, r4, r3
 80031d8:	f000 fb36 	bl	8003848 <_sbrk_r>
 80031dc:	4580      	cmp	r8, r0
 80031de:	d13a      	bne.n	8003256 <_malloc_r+0xd2>
 80031e0:	6821      	ldr	r1, [r4, #0]
 80031e2:	3503      	adds	r5, #3
 80031e4:	1a6d      	subs	r5, r5, r1
 80031e6:	f025 0503 	bic.w	r5, r5, #3
 80031ea:	3508      	adds	r5, #8
 80031ec:	2d0c      	cmp	r5, #12
 80031ee:	bf38      	it	cc
 80031f0:	250c      	movcc	r5, #12
 80031f2:	4638      	mov	r0, r7
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7ff ffa5 	bl	8003144 <sbrk_aligned>
 80031fa:	3001      	adds	r0, #1
 80031fc:	d02b      	beq.n	8003256 <_malloc_r+0xd2>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	442b      	add	r3, r5
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	e00e      	b.n	8003224 <_malloc_r+0xa0>
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	1b52      	subs	r2, r2, r5
 800320a:	d41e      	bmi.n	800324a <_malloc_r+0xc6>
 800320c:	2a0b      	cmp	r2, #11
 800320e:	d916      	bls.n	800323e <_malloc_r+0xba>
 8003210:	1961      	adds	r1, r4, r5
 8003212:	42a3      	cmp	r3, r4
 8003214:	6025      	str	r5, [r4, #0]
 8003216:	bf18      	it	ne
 8003218:	6059      	strne	r1, [r3, #4]
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	bf08      	it	eq
 800321e:	6031      	streq	r1, [r6, #0]
 8003220:	5162      	str	r2, [r4, r5]
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	4638      	mov	r0, r7
 8003226:	f104 060b 	add.w	r6, r4, #11
 800322a:	f000 fe15 	bl	8003e58 <__malloc_unlock>
 800322e:	f026 0607 	bic.w	r6, r6, #7
 8003232:	1d23      	adds	r3, r4, #4
 8003234:	1af2      	subs	r2, r6, r3
 8003236:	d0b6      	beq.n	80031a6 <_malloc_r+0x22>
 8003238:	1b9b      	subs	r3, r3, r6
 800323a:	50a3      	str	r3, [r4, r2]
 800323c:	e7b3      	b.n	80031a6 <_malloc_r+0x22>
 800323e:	6862      	ldr	r2, [r4, #4]
 8003240:	42a3      	cmp	r3, r4
 8003242:	bf0c      	ite	eq
 8003244:	6032      	streq	r2, [r6, #0]
 8003246:	605a      	strne	r2, [r3, #4]
 8003248:	e7ec      	b.n	8003224 <_malloc_r+0xa0>
 800324a:	4623      	mov	r3, r4
 800324c:	6864      	ldr	r4, [r4, #4]
 800324e:	e7b2      	b.n	80031b6 <_malloc_r+0x32>
 8003250:	4634      	mov	r4, r6
 8003252:	6876      	ldr	r6, [r6, #4]
 8003254:	e7b9      	b.n	80031ca <_malloc_r+0x46>
 8003256:	230c      	movs	r3, #12
 8003258:	4638      	mov	r0, r7
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	f000 fdfc 	bl	8003e58 <__malloc_unlock>
 8003260:	e7a1      	b.n	80031a6 <_malloc_r+0x22>
 8003262:	6025      	str	r5, [r4, #0]
 8003264:	e7de      	b.n	8003224 <_malloc_r+0xa0>
 8003266:	bf00      	nop
 8003268:	20000544 	.word	0x20000544

0800326c <__sfputc_r>:
 800326c:	6893      	ldr	r3, [r2, #8]
 800326e:	b410      	push	{r4}
 8003270:	3b01      	subs	r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	6093      	str	r3, [r2, #8]
 8003276:	da07      	bge.n	8003288 <__sfputc_r+0x1c>
 8003278:	6994      	ldr	r4, [r2, #24]
 800327a:	42a3      	cmp	r3, r4
 800327c:	db01      	blt.n	8003282 <__sfputc_r+0x16>
 800327e:	290a      	cmp	r1, #10
 8003280:	d102      	bne.n	8003288 <__sfputc_r+0x1c>
 8003282:	bc10      	pop	{r4}
 8003284:	f000 baf0 	b.w	8003868 <__swbuf_r>
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	1c58      	adds	r0, r3, #1
 800328c:	6010      	str	r0, [r2, #0]
 800328e:	7019      	strb	r1, [r3, #0]
 8003290:	4608      	mov	r0, r1
 8003292:	bc10      	pop	{r4}
 8003294:	4770      	bx	lr

08003296 <__sfputs_r>:
 8003296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003298:	4606      	mov	r6, r0
 800329a:	460f      	mov	r7, r1
 800329c:	4614      	mov	r4, r2
 800329e:	18d5      	adds	r5, r2, r3
 80032a0:	42ac      	cmp	r4, r5
 80032a2:	d101      	bne.n	80032a8 <__sfputs_r+0x12>
 80032a4:	2000      	movs	r0, #0
 80032a6:	e007      	b.n	80032b8 <__sfputs_r+0x22>
 80032a8:	463a      	mov	r2, r7
 80032aa:	4630      	mov	r0, r6
 80032ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b0:	f7ff ffdc 	bl	800326c <__sfputc_r>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d1f3      	bne.n	80032a0 <__sfputs_r+0xa>
 80032b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032bc <_vfiprintf_r>:
 80032bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c0:	460d      	mov	r5, r1
 80032c2:	4614      	mov	r4, r2
 80032c4:	4698      	mov	r8, r3
 80032c6:	4606      	mov	r6, r0
 80032c8:	b09d      	sub	sp, #116	; 0x74
 80032ca:	b118      	cbz	r0, 80032d4 <_vfiprintf_r+0x18>
 80032cc:	6983      	ldr	r3, [r0, #24]
 80032ce:	b90b      	cbnz	r3, 80032d4 <_vfiprintf_r+0x18>
 80032d0:	f000 fca8 	bl	8003c24 <__sinit>
 80032d4:	4b89      	ldr	r3, [pc, #548]	; (80034fc <_vfiprintf_r+0x240>)
 80032d6:	429d      	cmp	r5, r3
 80032d8:	d11b      	bne.n	8003312 <_vfiprintf_r+0x56>
 80032da:	6875      	ldr	r5, [r6, #4]
 80032dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032de:	07d9      	lsls	r1, r3, #31
 80032e0:	d405      	bmi.n	80032ee <_vfiprintf_r+0x32>
 80032e2:	89ab      	ldrh	r3, [r5, #12]
 80032e4:	059a      	lsls	r2, r3, #22
 80032e6:	d402      	bmi.n	80032ee <_vfiprintf_r+0x32>
 80032e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032ea:	f000 fd39 	bl	8003d60 <__retarget_lock_acquire_recursive>
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	d501      	bpl.n	80032f8 <_vfiprintf_r+0x3c>
 80032f4:	692b      	ldr	r3, [r5, #16]
 80032f6:	b9eb      	cbnz	r3, 8003334 <_vfiprintf_r+0x78>
 80032f8:	4629      	mov	r1, r5
 80032fa:	4630      	mov	r0, r6
 80032fc:	f000 fb06 	bl	800390c <__swsetup_r>
 8003300:	b1c0      	cbz	r0, 8003334 <_vfiprintf_r+0x78>
 8003302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003304:	07dc      	lsls	r4, r3, #31
 8003306:	d50e      	bpl.n	8003326 <_vfiprintf_r+0x6a>
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330c:	b01d      	add	sp, #116	; 0x74
 800330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003312:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <_vfiprintf_r+0x244>)
 8003314:	429d      	cmp	r5, r3
 8003316:	d101      	bne.n	800331c <_vfiprintf_r+0x60>
 8003318:	68b5      	ldr	r5, [r6, #8]
 800331a:	e7df      	b.n	80032dc <_vfiprintf_r+0x20>
 800331c:	4b79      	ldr	r3, [pc, #484]	; (8003504 <_vfiprintf_r+0x248>)
 800331e:	429d      	cmp	r5, r3
 8003320:	bf08      	it	eq
 8003322:	68f5      	ldreq	r5, [r6, #12]
 8003324:	e7da      	b.n	80032dc <_vfiprintf_r+0x20>
 8003326:	89ab      	ldrh	r3, [r5, #12]
 8003328:	0598      	lsls	r0, r3, #22
 800332a:	d4ed      	bmi.n	8003308 <_vfiprintf_r+0x4c>
 800332c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800332e:	f000 fd18 	bl	8003d62 <__retarget_lock_release_recursive>
 8003332:	e7e9      	b.n	8003308 <_vfiprintf_r+0x4c>
 8003334:	2300      	movs	r3, #0
 8003336:	9309      	str	r3, [sp, #36]	; 0x24
 8003338:	2320      	movs	r3, #32
 800333a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800333e:	2330      	movs	r3, #48	; 0x30
 8003340:	f04f 0901 	mov.w	r9, #1
 8003344:	f8cd 800c 	str.w	r8, [sp, #12]
 8003348:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003508 <_vfiprintf_r+0x24c>
 800334c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003350:	4623      	mov	r3, r4
 8003352:	469a      	mov	sl, r3
 8003354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003358:	b10a      	cbz	r2, 800335e <_vfiprintf_r+0xa2>
 800335a:	2a25      	cmp	r2, #37	; 0x25
 800335c:	d1f9      	bne.n	8003352 <_vfiprintf_r+0x96>
 800335e:	ebba 0b04 	subs.w	fp, sl, r4
 8003362:	d00b      	beq.n	800337c <_vfiprintf_r+0xc0>
 8003364:	465b      	mov	r3, fp
 8003366:	4622      	mov	r2, r4
 8003368:	4629      	mov	r1, r5
 800336a:	4630      	mov	r0, r6
 800336c:	f7ff ff93 	bl	8003296 <__sfputs_r>
 8003370:	3001      	adds	r0, #1
 8003372:	f000 80aa 	beq.w	80034ca <_vfiprintf_r+0x20e>
 8003376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003378:	445a      	add	r2, fp
 800337a:	9209      	str	r2, [sp, #36]	; 0x24
 800337c:	f89a 3000 	ldrb.w	r3, [sl]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a2 	beq.w	80034ca <_vfiprintf_r+0x20e>
 8003386:	2300      	movs	r3, #0
 8003388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800338c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003390:	f10a 0a01 	add.w	sl, sl, #1
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	9307      	str	r3, [sp, #28]
 8003398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800339c:	931a      	str	r3, [sp, #104]	; 0x68
 800339e:	4654      	mov	r4, sl
 80033a0:	2205      	movs	r2, #5
 80033a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a6:	4858      	ldr	r0, [pc, #352]	; (8003508 <_vfiprintf_r+0x24c>)
 80033a8:	f000 fd42 	bl	8003e30 <memchr>
 80033ac:	9a04      	ldr	r2, [sp, #16]
 80033ae:	b9d8      	cbnz	r0, 80033e8 <_vfiprintf_r+0x12c>
 80033b0:	06d1      	lsls	r1, r2, #27
 80033b2:	bf44      	itt	mi
 80033b4:	2320      	movmi	r3, #32
 80033b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ba:	0713      	lsls	r3, r2, #28
 80033bc:	bf44      	itt	mi
 80033be:	232b      	movmi	r3, #43	; 0x2b
 80033c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033c4:	f89a 3000 	ldrb.w	r3, [sl]
 80033c8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ca:	d015      	beq.n	80033f8 <_vfiprintf_r+0x13c>
 80033cc:	4654      	mov	r4, sl
 80033ce:	2000      	movs	r0, #0
 80033d0:	f04f 0c0a 	mov.w	ip, #10
 80033d4:	9a07      	ldr	r2, [sp, #28]
 80033d6:	4621      	mov	r1, r4
 80033d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033dc:	3b30      	subs	r3, #48	; 0x30
 80033de:	2b09      	cmp	r3, #9
 80033e0:	d94e      	bls.n	8003480 <_vfiprintf_r+0x1c4>
 80033e2:	b1b0      	cbz	r0, 8003412 <_vfiprintf_r+0x156>
 80033e4:	9207      	str	r2, [sp, #28]
 80033e6:	e014      	b.n	8003412 <_vfiprintf_r+0x156>
 80033e8:	eba0 0308 	sub.w	r3, r0, r8
 80033ec:	fa09 f303 	lsl.w	r3, r9, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	46a2      	mov	sl, r4
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	e7d2      	b.n	800339e <_vfiprintf_r+0xe2>
 80033f8:	9b03      	ldr	r3, [sp, #12]
 80033fa:	1d19      	adds	r1, r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	9103      	str	r1, [sp, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	bfbb      	ittet	lt
 8003404:	425b      	neglt	r3, r3
 8003406:	f042 0202 	orrlt.w	r2, r2, #2
 800340a:	9307      	strge	r3, [sp, #28]
 800340c:	9307      	strlt	r3, [sp, #28]
 800340e:	bfb8      	it	lt
 8003410:	9204      	strlt	r2, [sp, #16]
 8003412:	7823      	ldrb	r3, [r4, #0]
 8003414:	2b2e      	cmp	r3, #46	; 0x2e
 8003416:	d10c      	bne.n	8003432 <_vfiprintf_r+0x176>
 8003418:	7863      	ldrb	r3, [r4, #1]
 800341a:	2b2a      	cmp	r3, #42	; 0x2a
 800341c:	d135      	bne.n	800348a <_vfiprintf_r+0x1ce>
 800341e:	9b03      	ldr	r3, [sp, #12]
 8003420:	3402      	adds	r4, #2
 8003422:	1d1a      	adds	r2, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	9203      	str	r2, [sp, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfb8      	it	lt
 800342c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003430:	9305      	str	r3, [sp, #20]
 8003432:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800350c <_vfiprintf_r+0x250>
 8003436:	2203      	movs	r2, #3
 8003438:	4650      	mov	r0, sl
 800343a:	7821      	ldrb	r1, [r4, #0]
 800343c:	f000 fcf8 	bl	8003e30 <memchr>
 8003440:	b140      	cbz	r0, 8003454 <_vfiprintf_r+0x198>
 8003442:	2340      	movs	r3, #64	; 0x40
 8003444:	eba0 000a 	sub.w	r0, r0, sl
 8003448:	fa03 f000 	lsl.w	r0, r3, r0
 800344c:	9b04      	ldr	r3, [sp, #16]
 800344e:	3401      	adds	r4, #1
 8003450:	4303      	orrs	r3, r0
 8003452:	9304      	str	r3, [sp, #16]
 8003454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003458:	2206      	movs	r2, #6
 800345a:	482d      	ldr	r0, [pc, #180]	; (8003510 <_vfiprintf_r+0x254>)
 800345c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003460:	f000 fce6 	bl	8003e30 <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	d03f      	beq.n	80034e8 <_vfiprintf_r+0x22c>
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <_vfiprintf_r+0x258>)
 800346a:	bb1b      	cbnz	r3, 80034b4 <_vfiprintf_r+0x1f8>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	3307      	adds	r3, #7
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	3308      	adds	r3, #8
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800347a:	443b      	add	r3, r7
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
 800347e:	e767      	b.n	8003350 <_vfiprintf_r+0x94>
 8003480:	460c      	mov	r4, r1
 8003482:	2001      	movs	r0, #1
 8003484:	fb0c 3202 	mla	r2, ip, r2, r3
 8003488:	e7a5      	b.n	80033d6 <_vfiprintf_r+0x11a>
 800348a:	2300      	movs	r3, #0
 800348c:	f04f 0c0a 	mov.w	ip, #10
 8003490:	4619      	mov	r1, r3
 8003492:	3401      	adds	r4, #1
 8003494:	9305      	str	r3, [sp, #20]
 8003496:	4620      	mov	r0, r4
 8003498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800349c:	3a30      	subs	r2, #48	; 0x30
 800349e:	2a09      	cmp	r2, #9
 80034a0:	d903      	bls.n	80034aa <_vfiprintf_r+0x1ee>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0c5      	beq.n	8003432 <_vfiprintf_r+0x176>
 80034a6:	9105      	str	r1, [sp, #20]
 80034a8:	e7c3      	b.n	8003432 <_vfiprintf_r+0x176>
 80034aa:	4604      	mov	r4, r0
 80034ac:	2301      	movs	r3, #1
 80034ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80034b2:	e7f0      	b.n	8003496 <_vfiprintf_r+0x1da>
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	462a      	mov	r2, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <_vfiprintf_r+0x25c>)
 80034be:	a904      	add	r1, sp, #16
 80034c0:	f3af 8000 	nop.w
 80034c4:	4607      	mov	r7, r0
 80034c6:	1c78      	adds	r0, r7, #1
 80034c8:	d1d6      	bne.n	8003478 <_vfiprintf_r+0x1bc>
 80034ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034cc:	07d9      	lsls	r1, r3, #31
 80034ce:	d405      	bmi.n	80034dc <_vfiprintf_r+0x220>
 80034d0:	89ab      	ldrh	r3, [r5, #12]
 80034d2:	059a      	lsls	r2, r3, #22
 80034d4:	d402      	bmi.n	80034dc <_vfiprintf_r+0x220>
 80034d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034d8:	f000 fc43 	bl	8003d62 <__retarget_lock_release_recursive>
 80034dc:	89ab      	ldrh	r3, [r5, #12]
 80034de:	065b      	lsls	r3, r3, #25
 80034e0:	f53f af12 	bmi.w	8003308 <_vfiprintf_r+0x4c>
 80034e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034e6:	e711      	b.n	800330c <_vfiprintf_r+0x50>
 80034e8:	ab03      	add	r3, sp, #12
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	462a      	mov	r2, r5
 80034ee:	4630      	mov	r0, r6
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <_vfiprintf_r+0x25c>)
 80034f2:	a904      	add	r1, sp, #16
 80034f4:	f000 f882 	bl	80035fc <_printf_i>
 80034f8:	e7e4      	b.n	80034c4 <_vfiprintf_r+0x208>
 80034fa:	bf00      	nop
 80034fc:	0800491c 	.word	0x0800491c
 8003500:	0800493c 	.word	0x0800493c
 8003504:	080048fc 	.word	0x080048fc
 8003508:	080048c6 	.word	0x080048c6
 800350c:	080048cc 	.word	0x080048cc
 8003510:	080048d0 	.word	0x080048d0
 8003514:	00000000 	.word	0x00000000
 8003518:	08003297 	.word	0x08003297

0800351c <_printf_common>:
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	4616      	mov	r6, r2
 8003522:	4699      	mov	r9, r3
 8003524:	688a      	ldr	r2, [r1, #8]
 8003526:	690b      	ldr	r3, [r1, #16]
 8003528:	4607      	mov	r7, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	bfb8      	it	lt
 800352e:	4613      	movlt	r3, r2
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003536:	460c      	mov	r4, r1
 8003538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800353c:	b10a      	cbz	r2, 8003542 <_printf_common+0x26>
 800353e:	3301      	adds	r3, #1
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	0699      	lsls	r1, r3, #26
 8003546:	bf42      	ittt	mi
 8003548:	6833      	ldrmi	r3, [r6, #0]
 800354a:	3302      	addmi	r3, #2
 800354c:	6033      	strmi	r3, [r6, #0]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	f015 0506 	ands.w	r5, r5, #6
 8003554:	d106      	bne.n	8003564 <_printf_common+0x48>
 8003556:	f104 0a19 	add.w	sl, r4, #25
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	6832      	ldr	r2, [r6, #0]
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	42ab      	cmp	r3, r5
 8003562:	dc28      	bgt.n	80035b6 <_printf_common+0x9a>
 8003564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003568:	1e13      	subs	r3, r2, #0
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	2301      	movne	r3, #1
 8003570:	0692      	lsls	r2, r2, #26
 8003572:	d42d      	bmi.n	80035d0 <_printf_common+0xb4>
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357c:	47c0      	blx	r8
 800357e:	3001      	adds	r0, #1
 8003580:	d020      	beq.n	80035c4 <_printf_common+0xa8>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	68e5      	ldr	r5, [r4, #12]
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf18      	it	ne
 800358e:	2500      	movne	r5, #0
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	f04f 0600 	mov.w	r6, #0
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	bf08      	it	eq
 800359a:	1aad      	subeq	r5, r5, r2
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf08      	it	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfc4      	itt	gt
 80035a8:	1a9b      	subgt	r3, r3, r2
 80035aa:	18ed      	addgt	r5, r5, r3
 80035ac:	341a      	adds	r4, #26
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d11a      	bne.n	80035e8 <_printf_common+0xcc>
 80035b2:	2000      	movs	r0, #0
 80035b4:	e008      	b.n	80035c8 <_printf_common+0xac>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4652      	mov	r2, sl
 80035ba:	4649      	mov	r1, r9
 80035bc:	4638      	mov	r0, r7
 80035be:	47c0      	blx	r8
 80035c0:	3001      	adds	r0, #1
 80035c2:	d103      	bne.n	80035cc <_printf_common+0xb0>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7c4      	b.n	800355a <_printf_common+0x3e>
 80035d0:	2030      	movs	r0, #48	; 0x30
 80035d2:	18e1      	adds	r1, r4, r3
 80035d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035de:	4422      	add	r2, r4
 80035e0:	3302      	adds	r3, #2
 80035e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e6:	e7c5      	b.n	8003574 <_printf_common+0x58>
 80035e8:	2301      	movs	r3, #1
 80035ea:	4622      	mov	r2, r4
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d0e6      	beq.n	80035c4 <_printf_common+0xa8>
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7d9      	b.n	80035ae <_printf_common+0x92>
	...

080035fc <_printf_i>:
 80035fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	7e0f      	ldrb	r7, [r1, #24]
 8003602:	4691      	mov	r9, r2
 8003604:	2f78      	cmp	r7, #120	; 0x78
 8003606:	4680      	mov	r8, r0
 8003608:	460c      	mov	r4, r1
 800360a:	469a      	mov	sl, r3
 800360c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800360e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003612:	d807      	bhi.n	8003624 <_printf_i+0x28>
 8003614:	2f62      	cmp	r7, #98	; 0x62
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x32>
 8003618:	2f00      	cmp	r7, #0
 800361a:	f000 80d9 	beq.w	80037d0 <_printf_i+0x1d4>
 800361e:	2f58      	cmp	r7, #88	; 0x58
 8003620:	f000 80a4 	beq.w	800376c <_printf_i+0x170>
 8003624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800362c:	e03a      	b.n	80036a4 <_printf_i+0xa8>
 800362e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003632:	2b15      	cmp	r3, #21
 8003634:	d8f6      	bhi.n	8003624 <_printf_i+0x28>
 8003636:	a101      	add	r1, pc, #4	; (adr r1, 800363c <_printf_i+0x40>)
 8003638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800363c:	08003695 	.word	0x08003695
 8003640:	080036a9 	.word	0x080036a9
 8003644:	08003625 	.word	0x08003625
 8003648:	08003625 	.word	0x08003625
 800364c:	08003625 	.word	0x08003625
 8003650:	08003625 	.word	0x08003625
 8003654:	080036a9 	.word	0x080036a9
 8003658:	08003625 	.word	0x08003625
 800365c:	08003625 	.word	0x08003625
 8003660:	08003625 	.word	0x08003625
 8003664:	08003625 	.word	0x08003625
 8003668:	080037b7 	.word	0x080037b7
 800366c:	080036d9 	.word	0x080036d9
 8003670:	08003799 	.word	0x08003799
 8003674:	08003625 	.word	0x08003625
 8003678:	08003625 	.word	0x08003625
 800367c:	080037d9 	.word	0x080037d9
 8003680:	08003625 	.word	0x08003625
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003625 	.word	0x08003625
 800368c:	08003625 	.word	0x08003625
 8003690:	080037a1 	.word	0x080037a1
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	602a      	str	r2, [r5, #0]
 800369c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0a4      	b.n	80037f2 <_printf_i+0x1f6>
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	6829      	ldr	r1, [r5, #0]
 80036ac:	0606      	lsls	r6, r0, #24
 80036ae:	f101 0304 	add.w	r3, r1, #4
 80036b2:	d50a      	bpl.n	80036ca <_printf_i+0xce>
 80036b4:	680e      	ldr	r6, [r1, #0]
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	2e00      	cmp	r6, #0
 80036ba:	da03      	bge.n	80036c4 <_printf_i+0xc8>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	4276      	negs	r6, r6
 80036c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c4:	230a      	movs	r3, #10
 80036c6:	485e      	ldr	r0, [pc, #376]	; (8003840 <_printf_i+0x244>)
 80036c8:	e019      	b.n	80036fe <_printf_i+0x102>
 80036ca:	680e      	ldr	r6, [r1, #0]
 80036cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	bf18      	it	ne
 80036d4:	b236      	sxthne	r6, r6
 80036d6:	e7ef      	b.n	80036b8 <_printf_i+0xbc>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	1d19      	adds	r1, r3, #4
 80036de:	6029      	str	r1, [r5, #0]
 80036e0:	0601      	lsls	r1, r0, #24
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0xec>
 80036e4:	681e      	ldr	r6, [r3, #0]
 80036e6:	e002      	b.n	80036ee <_printf_i+0xf2>
 80036e8:	0646      	lsls	r6, r0, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0xe8>
 80036ec:	881e      	ldrh	r6, [r3, #0]
 80036ee:	2f6f      	cmp	r7, #111	; 0x6f
 80036f0:	bf0c      	ite	eq
 80036f2:	2308      	moveq	r3, #8
 80036f4:	230a      	movne	r3, #10
 80036f6:	4852      	ldr	r0, [pc, #328]	; (8003840 <_printf_i+0x244>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036fe:	6865      	ldr	r5, [r4, #4]
 8003700:	2d00      	cmp	r5, #0
 8003702:	bfa8      	it	ge
 8003704:	6821      	ldrge	r1, [r4, #0]
 8003706:	60a5      	str	r5, [r4, #8]
 8003708:	bfa4      	itt	ge
 800370a:	f021 0104 	bicge.w	r1, r1, #4
 800370e:	6021      	strge	r1, [r4, #0]
 8003710:	b90e      	cbnz	r6, 8003716 <_printf_i+0x11a>
 8003712:	2d00      	cmp	r5, #0
 8003714:	d04d      	beq.n	80037b2 <_printf_i+0x1b6>
 8003716:	4615      	mov	r5, r2
 8003718:	fbb6 f1f3 	udiv	r1, r6, r3
 800371c:	fb03 6711 	mls	r7, r3, r1, r6
 8003720:	5dc7      	ldrb	r7, [r0, r7]
 8003722:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003726:	4637      	mov	r7, r6
 8003728:	42bb      	cmp	r3, r7
 800372a:	460e      	mov	r6, r1
 800372c:	d9f4      	bls.n	8003718 <_printf_i+0x11c>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d10b      	bne.n	800374a <_printf_i+0x14e>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	07de      	lsls	r6, r3, #31
 8003736:	d508      	bpl.n	800374a <_printf_i+0x14e>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	6861      	ldr	r1, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	bfde      	ittt	le
 8003740:	2330      	movle	r3, #48	; 0x30
 8003742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003746:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800374a:	1b52      	subs	r2, r2, r5
 800374c:	6122      	str	r2, [r4, #16]
 800374e:	464b      	mov	r3, r9
 8003750:	4621      	mov	r1, r4
 8003752:	4640      	mov	r0, r8
 8003754:	f8cd a000 	str.w	sl, [sp]
 8003758:	aa03      	add	r2, sp, #12
 800375a:	f7ff fedf 	bl	800351c <_printf_common>
 800375e:	3001      	adds	r0, #1
 8003760:	d14c      	bne.n	80037fc <_printf_i+0x200>
 8003762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003766:	b004      	add	sp, #16
 8003768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376c:	4834      	ldr	r0, [pc, #208]	; (8003840 <_printf_i+0x244>)
 800376e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003772:	6829      	ldr	r1, [r5, #0]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f851 6b04 	ldr.w	r6, [r1], #4
 800377a:	6029      	str	r1, [r5, #0]
 800377c:	061d      	lsls	r5, r3, #24
 800377e:	d514      	bpl.n	80037aa <_printf_i+0x1ae>
 8003780:	07df      	lsls	r7, r3, #31
 8003782:	bf44      	itt	mi
 8003784:	f043 0320 	orrmi.w	r3, r3, #32
 8003788:	6023      	strmi	r3, [r4, #0]
 800378a:	b91e      	cbnz	r6, 8003794 <_printf_i+0x198>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	2310      	movs	r3, #16
 8003796:	e7af      	b.n	80036f8 <_printf_i+0xfc>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	2378      	movs	r3, #120	; 0x78
 80037a2:	4828      	ldr	r0, [pc, #160]	; (8003844 <_printf_i+0x248>)
 80037a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037a8:	e7e3      	b.n	8003772 <_printf_i+0x176>
 80037aa:	0659      	lsls	r1, r3, #25
 80037ac:	bf48      	it	mi
 80037ae:	b2b6      	uxthmi	r6, r6
 80037b0:	e7e6      	b.n	8003780 <_printf_i+0x184>
 80037b2:	4615      	mov	r5, r2
 80037b4:	e7bb      	b.n	800372e <_printf_i+0x132>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	6826      	ldr	r6, [r4, #0]
 80037ba:	1d18      	adds	r0, r3, #4
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	6028      	str	r0, [r5, #0]
 80037c0:	0635      	lsls	r5, r6, #24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0x1ce>
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <_printf_i+0x1d4>
 80037ca:	0670      	lsls	r0, r6, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0x1ca>
 80037ce:	8019      	strh	r1, [r3, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	4615      	mov	r5, r2
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	e7ba      	b.n	800374e <_printf_i+0x152>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 fb23 	bl	8003e30 <memchr>
 80037ea:	b108      	cbz	r0, 80037f0 <_printf_i+0x1f4>
 80037ec:	1b40      	subs	r0, r0, r5
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fa:	e7a8      	b.n	800374e <_printf_i+0x152>
 80037fc:	462a      	mov	r2, r5
 80037fe:	4649      	mov	r1, r9
 8003800:	4640      	mov	r0, r8
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d0ab      	beq.n	8003762 <_printf_i+0x166>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	d413      	bmi.n	8003838 <_printf_i+0x23c>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e7a4      	b.n	8003766 <_printf_i+0x16a>
 800381c:	2301      	movs	r3, #1
 800381e:	4632      	mov	r2, r6
 8003820:	4649      	mov	r1, r9
 8003822:	4640      	mov	r0, r8
 8003824:	47d0      	blx	sl
 8003826:	3001      	adds	r0, #1
 8003828:	d09b      	beq.n	8003762 <_printf_i+0x166>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf2      	bgt.n	800381c <_printf_i+0x220>
 8003836:	e7eb      	b.n	8003810 <_printf_i+0x214>
 8003838:	2500      	movs	r5, #0
 800383a:	f104 0619 	add.w	r6, r4, #25
 800383e:	e7f5      	b.n	800382c <_printf_i+0x230>
 8003840:	080048d7 	.word	0x080048d7
 8003844:	080048e8 	.word	0x080048e8

08003848 <_sbrk_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	2300      	movs	r3, #0
 800384c:	4d05      	ldr	r5, [pc, #20]	; (8003864 <_sbrk_r+0x1c>)
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fd fd10 	bl	8001278 <_sbrk>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_sbrk_r+0x1a>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_sbrk_r+0x1a>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000550 	.word	0x20000550

08003868 <__swbuf_r>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	460e      	mov	r6, r1
 800386c:	4614      	mov	r4, r2
 800386e:	4605      	mov	r5, r0
 8003870:	b118      	cbz	r0, 800387a <__swbuf_r+0x12>
 8003872:	6983      	ldr	r3, [r0, #24]
 8003874:	b90b      	cbnz	r3, 800387a <__swbuf_r+0x12>
 8003876:	f000 f9d5 	bl	8003c24 <__sinit>
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <__swbuf_r+0x98>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d12b      	bne.n	80038d8 <__swbuf_r+0x70>
 8003880:	686c      	ldr	r4, [r5, #4]
 8003882:	69a3      	ldr	r3, [r4, #24]
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	071a      	lsls	r2, r3, #28
 800388a:	d52f      	bpl.n	80038ec <__swbuf_r+0x84>
 800388c:	6923      	ldr	r3, [r4, #16]
 800388e:	b36b      	cbz	r3, 80038ec <__swbuf_r+0x84>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	6820      	ldr	r0, [r4, #0]
 8003894:	b2f6      	uxtb	r6, r6
 8003896:	1ac0      	subs	r0, r0, r3
 8003898:	6963      	ldr	r3, [r4, #20]
 800389a:	4637      	mov	r7, r6
 800389c:	4283      	cmp	r3, r0
 800389e:	dc04      	bgt.n	80038aa <__swbuf_r+0x42>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f92a 	bl	8003afc <_fflush_r>
 80038a8:	bb30      	cbnz	r0, 80038f8 <__swbuf_r+0x90>
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	3001      	adds	r0, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	6022      	str	r2, [r4, #0]
 80038b8:	701e      	strb	r6, [r3, #0]
 80038ba:	6963      	ldr	r3, [r4, #20]
 80038bc:	4283      	cmp	r3, r0
 80038be:	d004      	beq.n	80038ca <__swbuf_r+0x62>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	07db      	lsls	r3, r3, #31
 80038c4:	d506      	bpl.n	80038d4 <__swbuf_r+0x6c>
 80038c6:	2e0a      	cmp	r6, #10
 80038c8:	d104      	bne.n	80038d4 <__swbuf_r+0x6c>
 80038ca:	4621      	mov	r1, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	f000 f915 	bl	8003afc <_fflush_r>
 80038d2:	b988      	cbnz	r0, 80038f8 <__swbuf_r+0x90>
 80038d4:	4638      	mov	r0, r7
 80038d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <__swbuf_r+0x9c>)
 80038da:	429c      	cmp	r4, r3
 80038dc:	d101      	bne.n	80038e2 <__swbuf_r+0x7a>
 80038de:	68ac      	ldr	r4, [r5, #8]
 80038e0:	e7cf      	b.n	8003882 <__swbuf_r+0x1a>
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <__swbuf_r+0xa0>)
 80038e4:	429c      	cmp	r4, r3
 80038e6:	bf08      	it	eq
 80038e8:	68ec      	ldreq	r4, [r5, #12]
 80038ea:	e7ca      	b.n	8003882 <__swbuf_r+0x1a>
 80038ec:	4621      	mov	r1, r4
 80038ee:	4628      	mov	r0, r5
 80038f0:	f000 f80c 	bl	800390c <__swsetup_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0cb      	beq.n	8003890 <__swbuf_r+0x28>
 80038f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80038fc:	e7ea      	b.n	80038d4 <__swbuf_r+0x6c>
 80038fe:	bf00      	nop
 8003900:	0800491c 	.word	0x0800491c
 8003904:	0800493c 	.word	0x0800493c
 8003908:	080048fc 	.word	0x080048fc

0800390c <__swsetup_r>:
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <__swsetup_r+0xcc>)
 800390e:	b570      	push	{r4, r5, r6, lr}
 8003910:	681d      	ldr	r5, [r3, #0]
 8003912:	4606      	mov	r6, r0
 8003914:	460c      	mov	r4, r1
 8003916:	b125      	cbz	r5, 8003922 <__swsetup_r+0x16>
 8003918:	69ab      	ldr	r3, [r5, #24]
 800391a:	b913      	cbnz	r3, 8003922 <__swsetup_r+0x16>
 800391c:	4628      	mov	r0, r5
 800391e:	f000 f981 	bl	8003c24 <__sinit>
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <__swsetup_r+0xd0>)
 8003924:	429c      	cmp	r4, r3
 8003926:	d10f      	bne.n	8003948 <__swsetup_r+0x3c>
 8003928:	686c      	ldr	r4, [r5, #4]
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003930:	0719      	lsls	r1, r3, #28
 8003932:	d42c      	bmi.n	800398e <__swsetup_r+0x82>
 8003934:	06dd      	lsls	r5, r3, #27
 8003936:	d411      	bmi.n	800395c <__swsetup_r+0x50>
 8003938:	2309      	movs	r3, #9
 800393a:	6033      	str	r3, [r6, #0]
 800393c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	81a3      	strh	r3, [r4, #12]
 8003946:	e03e      	b.n	80039c6 <__swsetup_r+0xba>
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <__swsetup_r+0xd4>)
 800394a:	429c      	cmp	r4, r3
 800394c:	d101      	bne.n	8003952 <__swsetup_r+0x46>
 800394e:	68ac      	ldr	r4, [r5, #8]
 8003950:	e7eb      	b.n	800392a <__swsetup_r+0x1e>
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <__swsetup_r+0xd8>)
 8003954:	429c      	cmp	r4, r3
 8003956:	bf08      	it	eq
 8003958:	68ec      	ldreq	r4, [r5, #12]
 800395a:	e7e6      	b.n	800392a <__swsetup_r+0x1e>
 800395c:	0758      	lsls	r0, r3, #29
 800395e:	d512      	bpl.n	8003986 <__swsetup_r+0x7a>
 8003960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003962:	b141      	cbz	r1, 8003976 <__swsetup_r+0x6a>
 8003964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003968:	4299      	cmp	r1, r3
 800396a:	d002      	beq.n	8003972 <__swsetup_r+0x66>
 800396c:	4630      	mov	r0, r6
 800396e:	f7ff fba1 	bl	80030b4 <_free_r>
 8003972:	2300      	movs	r3, #0
 8003974:	6363      	str	r3, [r4, #52]	; 0x34
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	2300      	movs	r3, #0
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	81a3      	strh	r3, [r4, #12]
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	b94b      	cbnz	r3, 80039a6 <__swsetup_r+0x9a>
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399c:	d003      	beq.n	80039a6 <__swsetup_r+0x9a>
 800399e:	4621      	mov	r1, r4
 80039a0:	4630      	mov	r0, r6
 80039a2:	f000 fa05 	bl	8003db0 <__smakebuf_r>
 80039a6:	89a0      	ldrh	r0, [r4, #12]
 80039a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039ac:	f010 0301 	ands.w	r3, r0, #1
 80039b0:	d00a      	beq.n	80039c8 <__swsetup_r+0xbc>
 80039b2:	2300      	movs	r3, #0
 80039b4:	60a3      	str	r3, [r4, #8]
 80039b6:	6963      	ldr	r3, [r4, #20]
 80039b8:	425b      	negs	r3, r3
 80039ba:	61a3      	str	r3, [r4, #24]
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	b943      	cbnz	r3, 80039d2 <__swsetup_r+0xc6>
 80039c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039c4:	d1ba      	bne.n	800393c <__swsetup_r+0x30>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	0781      	lsls	r1, r0, #30
 80039ca:	bf58      	it	pl
 80039cc:	6963      	ldrpl	r3, [r4, #20]
 80039ce:	60a3      	str	r3, [r4, #8]
 80039d0:	e7f4      	b.n	80039bc <__swsetup_r+0xb0>
 80039d2:	2000      	movs	r0, #0
 80039d4:	e7f7      	b.n	80039c6 <__swsetup_r+0xba>
 80039d6:	bf00      	nop
 80039d8:	20000014 	.word	0x20000014
 80039dc:	0800491c 	.word	0x0800491c
 80039e0:	0800493c 	.word	0x0800493c
 80039e4:	080048fc 	.word	0x080048fc

080039e8 <abort>:
 80039e8:	2006      	movs	r0, #6
 80039ea:	b508      	push	{r3, lr}
 80039ec:	f000 fa62 	bl	8003eb4 <raise>
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7fd fbcd 	bl	8001190 <_exit>
	...

080039f8 <__sflush_r>:
 80039f8:	898a      	ldrh	r2, [r1, #12]
 80039fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fc:	4605      	mov	r5, r0
 80039fe:	0710      	lsls	r0, r2, #28
 8003a00:	460c      	mov	r4, r1
 8003a02:	d457      	bmi.n	8003ab4 <__sflush_r+0xbc>
 8003a04:	684b      	ldr	r3, [r1, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	dc04      	bgt.n	8003a14 <__sflush_r+0x1c>
 8003a0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dc01      	bgt.n	8003a14 <__sflush_r+0x1c>
 8003a10:	2000      	movs	r0, #0
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a16:	2e00      	cmp	r6, #0
 8003a18:	d0fa      	beq.n	8003a10 <__sflush_r+0x18>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a20:	682f      	ldr	r7, [r5, #0]
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	d032      	beq.n	8003a8c <__sflush_r+0x94>
 8003a26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	075a      	lsls	r2, r3, #29
 8003a2c:	d505      	bpl.n	8003a3a <__sflush_r+0x42>
 8003a2e:	6863      	ldr	r3, [r4, #4]
 8003a30:	1ac0      	subs	r0, r0, r3
 8003a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a34:	b10b      	cbz	r3, 8003a3a <__sflush_r+0x42>
 8003a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a38:	1ac0      	subs	r0, r0, r3
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a40:	4628      	mov	r0, r5
 8003a42:	6a21      	ldr	r1, [r4, #32]
 8003a44:	47b0      	blx	r6
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	d106      	bne.n	8003a5a <__sflush_r+0x62>
 8003a4c:	6829      	ldr	r1, [r5, #0]
 8003a4e:	291d      	cmp	r1, #29
 8003a50:	d82c      	bhi.n	8003aac <__sflush_r+0xb4>
 8003a52:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <__sflush_r+0x100>)
 8003a54:	40ca      	lsrs	r2, r1
 8003a56:	07d6      	lsls	r6, r2, #31
 8003a58:	d528      	bpl.n	8003aac <__sflush_r+0xb4>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	6062      	str	r2, [r4, #4]
 8003a5e:	6922      	ldr	r2, [r4, #16]
 8003a60:	04d9      	lsls	r1, r3, #19
 8003a62:	6022      	str	r2, [r4, #0]
 8003a64:	d504      	bpl.n	8003a70 <__sflush_r+0x78>
 8003a66:	1c42      	adds	r2, r0, #1
 8003a68:	d101      	bne.n	8003a6e <__sflush_r+0x76>
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	b903      	cbnz	r3, 8003a70 <__sflush_r+0x78>
 8003a6e:	6560      	str	r0, [r4, #84]	; 0x54
 8003a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a72:	602f      	str	r7, [r5, #0]
 8003a74:	2900      	cmp	r1, #0
 8003a76:	d0cb      	beq.n	8003a10 <__sflush_r+0x18>
 8003a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a7c:	4299      	cmp	r1, r3
 8003a7e:	d002      	beq.n	8003a86 <__sflush_r+0x8e>
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff fb17 	bl	80030b4 <_free_r>
 8003a86:	2000      	movs	r0, #0
 8003a88:	6360      	str	r0, [r4, #52]	; 0x34
 8003a8a:	e7c2      	b.n	8003a12 <__sflush_r+0x1a>
 8003a8c:	6a21      	ldr	r1, [r4, #32]
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b0      	blx	r6
 8003a94:	1c41      	adds	r1, r0, #1
 8003a96:	d1c7      	bne.n	8003a28 <__sflush_r+0x30>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c4      	beq.n	8003a28 <__sflush_r+0x30>
 8003a9e:	2b1d      	cmp	r3, #29
 8003aa0:	d001      	beq.n	8003aa6 <__sflush_r+0xae>
 8003aa2:	2b16      	cmp	r3, #22
 8003aa4:	d101      	bne.n	8003aaa <__sflush_r+0xb2>
 8003aa6:	602f      	str	r7, [r5, #0]
 8003aa8:	e7b2      	b.n	8003a10 <__sflush_r+0x18>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab0:	81a3      	strh	r3, [r4, #12]
 8003ab2:	e7ae      	b.n	8003a12 <__sflush_r+0x1a>
 8003ab4:	690f      	ldr	r7, [r1, #16]
 8003ab6:	2f00      	cmp	r7, #0
 8003ab8:	d0aa      	beq.n	8003a10 <__sflush_r+0x18>
 8003aba:	0793      	lsls	r3, r2, #30
 8003abc:	bf18      	it	ne
 8003abe:	2300      	movne	r3, #0
 8003ac0:	680e      	ldr	r6, [r1, #0]
 8003ac2:	bf08      	it	eq
 8003ac4:	694b      	ldreq	r3, [r1, #20]
 8003ac6:	1bf6      	subs	r6, r6, r7
 8003ac8:	600f      	str	r7, [r1, #0]
 8003aca:	608b      	str	r3, [r1, #8]
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	dd9f      	ble.n	8003a10 <__sflush_r+0x18>
 8003ad0:	4633      	mov	r3, r6
 8003ad2:	463a      	mov	r2, r7
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003adc:	47e0      	blx	ip
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	dc06      	bgt.n	8003af0 <__sflush_r+0xf8>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	e790      	b.n	8003a12 <__sflush_r+0x1a>
 8003af0:	4407      	add	r7, r0
 8003af2:	1a36      	subs	r6, r6, r0
 8003af4:	e7ea      	b.n	8003acc <__sflush_r+0xd4>
 8003af6:	bf00      	nop
 8003af8:	20400001 	.word	0x20400001

08003afc <_fflush_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	4605      	mov	r5, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	b913      	cbnz	r3, 8003b0c <_fflush_r+0x10>
 8003b06:	2500      	movs	r5, #0
 8003b08:	4628      	mov	r0, r5
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	b118      	cbz	r0, 8003b16 <_fflush_r+0x1a>
 8003b0e:	6983      	ldr	r3, [r0, #24]
 8003b10:	b90b      	cbnz	r3, 8003b16 <_fflush_r+0x1a>
 8003b12:	f000 f887 	bl	8003c24 <__sinit>
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <_fflush_r+0x6c>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d11b      	bne.n	8003b54 <_fflush_r+0x58>
 8003b1c:	686c      	ldr	r4, [r5, #4]
 8003b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ef      	beq.n	8003b06 <_fflush_r+0xa>
 8003b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b28:	07d0      	lsls	r0, r2, #31
 8003b2a:	d404      	bmi.n	8003b36 <_fflush_r+0x3a>
 8003b2c:	0599      	lsls	r1, r3, #22
 8003b2e:	d402      	bmi.n	8003b36 <_fflush_r+0x3a>
 8003b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b32:	f000 f915 	bl	8003d60 <__retarget_lock_acquire_recursive>
 8003b36:	4628      	mov	r0, r5
 8003b38:	4621      	mov	r1, r4
 8003b3a:	f7ff ff5d 	bl	80039f8 <__sflush_r>
 8003b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b40:	4605      	mov	r5, r0
 8003b42:	07da      	lsls	r2, r3, #31
 8003b44:	d4e0      	bmi.n	8003b08 <_fflush_r+0xc>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	059b      	lsls	r3, r3, #22
 8003b4a:	d4dd      	bmi.n	8003b08 <_fflush_r+0xc>
 8003b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b4e:	f000 f908 	bl	8003d62 <__retarget_lock_release_recursive>
 8003b52:	e7d9      	b.n	8003b08 <_fflush_r+0xc>
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <_fflush_r+0x70>)
 8003b56:	429c      	cmp	r4, r3
 8003b58:	d101      	bne.n	8003b5e <_fflush_r+0x62>
 8003b5a:	68ac      	ldr	r4, [r5, #8]
 8003b5c:	e7df      	b.n	8003b1e <_fflush_r+0x22>
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <_fflush_r+0x74>)
 8003b60:	429c      	cmp	r4, r3
 8003b62:	bf08      	it	eq
 8003b64:	68ec      	ldreq	r4, [r5, #12]
 8003b66:	e7da      	b.n	8003b1e <_fflush_r+0x22>
 8003b68:	0800491c 	.word	0x0800491c
 8003b6c:	0800493c 	.word	0x0800493c
 8003b70:	080048fc 	.word	0x080048fc

08003b74 <std>:
 8003b74:	2300      	movs	r3, #0
 8003b76:	b510      	push	{r4, lr}
 8003b78:	4604      	mov	r4, r0
 8003b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b82:	6083      	str	r3, [r0, #8]
 8003b84:	8181      	strh	r1, [r0, #12]
 8003b86:	6643      	str	r3, [r0, #100]	; 0x64
 8003b88:	81c2      	strh	r2, [r0, #14]
 8003b8a:	6183      	str	r3, [r0, #24]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	2208      	movs	r2, #8
 8003b90:	305c      	adds	r0, #92	; 0x5c
 8003b92:	f7ff f9e3 	bl	8002f5c <memset>
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <std+0x38>)
 8003b98:	6224      	str	r4, [r4, #32]
 8003b9a:	6263      	str	r3, [r4, #36]	; 0x24
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <std+0x3c>)
 8003b9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <std+0x40>)
 8003ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <std+0x44>)
 8003ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	08003eed 	.word	0x08003eed
 8003bb0:	08003f0f 	.word	0x08003f0f
 8003bb4:	08003f47 	.word	0x08003f47
 8003bb8:	08003f6b 	.word	0x08003f6b

08003bbc <_cleanup_r>:
 8003bbc:	4901      	ldr	r1, [pc, #4]	; (8003bc4 <_cleanup_r+0x8>)
 8003bbe:	f000 b8af 	b.w	8003d20 <_fwalk_reent>
 8003bc2:	bf00      	nop
 8003bc4:	08003afd 	.word	0x08003afd

08003bc8 <__sfmoreglue>:
 8003bc8:	2268      	movs	r2, #104	; 0x68
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	1e4d      	subs	r5, r1, #1
 8003bce:	4355      	muls	r5, r2
 8003bd0:	460e      	mov	r6, r1
 8003bd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bd6:	f7ff fad5 	bl	8003184 <_malloc_r>
 8003bda:	4604      	mov	r4, r0
 8003bdc:	b140      	cbz	r0, 8003bf0 <__sfmoreglue+0x28>
 8003bde:	2100      	movs	r1, #0
 8003be0:	e9c0 1600 	strd	r1, r6, [r0]
 8003be4:	300c      	adds	r0, #12
 8003be6:	60a0      	str	r0, [r4, #8]
 8003be8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bec:	f7ff f9b6 	bl	8002f5c <memset>
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}

08003bf4 <__sfp_lock_acquire>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__sfp_lock_acquire+0x8>)
 8003bf6:	f000 b8b3 	b.w	8003d60 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	2000054d 	.word	0x2000054d

08003c00 <__sfp_lock_release>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__sfp_lock_release+0x8>)
 8003c02:	f000 b8ae 	b.w	8003d62 <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	2000054d 	.word	0x2000054d

08003c0c <__sinit_lock_acquire>:
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <__sinit_lock_acquire+0x8>)
 8003c0e:	f000 b8a7 	b.w	8003d60 <__retarget_lock_acquire_recursive>
 8003c12:	bf00      	nop
 8003c14:	2000054e 	.word	0x2000054e

08003c18 <__sinit_lock_release>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__sinit_lock_release+0x8>)
 8003c1a:	f000 b8a2 	b.w	8003d62 <__retarget_lock_release_recursive>
 8003c1e:	bf00      	nop
 8003c20:	2000054e 	.word	0x2000054e

08003c24 <__sinit>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4604      	mov	r4, r0
 8003c28:	f7ff fff0 	bl	8003c0c <__sinit_lock_acquire>
 8003c2c:	69a3      	ldr	r3, [r4, #24]
 8003c2e:	b11b      	cbz	r3, 8003c38 <__sinit+0x14>
 8003c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c34:	f7ff bff0 	b.w	8003c18 <__sinit_lock_release>
 8003c38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c3c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <__sinit+0x68>)
 8003c40:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <__sinit+0x6c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c46:	42a3      	cmp	r3, r4
 8003c48:	bf08      	it	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	bf08      	it	eq
 8003c50:	61a3      	streq	r3, [r4, #24]
 8003c52:	f000 f81f 	bl	8003c94 <__sfp>
 8003c56:	6060      	str	r0, [r4, #4]
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f000 f81b 	bl	8003c94 <__sfp>
 8003c5e:	60a0      	str	r0, [r4, #8]
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 f817 	bl	8003c94 <__sfp>
 8003c66:	2200      	movs	r2, #0
 8003c68:	2104      	movs	r1, #4
 8003c6a:	60e0      	str	r0, [r4, #12]
 8003c6c:	6860      	ldr	r0, [r4, #4]
 8003c6e:	f7ff ff81 	bl	8003b74 <std>
 8003c72:	2201      	movs	r2, #1
 8003c74:	2109      	movs	r1, #9
 8003c76:	68a0      	ldr	r0, [r4, #8]
 8003c78:	f7ff ff7c 	bl	8003b74 <std>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	2112      	movs	r1, #18
 8003c80:	68e0      	ldr	r0, [r4, #12]
 8003c82:	f7ff ff77 	bl	8003b74 <std>
 8003c86:	2301      	movs	r3, #1
 8003c88:	61a3      	str	r3, [r4, #24]
 8003c8a:	e7d1      	b.n	8003c30 <__sinit+0xc>
 8003c8c:	08004814 	.word	0x08004814
 8003c90:	08003bbd 	.word	0x08003bbd

08003c94 <__sfp>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	4607      	mov	r7, r0
 8003c98:	f7ff ffac 	bl	8003bf4 <__sfp_lock_acquire>
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <__sfp+0x84>)
 8003c9e:	681e      	ldr	r6, [r3, #0]
 8003ca0:	69b3      	ldr	r3, [r6, #24]
 8003ca2:	b913      	cbnz	r3, 8003caa <__sfp+0x16>
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7ff ffbd 	bl	8003c24 <__sinit>
 8003caa:	3648      	adds	r6, #72	; 0x48
 8003cac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	d503      	bpl.n	8003cbc <__sfp+0x28>
 8003cb4:	6833      	ldr	r3, [r6, #0]
 8003cb6:	b30b      	cbz	r3, 8003cfc <__sfp+0x68>
 8003cb8:	6836      	ldr	r6, [r6, #0]
 8003cba:	e7f7      	b.n	8003cac <__sfp+0x18>
 8003cbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cc0:	b9d5      	cbnz	r5, 8003cf8 <__sfp+0x64>
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <__sfp+0x88>)
 8003cc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cc8:	60e3      	str	r3, [r4, #12]
 8003cca:	6665      	str	r5, [r4, #100]	; 0x64
 8003ccc:	f000 f847 	bl	8003d5e <__retarget_lock_init_recursive>
 8003cd0:	f7ff ff96 	bl	8003c00 <__sfp_lock_release>
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ce0:	6025      	str	r5, [r4, #0]
 8003ce2:	61a5      	str	r5, [r4, #24]
 8003ce4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ce8:	f7ff f938 	bl	8002f5c <memset>
 8003cec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf8:	3468      	adds	r4, #104	; 0x68
 8003cfa:	e7d9      	b.n	8003cb0 <__sfp+0x1c>
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f7ff ff62 	bl	8003bc8 <__sfmoreglue>
 8003d04:	4604      	mov	r4, r0
 8003d06:	6030      	str	r0, [r6, #0]
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d1d5      	bne.n	8003cb8 <__sfp+0x24>
 8003d0c:	f7ff ff78 	bl	8003c00 <__sfp_lock_release>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	e7ee      	b.n	8003cf4 <__sfp+0x60>
 8003d16:	bf00      	nop
 8003d18:	08004814 	.word	0x08004814
 8003d1c:	ffff0001 	.word	0xffff0001

08003d20 <_fwalk_reent>:
 8003d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d24:	4606      	mov	r6, r0
 8003d26:	4688      	mov	r8, r1
 8003d28:	2700      	movs	r7, #0
 8003d2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d32:	f1b9 0901 	subs.w	r9, r9, #1
 8003d36:	d505      	bpl.n	8003d44 <_fwalk_reent+0x24>
 8003d38:	6824      	ldr	r4, [r4, #0]
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	d1f7      	bne.n	8003d2e <_fwalk_reent+0xe>
 8003d3e:	4638      	mov	r0, r7
 8003d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d44:	89ab      	ldrh	r3, [r5, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d907      	bls.n	8003d5a <_fwalk_reent+0x3a>
 8003d4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	d003      	beq.n	8003d5a <_fwalk_reent+0x3a>
 8003d52:	4629      	mov	r1, r5
 8003d54:	4630      	mov	r0, r6
 8003d56:	47c0      	blx	r8
 8003d58:	4307      	orrs	r7, r0
 8003d5a:	3568      	adds	r5, #104	; 0x68
 8003d5c:	e7e9      	b.n	8003d32 <_fwalk_reent+0x12>

08003d5e <__retarget_lock_init_recursive>:
 8003d5e:	4770      	bx	lr

08003d60 <__retarget_lock_acquire_recursive>:
 8003d60:	4770      	bx	lr

08003d62 <__retarget_lock_release_recursive>:
 8003d62:	4770      	bx	lr

08003d64 <__swhatbuf_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	460e      	mov	r6, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	461d      	mov	r5, r3
 8003d72:	b096      	sub	sp, #88	; 0x58
 8003d74:	da08      	bge.n	8003d88 <__swhatbuf_r+0x24>
 8003d76:	2200      	movs	r2, #0
 8003d78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	061a      	lsls	r2, r3, #24
 8003d80:	d410      	bmi.n	8003da4 <__swhatbuf_r+0x40>
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	e00e      	b.n	8003da6 <__swhatbuf_r+0x42>
 8003d88:	466a      	mov	r2, sp
 8003d8a:	f000 f915 	bl	8003fb8 <_fstat_r>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	dbf1      	blt.n	8003d76 <__swhatbuf_r+0x12>
 8003d92:	9a01      	ldr	r2, [sp, #4]
 8003d94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d9c:	425a      	negs	r2, r3
 8003d9e:	415a      	adcs	r2, r3
 8003da0:	602a      	str	r2, [r5, #0]
 8003da2:	e7ee      	b.n	8003d82 <__swhatbuf_r+0x1e>
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	2000      	movs	r0, #0
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	b016      	add	sp, #88	; 0x58
 8003dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08003db0 <__smakebuf_r>:
 8003db0:	898b      	ldrh	r3, [r1, #12]
 8003db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003db4:	079d      	lsls	r5, r3, #30
 8003db6:	4606      	mov	r6, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	d507      	bpl.n	8003dcc <__smakebuf_r+0x1c>
 8003dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	6163      	str	r3, [r4, #20]
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	466a      	mov	r2, sp
 8003dce:	ab01      	add	r3, sp, #4
 8003dd0:	f7ff ffc8 	bl	8003d64 <__swhatbuf_r>
 8003dd4:	9900      	ldr	r1, [sp, #0]
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f7ff f9d3 	bl	8003184 <_malloc_r>
 8003dde:	b948      	cbnz	r0, 8003df4 <__smakebuf_r+0x44>
 8003de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de4:	059a      	lsls	r2, r3, #22
 8003de6:	d4ef      	bmi.n	8003dc8 <__smakebuf_r+0x18>
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	e7e3      	b.n	8003dbc <__smakebuf_r+0xc>
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <__smakebuf_r+0x7c>)
 8003df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	6020      	str	r0, [r4, #0]
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	9b00      	ldr	r3, [sp, #0]
 8003e04:	6120      	str	r0, [r4, #16]
 8003e06:	6163      	str	r3, [r4, #20]
 8003e08:	9b01      	ldr	r3, [sp, #4]
 8003e0a:	b15b      	cbz	r3, 8003e24 <__smakebuf_r+0x74>
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e12:	f000 f8e3 	bl	8003fdc <_isatty_r>
 8003e16:	b128      	cbz	r0, 8003e24 <__smakebuf_r+0x74>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	89a0      	ldrh	r0, [r4, #12]
 8003e26:	4305      	orrs	r5, r0
 8003e28:	81a5      	strh	r5, [r4, #12]
 8003e2a:	e7cd      	b.n	8003dc8 <__smakebuf_r+0x18>
 8003e2c:	08003bbd 	.word	0x08003bbd

08003e30 <memchr>:
 8003e30:	4603      	mov	r3, r0
 8003e32:	b510      	push	{r4, lr}
 8003e34:	b2c9      	uxtb	r1, r1
 8003e36:	4402      	add	r2, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	d101      	bne.n	8003e42 <memchr+0x12>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e003      	b.n	8003e4a <memchr+0x1a>
 8003e42:	7804      	ldrb	r4, [r0, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	428c      	cmp	r4, r1
 8003e48:	d1f6      	bne.n	8003e38 <memchr+0x8>
 8003e4a:	bd10      	pop	{r4, pc}

08003e4c <__malloc_lock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__malloc_lock+0x8>)
 8003e4e:	f7ff bf87 	b.w	8003d60 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	2000054c 	.word	0x2000054c

08003e58 <__malloc_unlock>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__malloc_unlock+0x8>)
 8003e5a:	f7ff bf82 	b.w	8003d62 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	2000054c 	.word	0x2000054c

08003e64 <_raise_r>:
 8003e64:	291f      	cmp	r1, #31
 8003e66:	b538      	push	{r3, r4, r5, lr}
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	d904      	bls.n	8003e78 <_raise_r+0x14>
 8003e6e:	2316      	movs	r3, #22
 8003e70:	6003      	str	r3, [r0, #0]
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e7a:	b112      	cbz	r2, 8003e82 <_raise_r+0x1e>
 8003e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e80:	b94b      	cbnz	r3, 8003e96 <_raise_r+0x32>
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f830 	bl	8003ee8 <_getpid_r>
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e92:	f000 b817 	b.w	8003ec4 <_kill_r>
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d00a      	beq.n	8003eb0 <_raise_r+0x4c>
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	d103      	bne.n	8003ea6 <_raise_r+0x42>
 8003e9e:	2316      	movs	r3, #22
 8003ea0:	6003      	str	r3, [r0, #0]
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e7e7      	b.n	8003e76 <_raise_r+0x12>
 8003ea6:	2400      	movs	r4, #0
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003eae:	4798      	blx	r3
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e7e0      	b.n	8003e76 <_raise_r+0x12>

08003eb4 <raise>:
 8003eb4:	4b02      	ldr	r3, [pc, #8]	; (8003ec0 <raise+0xc>)
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	f7ff bfd3 	b.w	8003e64 <_raise_r>
 8003ebe:	bf00      	nop
 8003ec0:	20000014 	.word	0x20000014

08003ec4 <_kill_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4d06      	ldr	r5, [pc, #24]	; (8003ee4 <_kill_r+0x20>)
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	602b      	str	r3, [r5, #0]
 8003ed2:	f7fd f94d 	bl	8001170 <_kill>
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	d102      	bne.n	8003ee0 <_kill_r+0x1c>
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	b103      	cbz	r3, 8003ee0 <_kill_r+0x1c>
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000550 	.word	0x20000550

08003ee8 <_getpid_r>:
 8003ee8:	f7fd b93b 	b.w	8001162 <_getpid>

08003eec <__sread>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef4:	f000 f894 	bl	8004020 <_read_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	bfab      	itete	ge
 8003efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003efe:	89a3      	ldrhlt	r3, [r4, #12]
 8003f00:	181b      	addge	r3, r3, r0
 8003f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f06:	bfac      	ite	ge
 8003f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f0a:	81a3      	strhlt	r3, [r4, #12]
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <__swrite>:
 8003f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f12:	461f      	mov	r7, r3
 8003f14:	898b      	ldrh	r3, [r1, #12]
 8003f16:	4605      	mov	r5, r0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	d505      	bpl.n	8003f2c <__swrite+0x1e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	2200      	movs	r2, #0
 8003f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f28:	f000 f868 	bl	8003ffc <_lseek_r>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	4632      	mov	r2, r6
 8003f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	4628      	mov	r0, r5
 8003f38:	463b      	mov	r3, r7
 8003f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	f000 b817 	b.w	8003f74 <_write_r>

08003f46 <__sseek>:
 8003f46:	b510      	push	{r4, lr}
 8003f48:	460c      	mov	r4, r1
 8003f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4e:	f000 f855 	bl	8003ffc <_lseek_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	bf15      	itete	ne
 8003f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f62:	81a3      	strheq	r3, [r4, #12]
 8003f64:	bf18      	it	ne
 8003f66:	81a3      	strhne	r3, [r4, #12]
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <__sclose>:
 8003f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6e:	f000 b813 	b.w	8003f98 <_close_r>
	...

08003f74 <_write_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_write_r+0x20>)
 8003f80:	602a      	str	r2, [r5, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fd f92b 	bl	80011de <_write>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_write_r+0x1e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_write_r+0x1e>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000550 	.word	0x20000550

08003f98 <_close_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d05      	ldr	r5, [pc, #20]	; (8003fb4 <_close_r+0x1c>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	f7fd f937 	bl	8001216 <_close>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_close_r+0x1a>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_close_r+0x1a>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	20000550 	.word	0x20000550

08003fb8 <_fstat_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4d06      	ldr	r5, [pc, #24]	; (8003fd8 <_fstat_r+0x20>)
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	f7fd f931 	bl	800122c <_fstat>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	d102      	bne.n	8003fd4 <_fstat_r+0x1c>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	b103      	cbz	r3, 8003fd4 <_fstat_r+0x1c>
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	bd38      	pop	{r3, r4, r5, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000550 	.word	0x20000550

08003fdc <_isatty_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4d05      	ldr	r5, [pc, #20]	; (8003ff8 <_isatty_r+0x1c>)
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fd f92f 	bl	800124a <_isatty>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_isatty_r+0x1a>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_isatty_r+0x1a>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000550 	.word	0x20000550

08003ffc <_lseek_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	2200      	movs	r2, #0
 8004006:	4d05      	ldr	r5, [pc, #20]	; (800401c <_lseek_r+0x20>)
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f7fd f927 	bl	800125e <_lseek>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_lseek_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_lseek_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000550 	.word	0x20000550

08004020 <_read_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	2200      	movs	r2, #0
 800402a:	4d05      	ldr	r5, [pc, #20]	; (8004040 <_read_r+0x20>)
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fd f8b8 	bl	80011a4 <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_read_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_read_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000550 	.word	0x20000550

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
