
game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c9c  08003c9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c9c  08003c9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c9c  08003c9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000070  08003d14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08003d14  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b41d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be1  00000000  00000000  0002b4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ac5  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d21a  00000000  00000000  0004613d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877f1  00000000  00000000  00053357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dab48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000dab98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b08 	.word	0x08003b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b08 	.word	0x08003b08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe85 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8c9 	bl	80002f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f86f 	bl	8000240 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f89b 	bl	800029c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000166:	f000 f915 	bl	8000394 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 800016a:	f000 fb0b 	bl	8000784 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800016e:	f000 fb13 	bl	8000798 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8000172:	2001      	movs	r0, #1
 8000174:	f000 f8fe 	bl	8000374 <ssd1306_SetColor>

  Circle circle = {
 8000178:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <main+0x64>)
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000180:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Circle *const p_circle = &circle;
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	60fb      	str	r3, [r7, #12]
	  update_circle_on_wall_hit(p_circle);
 8000188:	68f8      	ldr	r0, [r7, #12]
 800018a:	f000 fc9a 	bl	8000ac2 <update_circle_on_wall_hit>
	  update_circle_position(p_circle);
 800018e:	68f8      	ldr	r0, [r7, #12]
 8000190:	f000 fc18 	bl	80009c4 <update_circle_position>

	  ssd1306_Clear();
 8000194:	f000 fb00 	bl	8000798 <ssd1306_Clear>
	  ssd1306_FillCircle(circle.x,  circle.y, circle.radius);
 8000198:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800019c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80001a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fa57 	bl	8000658 <ssd1306_FillCircle>

	  ssd1306_UpdateScreen();
 80001aa:	f000 f98d 	bl	80004c8 <ssd1306_UpdateScreen>
  {
 80001ae:	e7e9      	b.n	8000184 <main+0x38>
 80001b0:	08003b20 	.word	0x08003b20

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fc2c 	bl	8002a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fef7 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f8a0 	bl	800034c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f002 f964 	bl	80024f4 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f88b 	bl	800034c <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <MX_I2C1_Init+0x50>)
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <MX_I2C1_Init+0x54>)
 8000248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_I2C1_Init+0x50>)
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MX_I2C1_Init+0x58>)
 800024e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_I2C1_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_I2C1_Init+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_I2C1_Init+0x50>)
 800025e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000262:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <MX_I2C1_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_I2C1_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_I2C1_Init+0x50>)
 800027e:	f001 f8dd 	bl	800143c <HAL_I2C_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000288:	f000 f860 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000008c 	.word	0x2000008c
 8000294:	40005400 	.word	0x40005400
 8000298:	00061a80 	.word	0x00061a80

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <MX_USART1_UART_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f002 fa9c 	bl	8002810 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002de:	f000 f835 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200000e0 	.word	0x200000e0
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_GPIO_Init+0x58>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <MX_GPIO_Init+0x58>)
 80002fc:	f043 0320 	orr.w	r3, r3, #32
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_GPIO_Init+0x58>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0320 	and.w	r3, r3, #32
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_GPIO_Init+0x58>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <MX_GPIO_Init+0x58>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_GPIO_Init+0x58>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_GPIO_Init+0x58>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <MX_GPIO_Init+0x58>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>

08000356 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
 8000368:	2340      	movs	r3, #64	; 0x40
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <ssd1306_SetColor+0x1c>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	7153      	strb	r3, [r2, #5]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000128 	.word	0x20000128

08000394 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8000398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039c:	2205      	movs	r2, #5
 800039e:	2178      	movs	r1, #120	; 0x78
 80003a0:	4846      	ldr	r0, [pc, #280]	; (80004bc <ssd1306_Init+0x128>)
 80003a2:	f001 fa89 	bl	80018b8 <HAL_I2C_IsDeviceReady>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d004      	beq.n	80003b6 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 80003ac:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <ssd1306_Init+0x12c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	e07f      	b.n	80004b6 <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 fdb4 	bl	8000f24 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 80003bc:	20ae      	movs	r0, #174	; 0xae
 80003be:	f000 f9f7 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80003c2:	20d5      	movs	r0, #213	; 0xd5
 80003c4:	f000 f9f4 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80003c8:	20f0      	movs	r0, #240	; 0xf0
 80003ca:	f000 f9f1 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 80003ce:	20a8      	movs	r0, #168	; 0xa8
 80003d0:	f000 f9ee 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 80003d4:	f7ff ffc6 	bl	8000364 <height>
 80003d8:	4603      	mov	r3, r0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3b01      	subs	r3, #1
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f9e5 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80003e6:	20d3      	movs	r0, #211	; 0xd3
 80003e8:	f000 f9e2 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f9df 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 80003f2:	2040      	movs	r0, #64	; 0x40
 80003f4:	f000 f9dc 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 80003f8:	208d      	movs	r0, #141	; 0x8d
 80003fa:	f000 f9d9 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80003fe:	2014      	movs	r0, #20
 8000400:	f000 f9d6 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8000404:	2020      	movs	r0, #32
 8000406:	f000 f9d3 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 f9d0 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8000410:	20a0      	movs	r0, #160	; 0xa0
 8000412:	f000 f9cd 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8000416:	20c0      	movs	r0, #192	; 0xc0
 8000418:	f000 f9ca 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 800041c:	20da      	movs	r0, #218	; 0xda
 800041e:	f000 f9c7 	bl	80007b0 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000422:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <ssd1306_Init+0x130>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 800042a:	2012      	movs	r0, #18
 800042c:	f000 f9c0 	bl	80007b0 <ssd1306_WriteCommand>
 8000430:	e006      	b.n	8000440 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <ssd1306_Init+0x130>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d102      	bne.n	8000440 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 800043a:	2002      	movs	r0, #2
 800043c:	f000 f9b8 	bl	80007b0 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 8000440:	2081      	movs	r0, #129	; 0x81
 8000442:	f000 f9b5 	bl	80007b0 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <ssd1306_Init+0x130>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d103      	bne.n	8000456 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 800044e:	20cf      	movs	r0, #207	; 0xcf
 8000450:	f000 f9ae 	bl	80007b0 <ssd1306_WriteCommand>
 8000454:	e006      	b.n	8000464 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <ssd1306_Init+0x130>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d102      	bne.n	8000464 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 800045e:	208f      	movs	r0, #143	; 0x8f
 8000460:	f000 f9a6 	bl	80007b0 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8000464:	20d9      	movs	r0, #217	; 0xd9
 8000466:	f000 f9a3 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800046a:	20f1      	movs	r0, #241	; 0xf1
 800046c:	f000 f9a0 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8000470:	20db      	movs	r0, #219	; 0xdb
 8000472:	f000 f99d 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8000476:	2040      	movs	r0, #64	; 0x40
 8000478:	f000 f99a 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800047c:	20a4      	movs	r0, #164	; 0xa4
 800047e:	f000 f997 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8000482:	20a6      	movs	r0, #166	; 0xa6
 8000484:	f000 f994 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8000488:	202e      	movs	r0, #46	; 0x2e
 800048a:	f000 f991 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800048e:	20af      	movs	r0, #175	; 0xaf
 8000490:	f000 f98e 	bl	80007b0 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <ssd1306_Init+0x12c>)
 8000496:	2200      	movs	r2, #0
 8000498:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <ssd1306_Init+0x12c>)
 800049c:	2200      	movs	r2, #0
 800049e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <ssd1306_Init+0x12c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 80004a6:	f000 f977 	bl	8000798 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80004aa:	f000 f80d 	bl	80004c8 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <ssd1306_Init+0x12c>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 80004b4:	2301      	movs	r3, #1
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	20000128 	.word	0x20000128
 80004c4:	20000530 	.word	0x20000530

080004c8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	e019      	b.n	8000508 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	3b50      	subs	r3, #80	; 0x50
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f968 	bl	80007b0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 f965 	bl	80007b0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 f962 	bl	80007b0 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	01db      	lsls	r3, r3, #7
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <ssd1306_UpdateScreen+0x50>)
 80004f2:	189c      	adds	r4, r3, r2
 80004f4:	f7ff ff2f 	bl	8000356 <width>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4620      	mov	r0, r4
 80004fe:	f000 f96f 	bl	80007e0 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3301      	adds	r3, #1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d9e2      	bls.n	80004d4 <ssd1306_UpdateScreen+0xc>
	}
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bd90      	pop	{r4, r7, pc}
 8000518:	20000130 	.word	0x20000130

0800051c <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	460b      	mov	r3, r1
 8000528:	80bb      	strh	r3, [r7, #4]
 800052a:	4613      	mov	r3, r2
 800052c:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 800052e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	f2c0 8086 	blt.w	8000644 <ssd1306_DrawHorizontalLine+0x128>
 8000538:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800053c:	f7ff ff12 	bl	8000364 <height>
 8000540:	4603      	mov	r3, r0
 8000542:	429c      	cmp	r4, r3
 8000544:	da7e      	bge.n	8000644 <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 8000546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800054a:	2b00      	cmp	r3, #0
 800054c:	da06      	bge.n	800055c <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 800054e:	887a      	ldrh	r2, [r7, #2]
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	4413      	add	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	807b      	strh	r3, [r7, #2]
    x = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 800055c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000564:	18d4      	adds	r4, r2, r3
 8000566:	f7ff fef6 	bl	8000356 <width>
 800056a:	4603      	mov	r3, r0
 800056c:	429c      	cmp	r4, r3
 800056e:	dd07      	ble.n	8000580 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 8000570:	f7ff fef1 	bl	8000356 <width>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	b29b      	uxth	r3, r3
 800057e:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 8000580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000584:	2b00      	cmp	r3, #0
 8000586:	dd5f      	ble.n	8000648 <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <ssd1306_DrawHorizontalLine+0x134>)
 800058a:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 800058c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000590:	10db      	asrs	r3, r3, #3
 8000592:	b21b      	sxth	r3, r3
 8000594:	461c      	mov	r4, r3
 8000596:	f7ff fede 	bl	8000356 <width>
 800059a:	4603      	mov	r3, r0
 800059c:	fb04 f303 	mul.w	r3, r4, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 80005a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	f003 0307 	and.w	r3, r3, #7
 80005b8:	2201      	movs	r2, #1
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <ssd1306_DrawHorizontalLine+0x138>)
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d034      	beq.n	8000632 <ssd1306_DrawHorizontalLine+0x116>
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	dc3e      	bgt.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d013      	beq.n	80005f8 <ssd1306_DrawHorizontalLine+0xdc>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d13a      	bne.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 80005d4:	e007      	b.n	80005e6 <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	60fa      	str	r2, [r7, #12]
 80005dc:	7819      	ldrb	r1, [r3, #0]
 80005de:	7afa      	ldrb	r2, [r7, #11]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	701a      	strb	r2, [r3, #0]
    	while (length--)
 80005e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	3a01      	subs	r2, #1
 80005ee:	b292      	uxth	r2, r2
 80005f0:	807a      	strh	r2, [r7, #2]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1ef      	bne.n	80005d6 <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 80005f6:	e028      	b.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 80005fe:	e007      	b.n	8000610 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60fa      	str	r2, [r7, #12]
 8000606:	7819      	ldrb	r1, [r3, #0]
 8000608:	7afa      	ldrb	r2, [r7, #11]
 800060a:	400a      	ands	r2, r1
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000614:	b29a      	uxth	r2, r3
 8000616:	3a01      	subs	r2, #1
 8000618:	b292      	uxth	r2, r2
 800061a:	807a      	strh	r2, [r7, #2]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1ef      	bne.n	8000600 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8000620:	e013      	b.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	60fa      	str	r2, [r7, #12]
 8000628:	7819      	ldrb	r1, [r3, #0]
 800062a:	7afa      	ldrb	r2, [r7, #11]
 800062c:	404a      	eors	r2, r1
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8000632:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000636:	b29a      	uxth	r2, r3
 8000638:	3a01      	subs	r2, #1
 800063a:	b292      	uxth	r2, r2
 800063c:	807a      	strh	r2, [r7, #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1ef      	bne.n	8000622 <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 8000642:	e002      	b.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 8000644:	bf00      	nop
 8000646:	e000      	b.n	800064a <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 8000648:	bf00      	nop
  }
}
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	20000130 	.word	0x20000130
 8000654:	20000128 	.word	0x20000128

08000658 <ssd1306_FillCircle>:
	ssd1306_DrawPixel(x0, y0 - radius);
}


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	460b      	mov	r3, r1
 8000664:	80bb      	strh	r3, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 800066a:	2300      	movs	r3, #0
 800066c:	81fb      	strh	r3, [r7, #14]
 800066e:	887b      	ldrh	r3, [r7, #2]
 8000670:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	f1c3 0301 	rsb	r3, r3, #1
 8000678:	b29b      	uxth	r3, r3
 800067a:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 800067c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000680:	2b00      	cmp	r3, #0
 8000682:	da0d      	bge.n	80006a0 <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 8000684:	89fb      	ldrh	r3, [r7, #14]
 8000686:	3301      	adds	r3, #1
 8000688:	b29b      	uxth	r3, r3
 800068a:	81fb      	strh	r3, [r7, #14]
 800068c:	89fb      	ldrh	r3, [r7, #14]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	b29a      	uxth	r2, r3
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	4413      	add	r3, r2
 8000696:	b29b      	uxth	r3, r3
 8000698:	3303      	adds	r3, #3
 800069a:	b29b      	uxth	r3, r3
 800069c:	817b      	strh	r3, [r7, #10]
 800069e:	e015      	b.n	80006cc <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	3301      	adds	r3, #1
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	81fb      	strh	r3, [r7, #14]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	897b      	ldrh	r3, [r7, #10]
 80006b0:	4413      	add	r3, r2
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	89bb      	ldrh	r3, [r7, #12]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	81bb      	strh	r3, [r7, #12]
 80006bc:	89bb      	ldrh	r3, [r7, #12]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	3305      	adds	r3, #5
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b218      	sxth	r0, r3
 80006d6:	88ba      	ldrh	r2, [r7, #4]
 80006d8:	89bb      	ldrh	r3, [r7, #12]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b219      	sxth	r1, r3
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	f7ff ff17 	bl	800051c <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b218      	sxth	r0, r3
 80006f8:	88ba      	ldrh	r2, [r7, #4]
 80006fa:	89bb      	ldrh	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b219      	sxth	r1, r3
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b29b      	uxth	r3, r3
 8000708:	b21b      	sxth	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	f7ff ff06 	bl	800051c <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	b218      	sxth	r0, r3
 800071a:	88ba      	ldrh	r2, [r7, #4]
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	b219      	sxth	r1, r3
 8000724:	89bb      	ldrh	r3, [r7, #12]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	b29b      	uxth	r3, r3
 800072a:	b21b      	sxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	f7ff fef5 	bl	800051c <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	89bb      	ldrh	r3, [r7, #12]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	b218      	sxth	r0, r3
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	4413      	add	r3, r2
 8000742:	b29b      	uxth	r3, r3
 8000744:	b219      	sxth	r1, r3
 8000746:	89bb      	ldrh	r3, [r7, #12]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	b29b      	uxth	r3, r3
 800074c:	b21b      	sxth	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	f7ff fee4 	bl	800051c <ssd1306_DrawHorizontalLine>




  } while (x < y);
 8000754:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000758:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	db8d      	blt.n	800067c <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 8000760:	88fa      	ldrh	r2, [r7, #6]
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	b29b      	uxth	r3, r3
 8000768:	b218      	sxth	r0, r3
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	b29b      	uxth	r3, r3
 8000770:	b21a      	sxth	r2, r3
 8000772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	f7ff fed0 	bl	800051c <ssd1306_DrawHorizontalLine>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8000788:	20a1      	movs	r0, #161	; 0xa1
 800078a:	f000 f811 	bl	80007b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 800078e:	20c8      	movs	r0, #200	; 0xc8
 8000790:	f000 f80e 	bl	80007b0 <ssd1306_WriteCommand>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 800079c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a0:	2100      	movs	r1, #0
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <ssd1306_Clear+0x14>)
 80007a4:	f002 f93c 	bl	8002a20 <memset>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000130 	.word	0x20000130

080007b0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af04      	add	r7, sp, #16
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80007ba:	230a      	movs	r3, #10
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2301      	movs	r3, #1
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	2200      	movs	r2, #0
 80007ca:	2178      	movs	r1, #120	; 0x78
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <ssd1306_WriteCommand+0x2c>)
 80007ce:	f000 ff79 	bl	80016c4 <HAL_I2C_Mem_Write>
#endif
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c

080007e0 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2240      	movs	r2, #64	; 0x40
 80007fc:	2178      	movs	r1, #120	; 0x78
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <ssd1306_WriteData+0x2c>)
 8000800:	f000 ff60 	bl	80016c4 <HAL_I2C_Mem_Write>
#endif
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c

08000810 <is_at_bottom_boundary>:
    int16_t radius;
    MovementDirection movement_direction;
} Circle;


static inline bool is_at_bottom_boundary(const Circle *const circle) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    return circle->y >= SSD1306_HEIGHT - circle->radius;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000826:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800082a:	429a      	cmp	r2, r3
 800082c:	bfac      	ite	ge
 800082e:	2301      	movge	r3, #1
 8000830:	2300      	movlt	r3, #0
 8000832:	b2db      	uxtb	r3, r3
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <is_at_top_boundary>:

static inline bool is_at_top_boundary(const Circle *const circle) {
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
    return circle->y <= circle->radius;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	bfd4      	ite	le
 8000856:	2301      	movle	r3, #1
 8000858:	2300      	movgt	r3, #0
 800085a:	b2db      	uxtb	r3, r3
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <is_at_vertical_boundary>:

static inline bool is_at_vertical_boundary(const Circle *const circle) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
    return is_at_bottom_boundary(circle) || is_at_top_boundary(circle);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffce 	bl	8000810 <is_at_bottom_boundary>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <is_at_vertical_boundary+0x20>
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffdf 	bl	800083e <is_at_top_boundary>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <is_at_vertical_boundary+0x24>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <is_at_vertical_boundary+0x26>
 800088a:	2300      	movs	r3, #0
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <is_at_left_boundary>:

static inline bool is_at_left_boundary(const Circle *const circle) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
    return circle->x <= circle->radius;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	bfd4      	ite	le
 80008b2:	2301      	movle	r3, #1
 80008b4:	2300      	movgt	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <is_at_right_boundary>:

static inline bool is_at_right_boundary(const Circle *const circle) {
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
    return circle->x >= SSD1306_WIDTH - circle->radius;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80008dc:	429a      	cmp	r2, r3
 80008de:	bfac      	ite	ge
 80008e0:	2301      	movge	r3, #1
 80008e2:	2300      	movlt	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <is_at_horizontal_boundary>:

static inline bool is_at_horizontal_boundary(const Circle *const circle) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    return is_at_left_boundary(circle) || is_at_right_boundary(circle);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ffce 	bl	800089a <is_at_left_boundary>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d105      	bne.n	8000910 <is_at_horizontal_boundary+0x20>
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffdc 	bl	80008c2 <is_at_right_boundary>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <is_at_horizontal_boundary+0x24>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <is_at_horizontal_boundary+0x26>
 8000914:	2300      	movs	r3, #0
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <update_circle_x>:
 *      Author: borsuk
 */
#include "ssd1306_circle.h"


static inline void update_circle_x(Circle *const circle) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	HorizontalDirection horizontal_direction = circle->movement_direction.horizontal_direction;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	79db      	ldrb	r3, [r3, #7]
 8000930:	73fb      	strb	r3, [r7, #15]

    switch(horizontal_direction) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d01a      	beq.n	800096e <update_circle_x+0x4a>
 8000938:	2b02      	cmp	r3, #2
 800093a:	dc19      	bgt.n	8000970 <update_circle_x+0x4c>
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <update_circle_x+0x22>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00a      	beq.n	800095a <update_circle_x+0x36>
            --circle->x;
            break;
        case STRAIGHT:
            break;
    }
}
 8000944:	e014      	b.n	8000970 <update_circle_x+0x4c>
            ++circle->x;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094c:	b29b      	uxth	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	801a      	strh	r2, [r3, #0]
            break;
 8000958:	e00a      	b.n	8000970 <update_circle_x+0x4c>
            --circle->x;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000960:	b29b      	uxth	r3, r3
 8000962:	3b01      	subs	r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	b21a      	sxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	801a      	strh	r2, [r3, #0]
            break;
 800096c:	e000      	b.n	8000970 <update_circle_x+0x4c>
            break;
 800096e:	bf00      	nop
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <update_circle_y>:

static inline void update_circle_y(Circle *const circle) {
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	VerticalDirection vertical_direction = circle->movement_direction.vertical_direction;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	73fb      	strb	r3, [r7, #15]

    switch(vertical_direction) {
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <update_circle_y+0x2c>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d113      	bne.n	80009ba <update_circle_y+0x40>
        case DOWN:
            ++circle->y;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	b21a      	sxth	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	805a      	strh	r2, [r3, #2]
            break;
 80009a4:	e009      	b.n	80009ba <update_circle_y+0x40>
        case UP:
            --circle->y;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	805a      	strh	r2, [r3, #2]
            break;
 80009b8:	bf00      	nop
    }
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <update_circle_position>:

void inline update_circle_position(Circle *const circle) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	update_circle_x(circle);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ffa9 	bl	8000924 <update_circle_x>
	update_circle_y(circle);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffd1 	bl	800097a <update_circle_y>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <toggle_circle_y_mode>:

static inline void toggle_circle_y_mode(VerticalDirection *const vertical_direction) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	*vertical_direction = !(*vertical_direction);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	701a      	strb	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <toggle_circle_x_mode>:

static inline void toggle_circle_x_mode(HorizontalDirection *const horizontal_direction) {
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	*horizontal_direction = !(*horizontal_direction);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	701a      	strb	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <assign_random_horizontal_direction>:

void assign_random_horizontal_direction(HorizontalDirection *const horizontal_direction) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	 srand(HAL_GetTick());
 8000a34:	f000 fa6c 	bl	8000f10 <HAL_GetTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fff8 	bl	8002a30 <srand>
    *horizontal_direction = (HorizontalDirection)(rand() % 3);
 8000a40:	f002 f824 	bl	8002a8c <rand>
 8000a44:	4602      	mov	r2, r0
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <assign_random_horizontal_direction+0x3c>)
 8000a48:	fb83 3102 	smull	r3, r1, r3, r2
 8000a4c:	17d3      	asrs	r3, r2, #31
 8000a4e:	1ac9      	subs	r1, r1, r3
 8000a50:	460b      	mov	r3, r1
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	440b      	add	r3, r1
 8000a56:	1ad1      	subs	r1, r2, r3
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	701a      	strb	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	55555556 	.word	0x55555556

08000a6c <update_vertical_movement_on_hit>:

static inline void update_vertical_movement_on_hit(Circle *const circle) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    if (is_at_vertical_boundary(circle)) {
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fef6 	bl	8000866 <is_at_vertical_boundary>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d009      	beq.n	8000a94 <update_vertical_movement_on_hit+0x28>
        toggle_circle_y_mode(&circle->movement_direction.vertical_direction);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3306      	adds	r3, #6
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffab 	bl	80009e0 <toggle_circle_y_mode>
        assign_random_horizontal_direction(&circle->movement_direction.horizontal_direction);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3307      	adds	r3, #7
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffcc 	bl	8000a2c <assign_random_horizontal_direction>
    }
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <update_horizontal_movement_on_hit>:

static inline void update_horizontal_movement_on_hit(Circle *const circle) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    if (is_at_horizontal_boundary(circle)) {
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff23 	bl	80008f0 <is_at_horizontal_boundary>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <update_horizontal_movement_on_hit+0x1e>
        toggle_circle_x_mode(&circle->movement_direction.horizontal_direction);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3307      	adds	r3, #7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffa6 	bl	8000a06 <toggle_circle_x_mode>
    }
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <update_circle_on_wall_hit>:

inline void update_circle_on_wall_hit(Circle *const circle) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
    update_vertical_movement_on_hit(circle);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffce 	bl	8000a6c <update_vertical_movement_on_hit>
    update_horizontal_movement_on_hit(circle);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffe3 	bl	8000a9c <update_horizontal_movement_on_hit>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_MspInit+0x40>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_MspInit+0x40>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_MspInit+0x40>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_MspInit+0x40>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_MspInit+0x40>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_MspInit+0x40>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <HAL_I2C_MspInit+0x70>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d123      	bne.n	8000b8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <HAL_I2C_MspInit+0x78>)
 8000b70:	f000 fae0 	bl	8001134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7e:	61d3      	str	r3, [r2, #28]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <HAL_UART_MspInit+0x8c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d131      	bne.n	8000c24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000c06:	f000 fa95 	bl	8001134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000c20:	f000 fa88 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7e:	f000 f935 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  return 1;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <_kill>:

int _kill(int pid, int sig)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c9e:	f001 fe95 	bl	80029cc <__errno>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2216      	movs	r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_exit>:

void _exit (int status)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe7 	bl	8000c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cc6:	e7fe      	b.n	8000cc6 <_exit+0x12>

08000cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
  }

  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
  }
  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d60:	605a      	str	r2, [r3, #4]
  return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f001 fdfe 	bl	80029cc <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20005000 	.word	0x20005000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000534 	.word	0x20000534
 8000e04:	20000550 	.word	0x20000550

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff fff8 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1a:	490c      	ldr	r1, [pc, #48]	; (8000e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e30:	4c09      	ldr	r4, [pc, #36]	; (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 fdcb 	bl	80029d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff f983 	bl	800014c <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e50:	08003ca4 	.word	0x08003ca4
  ldr r2, =_sbss
 8000e54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e58:	2000054c 	.word	0x2000054c

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f92b 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe30 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f935 	bl	800111a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 f90b 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000538 	.word	0x20000538

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000538 	.word	0x20000538

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f7ff ff90 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff49 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e169      	b.n	800141c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001148:	2201      	movs	r2, #1
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8158 	bne.w	8001416 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a9a      	ldr	r2, [pc, #616]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d05e      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001170:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d875      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001176:	4a98      	ldr	r2, [pc, #608]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d058      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 800117c:	4a96      	ldr	r2, [pc, #600]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d86f      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001182:	4a96      	ldr	r2, [pc, #600]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d052      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001188:	4a94      	ldr	r2, [pc, #592]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d869      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800118e:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04c      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001194:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d863      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800119a:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d046      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 80011a0:	4a90      	ldr	r2, [pc, #576]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d85d      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d82a      	bhi.n	8001200 <HAL_GPIO_Init+0xcc>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d859      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_GPIO_Init+0x80>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	08001209 	.word	0x08001209
 80011bc:	0800121b 	.word	0x0800121b
 80011c0:	0800125d 	.word	0x0800125d
 80011c4:	08001263 	.word	0x08001263
 80011c8:	08001263 	.word	0x08001263
 80011cc:	08001263 	.word	0x08001263
 80011d0:	08001263 	.word	0x08001263
 80011d4:	08001263 	.word	0x08001263
 80011d8:	08001263 	.word	0x08001263
 80011dc:	08001263 	.word	0x08001263
 80011e0:	08001263 	.word	0x08001263
 80011e4:	08001263 	.word	0x08001263
 80011e8:	08001263 	.word	0x08001263
 80011ec:	08001263 	.word	0x08001263
 80011f0:	08001263 	.word	0x08001263
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001225 	.word	0x08001225
 8001200:	4a79      	ldr	r2, [pc, #484]	; (80013e8 <HAL_GPIO_Init+0x2b4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e029      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e024      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01f      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e01a      	b.n	8001264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e013      	b.n	8001264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e009      	b.n	8001264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e003      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x130>
          break;
 8001262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d801      	bhi.n	800126e <HAL_GPIO_Init+0x13a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_Init+0x13e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	d802      	bhi.n	8001280 <HAL_GPIO_Init+0x14c>
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x152>
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	3b08      	subs	r3, #8
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	210f      	movs	r1, #15
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	6a39      	ldr	r1, [r7, #32]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80b1 	beq.w	8001416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <HAL_GPIO_Init+0x2c0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <HAL_GPIO_Init+0x2c4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <HAL_GPIO_Init+0x2cc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1e0>
 8001310:	2303      	movs	r3, #3
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001314:	2304      	movs	r3, #4
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	492f      	ldr	r1, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	492c      	ldr	r1, [pc, #176]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4922      	ldr	r1, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	491e      	ldr	r1, [pc, #120]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4918      	ldr	r1, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d021      	beq.n	8001408 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e021      	b.n	8001416 <HAL_GPIO_Init+0x2e2>
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40011400 	.word	0x40011400
 8001404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_GPIO_Init+0x304>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	43db      	mvns	r3, r3
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3301      	adds	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae8e 	bne.w	8001148 <HAL_GPIO_Init+0x14>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	372c      	adds	r7, #44	; 0x2c
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e12b      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fb5e 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2224      	movs	r2, #36	; 0x24
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f001 f970 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a81      	ldr	r2, [pc, #516]	; (80016b0 <HAL_I2C_Init+0x274>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d807      	bhi.n	80014c0 <HAL_I2C_Init+0x84>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_I2C_Init+0x278>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e006      	b.n	80014ce <HAL_I2C_Init+0x92>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a7d      	ldr	r2, [pc, #500]	; (80016b8 <HAL_I2C_Init+0x27c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0e7      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a78      	ldr	r2, [pc, #480]	; (80016bc <HAL_I2C_Init+0x280>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_I2C_Init+0x274>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d802      	bhi.n	8001510 <HAL_I2C_Init+0xd4>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	e009      	b.n	8001524 <HAL_I2C_Init+0xe8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_I2C_Init+0x284>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	3301      	adds	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	495c      	ldr	r1, [pc, #368]	; (80016b0 <HAL_I2C_Init+0x274>)
 8001540:	428b      	cmp	r3, r1
 8001542:	d819      	bhi.n	8001578 <HAL_I2C_Init+0x13c>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001558:	400b      	ands	r3, r1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <HAL_I2C_Init+0x138>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e59      	subs	r1, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fbb1 f3f3 	udiv	r3, r1, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	e051      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001574:	2304      	movs	r3, #4
 8001576:	e04f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_I2C_Init+0x168>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e012      	b.n	80015ca <HAL_I2C_Init+0x18e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	0099      	lsls	r1, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x196>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e022      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10e      	bne.n	80015f8 <HAL_I2C_Init+0x1bc>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e58      	subs	r0, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f6:	e00f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	0099      	lsls	r1, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	fbb0 f3f3 	udiv	r3, r0, r3
 800160e:	3301      	adds	r3, #1
 8001610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	6809      	ldr	r1, [r1, #0]
 800161c:	4313      	orrs	r3, r2
 800161e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6911      	ldr	r1, [r2, #16]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68d2      	ldr	r2, [r2, #12]
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	001e847f 	.word	0x001e847f
 80016b8:	003d08ff 	.word	0x003d08ff
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	817b      	strh	r3, [r7, #10]
 80016d6:	460b      	mov	r3, r1
 80016d8:	813b      	strh	r3, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016de:	f7ff fc17 	bl	8000f10 <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	f040 80d9 	bne.w	80018a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2319      	movs	r3, #25
 80016f8:	2201      	movs	r2, #1
 80016fa:	496d      	ldr	r1, [pc, #436]	; (80018b0 <HAL_I2C_Mem_Write+0x1ec>)
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fa9f 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	e0cc      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_I2C_Mem_Write+0x56>
 8001716:	2302      	movs	r3, #2
 8001718:	e0c5      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d007      	beq.n	8001740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2221      	movs	r2, #33	; 0x21
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001782:	88f8      	ldrh	r0, [r7, #6]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4603      	mov	r3, r0
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f9be 	bl	8001b14 <I2C_RequestMemoryWrite>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d052      	beq.n	8001844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e081      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fb64 	bl	8001e74 <I2C_WaitOnTXEFlagUntilTimeout>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d107      	bne.n	80017ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b04      	cmp	r3, #4
 800180a:	d11b      	bne.n	8001844 <HAL_I2C_Mem_Write+0x180>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d017      	beq.n	8001844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1aa      	bne.n	80017a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fb57 	bl	8001f04 <I2C_WaitOnBTFFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	2b04      	cmp	r3, #4
 8001862:	d107      	bne.n	8001874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e016      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00100002 	.word	0x00100002
 80018b4:	ffff0000 	.word	0xffff0000

080018b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	460b      	mov	r3, r1
 80018c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fb22 	bl	8000f10 <HAL_GetTick>
 80018cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b20      	cmp	r3, #32
 80018dc:	f040 8111 	bne.w	8001b02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2319      	movs	r3, #25
 80018e6:	2201      	movs	r2, #1
 80018e8:	4988      	ldr	r1, [pc, #544]	; (8001b0c <HAL_I2C_IsDeviceReady+0x254>)
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f9a8 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	e104      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_I2C_IsDeviceReady+0x50>
 8001904:	2302      	movs	r3, #2
 8001906:	e0fd      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d007      	beq.n	800192e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2224      	movs	r2, #36	; 0x24
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a70      	ldr	r2, [pc, #448]	; (8001b10 <HAL_I2C_IsDeviceReady+0x258>)
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2200      	movs	r2, #0
 800196a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f966 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d103      	bne.n	8001992 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0b6      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fab3 	bl	8000f10 <HAL_GetTick>
 80019aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019da:	e025      	b.n	8001a28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019dc:	f7ff fa98 	bl	8000f10 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d302      	bcc.n	80019f2 <HAL_I2C_IsDeviceReady+0x13a>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	22a0      	movs	r2, #160	; 0xa0
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2ba0      	cmp	r3, #160	; 0xa0
 8001a32:	d005      	beq.n	8001a40 <HAL_I2C_IsDeviceReady+0x188>
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_I2C_IsDeviceReady+0x188>
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0cd      	beq.n	80019dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d129      	bne.n	8001aaa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2319      	movs	r3, #25
 8001a82:	2201      	movs	r2, #1
 8001a84:	4921      	ldr	r1, [pc, #132]	; (8001b0c <HAL_I2C_IsDeviceReady+0x254>)
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f8da 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e036      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e02c      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ac2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2319      	movs	r3, #25
 8001aca:	2201      	movs	r2, #1
 8001acc:	490f      	ldr	r1, [pc, #60]	; (8001b0c <HAL_I2C_IsDeviceReady+0x254>)
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f8b6 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e012      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	f4ff af32 	bcc.w	8001952 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	00100002 	.word	0x00100002
 8001b10:	ffff0000 	.word	0xffff0000

08001b14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	817b      	strh	r3, [r7, #10]
 8001b26:	460b      	mov	r3, r1
 8001b28:	813b      	strh	r3, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f878 	bl	8001c40 <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b64:	d103      	bne.n	8001b6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e05f      	b.n	8001c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b72:	897b      	ldrh	r3, [r7, #10]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	492d      	ldr	r1, [pc, #180]	; (8001c3c <I2C_RequestMemoryWrite+0x128>)
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f8d3 	bl	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e04c      	b.n	8001c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	6a39      	ldr	r1, [r7, #32]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f95e 	bl	8001e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d107      	bne.n	8001bd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e02b      	b.n	8001c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	e021      	b.n	8001c30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfc:	6a39      	ldr	r1, [r7, #32]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f938 	bl	8001e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00d      	beq.n	8001c26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d107      	bne.n	8001c22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e005      	b.n	8001c32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c26:	893b      	ldrh	r3, [r7, #8]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	00010002 	.word	0x00010002

08001c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c50:	e048      	b.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c58:	d044      	beq.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7ff f959 	bl	8000f10 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d139      	bne.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10d      	bne.n	8001c96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	e00c      	b.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d116      	bne.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e023      	b.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	0c1b      	lsrs	r3, r3, #16
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10d      	bne.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	e00c      	b.n	8001d24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	43da      	mvns	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4013      	ands	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d093      	beq.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d42:	e071      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d52:	d123      	bne.n	8001d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e067      	b.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da2:	d041      	beq.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da4:	f7ff f8b4 	bl	8000f10 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d302      	bcc.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d136      	bne.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10c      	bne.n	8001dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	e00b      	b.n	8001df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	43da      	mvns	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4013      	ands	r3, r2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0220 	orr.w	r2, r3, #32
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e021      	b.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10c      	bne.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e00b      	b.n	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4013      	ands	r3, r2
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f af6d 	bne.w	8001d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e80:	e034      	b.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f886 	bl	8001f94 <I2C_IsAcknowledgeFailed>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e034      	b.n	8001efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e98:	d028      	beq.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7ff f839 	bl	8000f10 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11d      	bne.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d016      	beq.n	8001eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e007      	b.n	8001efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d1c3      	bne.n	8001e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f10:	e034      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f83e 	bl	8001f94 <I2C_IsAcknowledgeFailed>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e034      	b.n	8001f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d028      	beq.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7fe fff1 	bl	8000f10 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11d      	bne.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d016      	beq.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e007      	b.n	8001f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d1c3      	bne.n	8001f12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001faa:	d11b      	bne.n	8001fe4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f043 0204 	orr.w	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e272      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4b8f      	ldr	r3, [pc, #572]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d112      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
 8002028:	4b8c      	ldr	r3, [pc, #560]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06c      	beq.n	800211c <HAL_RCC_OscConfig+0x12c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d168      	bne.n	800211c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e24c      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x76>
 8002058:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e02e      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b7b      	ldr	r3, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a77      	ldr	r2, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0xbc>
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff20 	bl	8000f10 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff1c 	bl	8000f10 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e200      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff0c 	bl	8000f10 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ff08 	bl	8000f10 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ec      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x10c>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1c0      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4939      	ldr	r1, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe fec1 	bl	8000f10 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe febd 	bl	8000f10 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1a1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fea0 	bl	8000f10 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fe9c 	bl	8000f10 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e180      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03a      	beq.n	8002274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7fe fe80 	bl	8000f10 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fe7c 	bl	8000f10 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e160      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 face 	bl	80027d4 <RCC_Delay>
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fe66 	bl	8000f10 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe fe62 	bl	8000f10 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d908      	bls.n	8002268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e146      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a6 	beq.w	80023ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b7f      	ldr	r3, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7e      	ldr	r2, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe23 	bl	8000f10 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fe1f 	bl	8000f10 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e103      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x334>
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x356>
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a5d      	ldr	r2, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a57      	ldr	r2, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fdd3 	bl	8000f10 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fdcf 	bl	8000f10 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x37e>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe fdbd 	bl	8000f10 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fdb9 	bl	8000f10 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e09b      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d061      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d146      	bne.n	800247a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd8d 	bl	8000f10 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fd89 	bl	8000f10 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e06d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4921      	ldr	r1, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a19      	ldr	r1, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	430b      	orrs	r3, r1
 8002446:	491b      	ldr	r1, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe fd5d 	bl	8000f10 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fd59 	bl	8000f10 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
 8002478:	e035      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fd46 	bl	8000f10 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fd42 	bl	8000f10 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e026      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e019      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x500>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4965      	ldr	r1, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e073      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4936      	ldr	r1, [pc, #216]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fc94 	bl	8000f10 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe fc90 	bl	8000f10 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e053      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4922      	ldr	r1, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fbf2 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08003b28 	.word	0x08003b28
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
 80026f6:	e027      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fa:	613b      	str	r3, [r7, #16]
      break;
 80026fc:	e027      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c5b      	lsrs	r3, r3, #17
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	fb03 f202 	mul.w	r2, r3, r2
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RCC_GetSysClockFreq+0xa4>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	693b      	ldr	r3, [r7, #16]
}
 8002750:	4618      	mov	r0, r3
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08003b40 	.word	0x08003b40
 8002768:	08003b50 	.word	0x08003b50
 800276c:	003d0900 	.word	0x003d0900

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <HAL_RCC_GetHCLKFreq+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff2 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08003b38 	.word	0x08003b38

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffde 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08003b38 	.word	0x08003b38

080027d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <RCC_Delay+0x34>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <RCC_Delay+0x38>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a5b      	lsrs	r3, r3, #9
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f0:	bf00      	nop
  }
  while (Delay --);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <RCC_Delay+0x1c>
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000000 	.word	0x20000000
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e042      	b.n	80028a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f9b2 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f82b 	bl	80028b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028ea:	f023 030c 	bic.w	r3, r3, #12
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <UART_SetConfig+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d103      	bne.n	8002920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002918:	f7ff ff48 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	e002      	b.n	8002926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002920:	f7ff ff30 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8002924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009a      	lsls	r2, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <UART_SetConfig+0x118>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	0119      	lsls	r1, r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	441a      	add	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fbb2 f2f3 	udiv	r2, r2, r3
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <UART_SetConfig+0x118>)
 800295e:	fba3 0302 	umull	r0, r3, r3, r2
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2064      	movs	r0, #100	; 0x64
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	3332      	adds	r3, #50	; 0x32
 8002970:	4a15      	ldr	r2, [pc, #84]	; (80029c8 <UART_SetConfig+0x118>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	4419      	add	r1, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fbb2 f2f3 	udiv	r2, r2, r3
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <UART_SetConfig+0x118>)
 8002996:	fba3 0302 	umull	r0, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2064      	movs	r0, #100	; 0x64
 800299e:	fb00 f303 	mul.w	r3, r0, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	; 0x32
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <UART_SetConfig+0x118>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	440a      	add	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40013800 	.word	0x40013800
 80029c8:	51eb851f 	.word	0x51eb851f

080029cc <__errno>:
 80029cc:	4b01      	ldr	r3, [pc, #4]	; (80029d4 <__errno+0x8>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	2000000c 	.word	0x2000000c

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	2600      	movs	r6, #0
 80029dc:	4d0c      	ldr	r5, [pc, #48]	; (8002a10 <__libc_init_array+0x38>)
 80029de:	4c0d      	ldr	r4, [pc, #52]	; (8002a14 <__libc_init_array+0x3c>)
 80029e0:	1b64      	subs	r4, r4, r5
 80029e2:	10a4      	asrs	r4, r4, #2
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	f001 f88e 	bl	8003b08 <_init>
 80029ec:	2600      	movs	r6, #0
 80029ee:	4d0a      	ldr	r5, [pc, #40]	; (8002a18 <__libc_init_array+0x40>)
 80029f0:	4c0a      	ldr	r4, [pc, #40]	; (8002a1c <__libc_init_array+0x44>)
 80029f2:	1b64      	subs	r4, r4, r5
 80029f4:	10a4      	asrs	r4, r4, #2
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	08003c9c 	.word	0x08003c9c
 8002a14:	08003c9c 	.word	0x08003c9c
 8002a18:	08003c9c 	.word	0x08003c9c
 8002a1c:	08003ca0 	.word	0x08003ca0

08002a20 <memset>:
 8002a20:	4603      	mov	r3, r0
 8002a22:	4402      	add	r2, r0
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d100      	bne.n	8002a2a <memset+0xa>
 8002a28:	4770      	bx	lr
 8002a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2e:	e7f9      	b.n	8002a24 <memset+0x4>

08002a30 <srand>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <srand+0x44>)
 8002a34:	4604      	mov	r4, r0
 8002a36:	681d      	ldr	r5, [r3, #0]
 8002a38:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a3a:	b9b3      	cbnz	r3, 8002a6a <srand+0x3a>
 8002a3c:	2018      	movs	r0, #24
 8002a3e:	f000 f893 	bl	8002b68 <malloc>
 8002a42:	4602      	mov	r2, r0
 8002a44:	63a8      	str	r0, [r5, #56]	; 0x38
 8002a46:	b920      	cbnz	r0, 8002a52 <srand+0x22>
 8002a48:	2142      	movs	r1, #66	; 0x42
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <srand+0x48>)
 8002a4c:	480b      	ldr	r0, [pc, #44]	; (8002a7c <srand+0x4c>)
 8002a4e:	f000 f85b 	bl	8002b08 <__assert_func>
 8002a52:	490b      	ldr	r1, [pc, #44]	; (8002a80 <srand+0x50>)
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <srand+0x54>)
 8002a56:	e9c0 1300 	strd	r1, r3, [r0]
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <srand+0x58>)
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	6083      	str	r3, [r0, #8]
 8002a60:	230b      	movs	r3, #11
 8002a62:	8183      	strh	r3, [r0, #12]
 8002a64:	2001      	movs	r0, #1
 8002a66:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a6e:	611c      	str	r4, [r3, #16]
 8002a70:	615a      	str	r2, [r3, #20]
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	08003b58 	.word	0x08003b58
 8002a7c:	08003b6f 	.word	0x08003b6f
 8002a80:	abcd330e 	.word	0xabcd330e
 8002a84:	e66d1234 	.word	0xe66d1234
 8002a88:	0005deec 	.word	0x0005deec

08002a8c <rand>:
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <rand+0x5c>)
 8002a8e:	b510      	push	{r4, lr}
 8002a90:	681c      	ldr	r4, [r3, #0]
 8002a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a94:	b9b3      	cbnz	r3, 8002ac4 <rand+0x38>
 8002a96:	2018      	movs	r0, #24
 8002a98:	f000 f866 	bl	8002b68 <malloc>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002aa0:	b920      	cbnz	r0, 8002aac <rand+0x20>
 8002aa2:	214e      	movs	r1, #78	; 0x4e
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <rand+0x60>)
 8002aa6:	4812      	ldr	r0, [pc, #72]	; (8002af0 <rand+0x64>)
 8002aa8:	f000 f82e 	bl	8002b08 <__assert_func>
 8002aac:	4911      	ldr	r1, [pc, #68]	; (8002af4 <rand+0x68>)
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <rand+0x6c>)
 8002ab0:	e9c0 1300 	strd	r1, r3, [r0]
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <rand+0x70>)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6083      	str	r3, [r0, #8]
 8002aba:	230b      	movs	r3, #11
 8002abc:	8183      	strh	r3, [r0, #12]
 8002abe:	2001      	movs	r0, #1
 8002ac0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002ac4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <rand+0x74>)
 8002ac8:	6920      	ldr	r0, [r4, #16]
 8002aca:	6963      	ldr	r3, [r4, #20]
 8002acc:	4342      	muls	r2, r0
 8002ace:	490d      	ldr	r1, [pc, #52]	; (8002b04 <rand+0x78>)
 8002ad0:	fb01 2203 	mla	r2, r1, r3, r2
 8002ad4:	fba0 0101 	umull	r0, r1, r0, r1
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	eb42 0001 	adc.w	r0, r2, r1
 8002ade:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002ae2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	08003b58 	.word	0x08003b58
 8002af0:	08003b6f 	.word	0x08003b6f
 8002af4:	abcd330e 	.word	0xabcd330e
 8002af8:	e66d1234 	.word	0xe66d1234
 8002afc:	0005deec 	.word	0x0005deec
 8002b00:	5851f42d 	.word	0x5851f42d
 8002b04:	4c957f2d 	.word	0x4c957f2d

08002b08 <__assert_func>:
 8002b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <__assert_func+0x2c>)
 8002b10:	4605      	mov	r5, r0
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68d8      	ldr	r0, [r3, #12]
 8002b16:	b14c      	cbz	r4, 8002b2c <__assert_func+0x24>
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <__assert_func+0x30>)
 8002b1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b1e:	9100      	str	r1, [sp, #0]
 8002b20:	462b      	mov	r3, r5
 8002b22:	4906      	ldr	r1, [pc, #24]	; (8002b3c <__assert_func+0x34>)
 8002b24:	f000 f80e 	bl	8002b44 <fiprintf>
 8002b28:	f000 fcc0 	bl	80034ac <abort>
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__assert_func+0x38>)
 8002b2e:	461c      	mov	r4, r3
 8002b30:	e7f3      	b.n	8002b1a <__assert_func+0x12>
 8002b32:	bf00      	nop
 8002b34:	2000000c 	.word	0x2000000c
 8002b38:	08003bca 	.word	0x08003bca
 8002b3c:	08003bd7 	.word	0x08003bd7
 8002b40:	08003c05 	.word	0x08003c05

08002b44 <fiprintf>:
 8002b44:	b40e      	push	{r1, r2, r3}
 8002b46:	b503      	push	{r0, r1, lr}
 8002b48:	4601      	mov	r1, r0
 8002b4a:	ab03      	add	r3, sp, #12
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <fiprintf+0x20>)
 8002b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b52:	6800      	ldr	r0, [r0, #0]
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	f000 f913 	bl	8002d80 <_vfiprintf_r>
 8002b5a:	b002      	add	sp, #8
 8002b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b60:	b003      	add	sp, #12
 8002b62:	4770      	bx	lr
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <malloc>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <malloc+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f000 b86b 	b.w	8002c48 <_malloc_r>
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <_free_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	d040      	beq.n	8002c02 <_free_r+0x8a>
 8002b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b84:	1f0c      	subs	r4, r1, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bfb8      	it	lt
 8002b8a:	18e4      	addlt	r4, r4, r3
 8002b8c:	f000 fec0 	bl	8003910 <__malloc_lock>
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <_free_r+0x8c>)
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	b933      	cbnz	r3, 8002ba4 <_free_r+0x2c>
 8002b96:	6063      	str	r3, [r4, #4]
 8002b98:	6014      	str	r4, [r2, #0]
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba0:	f000 bebc 	b.w	800391c <__malloc_unlock>
 8002ba4:	42a3      	cmp	r3, r4
 8002ba6:	d908      	bls.n	8002bba <_free_r+0x42>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	bf01      	itttt	eq
 8002bb0:	6819      	ldreq	r1, [r3, #0]
 8002bb2:	685b      	ldreq	r3, [r3, #4]
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	e7ed      	b.n	8002b96 <_free_r+0x1e>
 8002bba:	461a      	mov	r2, r3
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b10b      	cbz	r3, 8002bc4 <_free_r+0x4c>
 8002bc0:	42a3      	cmp	r3, r4
 8002bc2:	d9fa      	bls.n	8002bba <_free_r+0x42>
 8002bc4:	6811      	ldr	r1, [r2, #0]
 8002bc6:	1850      	adds	r0, r2, r1
 8002bc8:	42a0      	cmp	r0, r4
 8002bca:	d10b      	bne.n	8002be4 <_free_r+0x6c>
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	4401      	add	r1, r0
 8002bd0:	1850      	adds	r0, r2, r1
 8002bd2:	4283      	cmp	r3, r0
 8002bd4:	6011      	str	r1, [r2, #0]
 8002bd6:	d1e0      	bne.n	8002b9a <_free_r+0x22>
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4401      	add	r1, r0
 8002bde:	6011      	str	r1, [r2, #0]
 8002be0:	6053      	str	r3, [r2, #4]
 8002be2:	e7da      	b.n	8002b9a <_free_r+0x22>
 8002be4:	d902      	bls.n	8002bec <_free_r+0x74>
 8002be6:	230c      	movs	r3, #12
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	e7d6      	b.n	8002b9a <_free_r+0x22>
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	1821      	adds	r1, r4, r0
 8002bf0:	428b      	cmp	r3, r1
 8002bf2:	bf01      	itttt	eq
 8002bf4:	6819      	ldreq	r1, [r3, #0]
 8002bf6:	685b      	ldreq	r3, [r3, #4]
 8002bf8:	1809      	addeq	r1, r1, r0
 8002bfa:	6021      	streq	r1, [r4, #0]
 8002bfc:	6063      	str	r3, [r4, #4]
 8002bfe:	6054      	str	r4, [r2, #4]
 8002c00:	e7cb      	b.n	8002b9a <_free_r+0x22>
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
 8002c04:	2000053c 	.word	0x2000053c

08002c08 <sbrk_aligned>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	4e0e      	ldr	r6, [pc, #56]	; (8002c44 <sbrk_aligned+0x3c>)
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	6831      	ldr	r1, [r6, #0]
 8002c10:	4605      	mov	r5, r0
 8002c12:	b911      	cbnz	r1, 8002c1a <sbrk_aligned+0x12>
 8002c14:	f000 fb7a 	bl	800330c <_sbrk_r>
 8002c18:	6030      	str	r0, [r6, #0]
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 fb75 	bl	800330c <_sbrk_r>
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d00a      	beq.n	8002c3c <sbrk_aligned+0x34>
 8002c26:	1cc4      	adds	r4, r0, #3
 8002c28:	f024 0403 	bic.w	r4, r4, #3
 8002c2c:	42a0      	cmp	r0, r4
 8002c2e:	d007      	beq.n	8002c40 <sbrk_aligned+0x38>
 8002c30:	1a21      	subs	r1, r4, r0
 8002c32:	4628      	mov	r0, r5
 8002c34:	f000 fb6a 	bl	800330c <_sbrk_r>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d101      	bne.n	8002c40 <sbrk_aligned+0x38>
 8002c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c40:	4620      	mov	r0, r4
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	20000540 	.word	0x20000540

08002c48 <_malloc_r>:
 8002c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c4c:	1ccd      	adds	r5, r1, #3
 8002c4e:	f025 0503 	bic.w	r5, r5, #3
 8002c52:	3508      	adds	r5, #8
 8002c54:	2d0c      	cmp	r5, #12
 8002c56:	bf38      	it	cc
 8002c58:	250c      	movcc	r5, #12
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	db01      	blt.n	8002c64 <_malloc_r+0x1c>
 8002c60:	42a9      	cmp	r1, r5
 8002c62:	d905      	bls.n	8002c70 <_malloc_r+0x28>
 8002c64:	230c      	movs	r3, #12
 8002c66:	2600      	movs	r6, #0
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c70:	4e2e      	ldr	r6, [pc, #184]	; (8002d2c <_malloc_r+0xe4>)
 8002c72:	f000 fe4d 	bl	8003910 <__malloc_lock>
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	461c      	mov	r4, r3
 8002c7a:	bb34      	cbnz	r4, 8002cca <_malloc_r+0x82>
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f7ff ffc2 	bl	8002c08 <sbrk_aligned>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	4604      	mov	r4, r0
 8002c88:	d14d      	bne.n	8002d26 <_malloc_r+0xde>
 8002c8a:	6834      	ldr	r4, [r6, #0]
 8002c8c:	4626      	mov	r6, r4
 8002c8e:	2e00      	cmp	r6, #0
 8002c90:	d140      	bne.n	8002d14 <_malloc_r+0xcc>
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	4631      	mov	r1, r6
 8002c96:	4638      	mov	r0, r7
 8002c98:	eb04 0803 	add.w	r8, r4, r3
 8002c9c:	f000 fb36 	bl	800330c <_sbrk_r>
 8002ca0:	4580      	cmp	r8, r0
 8002ca2:	d13a      	bne.n	8002d1a <_malloc_r+0xd2>
 8002ca4:	6821      	ldr	r1, [r4, #0]
 8002ca6:	3503      	adds	r5, #3
 8002ca8:	1a6d      	subs	r5, r5, r1
 8002caa:	f025 0503 	bic.w	r5, r5, #3
 8002cae:	3508      	adds	r5, #8
 8002cb0:	2d0c      	cmp	r5, #12
 8002cb2:	bf38      	it	cc
 8002cb4:	250c      	movcc	r5, #12
 8002cb6:	4638      	mov	r0, r7
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f7ff ffa5 	bl	8002c08 <sbrk_aligned>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d02b      	beq.n	8002d1a <_malloc_r+0xd2>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	442b      	add	r3, r5
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	e00e      	b.n	8002ce8 <_malloc_r+0xa0>
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	1b52      	subs	r2, r2, r5
 8002cce:	d41e      	bmi.n	8002d0e <_malloc_r+0xc6>
 8002cd0:	2a0b      	cmp	r2, #11
 8002cd2:	d916      	bls.n	8002d02 <_malloc_r+0xba>
 8002cd4:	1961      	adds	r1, r4, r5
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	6025      	str	r5, [r4, #0]
 8002cda:	bf18      	it	ne
 8002cdc:	6059      	strne	r1, [r3, #4]
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	bf08      	it	eq
 8002ce2:	6031      	streq	r1, [r6, #0]
 8002ce4:	5162      	str	r2, [r4, r5]
 8002ce6:	604b      	str	r3, [r1, #4]
 8002ce8:	4638      	mov	r0, r7
 8002cea:	f104 060b 	add.w	r6, r4, #11
 8002cee:	f000 fe15 	bl	800391c <__malloc_unlock>
 8002cf2:	f026 0607 	bic.w	r6, r6, #7
 8002cf6:	1d23      	adds	r3, r4, #4
 8002cf8:	1af2      	subs	r2, r6, r3
 8002cfa:	d0b6      	beq.n	8002c6a <_malloc_r+0x22>
 8002cfc:	1b9b      	subs	r3, r3, r6
 8002cfe:	50a3      	str	r3, [r4, r2]
 8002d00:	e7b3      	b.n	8002c6a <_malloc_r+0x22>
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	bf0c      	ite	eq
 8002d08:	6032      	streq	r2, [r6, #0]
 8002d0a:	605a      	strne	r2, [r3, #4]
 8002d0c:	e7ec      	b.n	8002ce8 <_malloc_r+0xa0>
 8002d0e:	4623      	mov	r3, r4
 8002d10:	6864      	ldr	r4, [r4, #4]
 8002d12:	e7b2      	b.n	8002c7a <_malloc_r+0x32>
 8002d14:	4634      	mov	r4, r6
 8002d16:	6876      	ldr	r6, [r6, #4]
 8002d18:	e7b9      	b.n	8002c8e <_malloc_r+0x46>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	f000 fdfc 	bl	800391c <__malloc_unlock>
 8002d24:	e7a1      	b.n	8002c6a <_malloc_r+0x22>
 8002d26:	6025      	str	r5, [r4, #0]
 8002d28:	e7de      	b.n	8002ce8 <_malloc_r+0xa0>
 8002d2a:	bf00      	nop
 8002d2c:	2000053c 	.word	0x2000053c

08002d30 <__sfputc_r>:
 8002d30:	6893      	ldr	r3, [r2, #8]
 8002d32:	b410      	push	{r4}
 8002d34:	3b01      	subs	r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	da07      	bge.n	8002d4c <__sfputc_r+0x1c>
 8002d3c:	6994      	ldr	r4, [r2, #24]
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	db01      	blt.n	8002d46 <__sfputc_r+0x16>
 8002d42:	290a      	cmp	r1, #10
 8002d44:	d102      	bne.n	8002d4c <__sfputc_r+0x1c>
 8002d46:	bc10      	pop	{r4}
 8002d48:	f000 baf0 	b.w	800332c <__swbuf_r>
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	1c58      	adds	r0, r3, #1
 8002d50:	6010      	str	r0, [r2, #0]
 8002d52:	7019      	strb	r1, [r3, #0]
 8002d54:	4608      	mov	r0, r1
 8002d56:	bc10      	pop	{r4}
 8002d58:	4770      	bx	lr

08002d5a <__sfputs_r>:
 8002d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	460f      	mov	r7, r1
 8002d60:	4614      	mov	r4, r2
 8002d62:	18d5      	adds	r5, r2, r3
 8002d64:	42ac      	cmp	r4, r5
 8002d66:	d101      	bne.n	8002d6c <__sfputs_r+0x12>
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e007      	b.n	8002d7c <__sfputs_r+0x22>
 8002d6c:	463a      	mov	r2, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d74:	f7ff ffdc 	bl	8002d30 <__sfputc_r>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d1f3      	bne.n	8002d64 <__sfputs_r+0xa>
 8002d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d80 <_vfiprintf_r>:
 8002d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d84:	460d      	mov	r5, r1
 8002d86:	4614      	mov	r4, r2
 8002d88:	4698      	mov	r8, r3
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	b09d      	sub	sp, #116	; 0x74
 8002d8e:	b118      	cbz	r0, 8002d98 <_vfiprintf_r+0x18>
 8002d90:	6983      	ldr	r3, [r0, #24]
 8002d92:	b90b      	cbnz	r3, 8002d98 <_vfiprintf_r+0x18>
 8002d94:	f000 fca8 	bl	80036e8 <__sinit>
 8002d98:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <_vfiprintf_r+0x240>)
 8002d9a:	429d      	cmp	r5, r3
 8002d9c:	d11b      	bne.n	8002dd6 <_vfiprintf_r+0x56>
 8002d9e:	6875      	ldr	r5, [r6, #4]
 8002da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002da2:	07d9      	lsls	r1, r3, #31
 8002da4:	d405      	bmi.n	8002db2 <_vfiprintf_r+0x32>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	059a      	lsls	r2, r3, #22
 8002daa:	d402      	bmi.n	8002db2 <_vfiprintf_r+0x32>
 8002dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dae:	f000 fd39 	bl	8003824 <__retarget_lock_acquire_recursive>
 8002db2:	89ab      	ldrh	r3, [r5, #12]
 8002db4:	071b      	lsls	r3, r3, #28
 8002db6:	d501      	bpl.n	8002dbc <_vfiprintf_r+0x3c>
 8002db8:	692b      	ldr	r3, [r5, #16]
 8002dba:	b9eb      	cbnz	r3, 8002df8 <_vfiprintf_r+0x78>
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 fb06 	bl	80033d0 <__swsetup_r>
 8002dc4:	b1c0      	cbz	r0, 8002df8 <_vfiprintf_r+0x78>
 8002dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dc8:	07dc      	lsls	r4, r3, #31
 8002dca:	d50e      	bpl.n	8002dea <_vfiprintf_r+0x6a>
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd0:	b01d      	add	sp, #116	; 0x74
 8002dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd6:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <_vfiprintf_r+0x244>)
 8002dd8:	429d      	cmp	r5, r3
 8002dda:	d101      	bne.n	8002de0 <_vfiprintf_r+0x60>
 8002ddc:	68b5      	ldr	r5, [r6, #8]
 8002dde:	e7df      	b.n	8002da0 <_vfiprintf_r+0x20>
 8002de0:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <_vfiprintf_r+0x248>)
 8002de2:	429d      	cmp	r5, r3
 8002de4:	bf08      	it	eq
 8002de6:	68f5      	ldreq	r5, [r6, #12]
 8002de8:	e7da      	b.n	8002da0 <_vfiprintf_r+0x20>
 8002dea:	89ab      	ldrh	r3, [r5, #12]
 8002dec:	0598      	lsls	r0, r3, #22
 8002dee:	d4ed      	bmi.n	8002dcc <_vfiprintf_r+0x4c>
 8002df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002df2:	f000 fd18 	bl	8003826 <__retarget_lock_release_recursive>
 8002df6:	e7e9      	b.n	8002dcc <_vfiprintf_r+0x4c>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e02:	2330      	movs	r3, #48	; 0x30
 8002e04:	f04f 0901 	mov.w	r9, #1
 8002e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002fcc <_vfiprintf_r+0x24c>
 8002e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e14:	4623      	mov	r3, r4
 8002e16:	469a      	mov	sl, r3
 8002e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e1c:	b10a      	cbz	r2, 8002e22 <_vfiprintf_r+0xa2>
 8002e1e:	2a25      	cmp	r2, #37	; 0x25
 8002e20:	d1f9      	bne.n	8002e16 <_vfiprintf_r+0x96>
 8002e22:	ebba 0b04 	subs.w	fp, sl, r4
 8002e26:	d00b      	beq.n	8002e40 <_vfiprintf_r+0xc0>
 8002e28:	465b      	mov	r3, fp
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f7ff ff93 	bl	8002d5a <__sfputs_r>
 8002e34:	3001      	adds	r0, #1
 8002e36:	f000 80aa 	beq.w	8002f8e <_vfiprintf_r+0x20e>
 8002e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e3c:	445a      	add	r2, fp
 8002e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e40:	f89a 3000 	ldrb.w	r3, [sl]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a2 	beq.w	8002f8e <_vfiprintf_r+0x20e>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e54:	f10a 0a01 	add.w	sl, sl, #1
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	9307      	str	r3, [sp, #28]
 8002e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e60:	931a      	str	r3, [sp, #104]	; 0x68
 8002e62:	4654      	mov	r4, sl
 8002e64:	2205      	movs	r2, #5
 8002e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6a:	4858      	ldr	r0, [pc, #352]	; (8002fcc <_vfiprintf_r+0x24c>)
 8002e6c:	f000 fd42 	bl	80038f4 <memchr>
 8002e70:	9a04      	ldr	r2, [sp, #16]
 8002e72:	b9d8      	cbnz	r0, 8002eac <_vfiprintf_r+0x12c>
 8002e74:	06d1      	lsls	r1, r2, #27
 8002e76:	bf44      	itt	mi
 8002e78:	2320      	movmi	r3, #32
 8002e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e7e:	0713      	lsls	r3, r2, #28
 8002e80:	bf44      	itt	mi
 8002e82:	232b      	movmi	r3, #43	; 0x2b
 8002e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e88:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e8e:	d015      	beq.n	8002ebc <_vfiprintf_r+0x13c>
 8002e90:	4654      	mov	r4, sl
 8002e92:	2000      	movs	r0, #0
 8002e94:	f04f 0c0a 	mov.w	ip, #10
 8002e98:	9a07      	ldr	r2, [sp, #28]
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea0:	3b30      	subs	r3, #48	; 0x30
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	d94e      	bls.n	8002f44 <_vfiprintf_r+0x1c4>
 8002ea6:	b1b0      	cbz	r0, 8002ed6 <_vfiprintf_r+0x156>
 8002ea8:	9207      	str	r2, [sp, #28]
 8002eaa:	e014      	b.n	8002ed6 <_vfiprintf_r+0x156>
 8002eac:	eba0 0308 	sub.w	r3, r0, r8
 8002eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	46a2      	mov	sl, r4
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	e7d2      	b.n	8002e62 <_vfiprintf_r+0xe2>
 8002ebc:	9b03      	ldr	r3, [sp, #12]
 8002ebe:	1d19      	adds	r1, r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	9103      	str	r1, [sp, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bfbb      	ittet	lt
 8002ec8:	425b      	neglt	r3, r3
 8002eca:	f042 0202 	orrlt.w	r2, r2, #2
 8002ece:	9307      	strge	r3, [sp, #28]
 8002ed0:	9307      	strlt	r3, [sp, #28]
 8002ed2:	bfb8      	it	lt
 8002ed4:	9204      	strlt	r2, [sp, #16]
 8002ed6:	7823      	ldrb	r3, [r4, #0]
 8002ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eda:	d10c      	bne.n	8002ef6 <_vfiprintf_r+0x176>
 8002edc:	7863      	ldrb	r3, [r4, #1]
 8002ede:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee0:	d135      	bne.n	8002f4e <_vfiprintf_r+0x1ce>
 8002ee2:	9b03      	ldr	r3, [sp, #12]
 8002ee4:	3402      	adds	r4, #2
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	9203      	str	r2, [sp, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfb8      	it	lt
 8002ef0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ef4:	9305      	str	r3, [sp, #20]
 8002ef6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002fd0 <_vfiprintf_r+0x250>
 8002efa:	2203      	movs	r2, #3
 8002efc:	4650      	mov	r0, sl
 8002efe:	7821      	ldrb	r1, [r4, #0]
 8002f00:	f000 fcf8 	bl	80038f4 <memchr>
 8002f04:	b140      	cbz	r0, 8002f18 <_vfiprintf_r+0x198>
 8002f06:	2340      	movs	r3, #64	; 0x40
 8002f08:	eba0 000a 	sub.w	r0, r0, sl
 8002f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8002f10:	9b04      	ldr	r3, [sp, #16]
 8002f12:	3401      	adds	r4, #1
 8002f14:	4303      	orrs	r3, r0
 8002f16:	9304      	str	r3, [sp, #16]
 8002f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f1c:	2206      	movs	r2, #6
 8002f1e:	482d      	ldr	r0, [pc, #180]	; (8002fd4 <_vfiprintf_r+0x254>)
 8002f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f24:	f000 fce6 	bl	80038f4 <memchr>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d03f      	beq.n	8002fac <_vfiprintf_r+0x22c>
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <_vfiprintf_r+0x258>)
 8002f2e:	bb1b      	cbnz	r3, 8002f78 <_vfiprintf_r+0x1f8>
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	3307      	adds	r3, #7
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	3308      	adds	r3, #8
 8002f3a:	9303      	str	r3, [sp, #12]
 8002f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f3e:	443b      	add	r3, r7
 8002f40:	9309      	str	r3, [sp, #36]	; 0x24
 8002f42:	e767      	b.n	8002e14 <_vfiprintf_r+0x94>
 8002f44:	460c      	mov	r4, r1
 8002f46:	2001      	movs	r0, #1
 8002f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f4c:	e7a5      	b.n	8002e9a <_vfiprintf_r+0x11a>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f04f 0c0a 	mov.w	ip, #10
 8002f54:	4619      	mov	r1, r3
 8002f56:	3401      	adds	r4, #1
 8002f58:	9305      	str	r3, [sp, #20]
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f60:	3a30      	subs	r2, #48	; 0x30
 8002f62:	2a09      	cmp	r2, #9
 8002f64:	d903      	bls.n	8002f6e <_vfiprintf_r+0x1ee>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0c5      	beq.n	8002ef6 <_vfiprintf_r+0x176>
 8002f6a:	9105      	str	r1, [sp, #20]
 8002f6c:	e7c3      	b.n	8002ef6 <_vfiprintf_r+0x176>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	2301      	movs	r3, #1
 8002f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f76:	e7f0      	b.n	8002f5a <_vfiprintf_r+0x1da>
 8002f78:	ab03      	add	r3, sp, #12
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	462a      	mov	r2, r5
 8002f7e:	4630      	mov	r0, r6
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <_vfiprintf_r+0x25c>)
 8002f82:	a904      	add	r1, sp, #16
 8002f84:	f3af 8000 	nop.w
 8002f88:	4607      	mov	r7, r0
 8002f8a:	1c78      	adds	r0, r7, #1
 8002f8c:	d1d6      	bne.n	8002f3c <_vfiprintf_r+0x1bc>
 8002f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f90:	07d9      	lsls	r1, r3, #31
 8002f92:	d405      	bmi.n	8002fa0 <_vfiprintf_r+0x220>
 8002f94:	89ab      	ldrh	r3, [r5, #12]
 8002f96:	059a      	lsls	r2, r3, #22
 8002f98:	d402      	bmi.n	8002fa0 <_vfiprintf_r+0x220>
 8002f9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f9c:	f000 fc43 	bl	8003826 <__retarget_lock_release_recursive>
 8002fa0:	89ab      	ldrh	r3, [r5, #12]
 8002fa2:	065b      	lsls	r3, r3, #25
 8002fa4:	f53f af12 	bmi.w	8002dcc <_vfiprintf_r+0x4c>
 8002fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002faa:	e711      	b.n	8002dd0 <_vfiprintf_r+0x50>
 8002fac:	ab03      	add	r3, sp, #12
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <_vfiprintf_r+0x25c>)
 8002fb6:	a904      	add	r1, sp, #16
 8002fb8:	f000 f882 	bl	80030c0 <_printf_i>
 8002fbc:	e7e4      	b.n	8002f88 <_vfiprintf_r+0x208>
 8002fbe:	bf00      	nop
 8002fc0:	08003c5c 	.word	0x08003c5c
 8002fc4:	08003c7c 	.word	0x08003c7c
 8002fc8:	08003c3c 	.word	0x08003c3c
 8002fcc:	08003c06 	.word	0x08003c06
 8002fd0:	08003c0c 	.word	0x08003c0c
 8002fd4:	08003c10 	.word	0x08003c10
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	08002d5b 	.word	0x08002d5b

08002fe0 <_printf_common>:
 8002fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe4:	4616      	mov	r6, r2
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	688a      	ldr	r2, [r1, #8]
 8002fea:	690b      	ldr	r3, [r1, #16]
 8002fec:	4607      	mov	r7, r0
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	bfb8      	it	lt
 8002ff2:	4613      	movlt	r3, r2
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003000:	b10a      	cbz	r2, 8003006 <_printf_common+0x26>
 8003002:	3301      	adds	r3, #1
 8003004:	6033      	str	r3, [r6, #0]
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	0699      	lsls	r1, r3, #26
 800300a:	bf42      	ittt	mi
 800300c:	6833      	ldrmi	r3, [r6, #0]
 800300e:	3302      	addmi	r3, #2
 8003010:	6033      	strmi	r3, [r6, #0]
 8003012:	6825      	ldr	r5, [r4, #0]
 8003014:	f015 0506 	ands.w	r5, r5, #6
 8003018:	d106      	bne.n	8003028 <_printf_common+0x48>
 800301a:	f104 0a19 	add.w	sl, r4, #25
 800301e:	68e3      	ldr	r3, [r4, #12]
 8003020:	6832      	ldr	r2, [r6, #0]
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	42ab      	cmp	r3, r5
 8003026:	dc28      	bgt.n	800307a <_printf_common+0x9a>
 8003028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800302c:	1e13      	subs	r3, r2, #0
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	bf18      	it	ne
 8003032:	2301      	movne	r3, #1
 8003034:	0692      	lsls	r2, r2, #26
 8003036:	d42d      	bmi.n	8003094 <_printf_common+0xb4>
 8003038:	4649      	mov	r1, r9
 800303a:	4638      	mov	r0, r7
 800303c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003040:	47c0      	blx	r8
 8003042:	3001      	adds	r0, #1
 8003044:	d020      	beq.n	8003088 <_printf_common+0xa8>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	68e5      	ldr	r5, [r4, #12]
 800304a:	f003 0306 	and.w	r3, r3, #6
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf18      	it	ne
 8003052:	2500      	movne	r5, #0
 8003054:	6832      	ldr	r2, [r6, #0]
 8003056:	f04f 0600 	mov.w	r6, #0
 800305a:	68a3      	ldr	r3, [r4, #8]
 800305c:	bf08      	it	eq
 800305e:	1aad      	subeq	r5, r5, r2
 8003060:	6922      	ldr	r2, [r4, #16]
 8003062:	bf08      	it	eq
 8003064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003068:	4293      	cmp	r3, r2
 800306a:	bfc4      	itt	gt
 800306c:	1a9b      	subgt	r3, r3, r2
 800306e:	18ed      	addgt	r5, r5, r3
 8003070:	341a      	adds	r4, #26
 8003072:	42b5      	cmp	r5, r6
 8003074:	d11a      	bne.n	80030ac <_printf_common+0xcc>
 8003076:	2000      	movs	r0, #0
 8003078:	e008      	b.n	800308c <_printf_common+0xac>
 800307a:	2301      	movs	r3, #1
 800307c:	4652      	mov	r2, sl
 800307e:	4649      	mov	r1, r9
 8003080:	4638      	mov	r0, r7
 8003082:	47c0      	blx	r8
 8003084:	3001      	adds	r0, #1
 8003086:	d103      	bne.n	8003090 <_printf_common+0xb0>
 8003088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003090:	3501      	adds	r5, #1
 8003092:	e7c4      	b.n	800301e <_printf_common+0x3e>
 8003094:	2030      	movs	r0, #48	; 0x30
 8003096:	18e1      	adds	r1, r4, r3
 8003098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030a2:	4422      	add	r2, r4
 80030a4:	3302      	adds	r3, #2
 80030a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030aa:	e7c5      	b.n	8003038 <_printf_common+0x58>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4622      	mov	r2, r4
 80030b0:	4649      	mov	r1, r9
 80030b2:	4638      	mov	r0, r7
 80030b4:	47c0      	blx	r8
 80030b6:	3001      	adds	r0, #1
 80030b8:	d0e6      	beq.n	8003088 <_printf_common+0xa8>
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7d9      	b.n	8003072 <_printf_common+0x92>
	...

080030c0 <_printf_i>:
 80030c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c4:	7e0f      	ldrb	r7, [r1, #24]
 80030c6:	4691      	mov	r9, r2
 80030c8:	2f78      	cmp	r7, #120	; 0x78
 80030ca:	4680      	mov	r8, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	469a      	mov	sl, r3
 80030d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030d6:	d807      	bhi.n	80030e8 <_printf_i+0x28>
 80030d8:	2f62      	cmp	r7, #98	; 0x62
 80030da:	d80a      	bhi.n	80030f2 <_printf_i+0x32>
 80030dc:	2f00      	cmp	r7, #0
 80030de:	f000 80d9 	beq.w	8003294 <_printf_i+0x1d4>
 80030e2:	2f58      	cmp	r7, #88	; 0x58
 80030e4:	f000 80a4 	beq.w	8003230 <_printf_i+0x170>
 80030e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030f0:	e03a      	b.n	8003168 <_printf_i+0xa8>
 80030f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030f6:	2b15      	cmp	r3, #21
 80030f8:	d8f6      	bhi.n	80030e8 <_printf_i+0x28>
 80030fa:	a101      	add	r1, pc, #4	; (adr r1, 8003100 <_printf_i+0x40>)
 80030fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003100:	08003159 	.word	0x08003159
 8003104:	0800316d 	.word	0x0800316d
 8003108:	080030e9 	.word	0x080030e9
 800310c:	080030e9 	.word	0x080030e9
 8003110:	080030e9 	.word	0x080030e9
 8003114:	080030e9 	.word	0x080030e9
 8003118:	0800316d 	.word	0x0800316d
 800311c:	080030e9 	.word	0x080030e9
 8003120:	080030e9 	.word	0x080030e9
 8003124:	080030e9 	.word	0x080030e9
 8003128:	080030e9 	.word	0x080030e9
 800312c:	0800327b 	.word	0x0800327b
 8003130:	0800319d 	.word	0x0800319d
 8003134:	0800325d 	.word	0x0800325d
 8003138:	080030e9 	.word	0x080030e9
 800313c:	080030e9 	.word	0x080030e9
 8003140:	0800329d 	.word	0x0800329d
 8003144:	080030e9 	.word	0x080030e9
 8003148:	0800319d 	.word	0x0800319d
 800314c:	080030e9 	.word	0x080030e9
 8003150:	080030e9 	.word	0x080030e9
 8003154:	08003265 	.word	0x08003265
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	1d1a      	adds	r2, r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	602a      	str	r2, [r5, #0]
 8003160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003168:	2301      	movs	r3, #1
 800316a:	e0a4      	b.n	80032b6 <_printf_i+0x1f6>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	6829      	ldr	r1, [r5, #0]
 8003170:	0606      	lsls	r6, r0, #24
 8003172:	f101 0304 	add.w	r3, r1, #4
 8003176:	d50a      	bpl.n	800318e <_printf_i+0xce>
 8003178:	680e      	ldr	r6, [r1, #0]
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	2e00      	cmp	r6, #0
 800317e:	da03      	bge.n	8003188 <_printf_i+0xc8>
 8003180:	232d      	movs	r3, #45	; 0x2d
 8003182:	4276      	negs	r6, r6
 8003184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003188:	230a      	movs	r3, #10
 800318a:	485e      	ldr	r0, [pc, #376]	; (8003304 <_printf_i+0x244>)
 800318c:	e019      	b.n	80031c2 <_printf_i+0x102>
 800318e:	680e      	ldr	r6, [r1, #0]
 8003190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003194:	602b      	str	r3, [r5, #0]
 8003196:	bf18      	it	ne
 8003198:	b236      	sxthne	r6, r6
 800319a:	e7ef      	b.n	800317c <_printf_i+0xbc>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	1d19      	adds	r1, r3, #4
 80031a2:	6029      	str	r1, [r5, #0]
 80031a4:	0601      	lsls	r1, r0, #24
 80031a6:	d501      	bpl.n	80031ac <_printf_i+0xec>
 80031a8:	681e      	ldr	r6, [r3, #0]
 80031aa:	e002      	b.n	80031b2 <_printf_i+0xf2>
 80031ac:	0646      	lsls	r6, r0, #25
 80031ae:	d5fb      	bpl.n	80031a8 <_printf_i+0xe8>
 80031b0:	881e      	ldrh	r6, [r3, #0]
 80031b2:	2f6f      	cmp	r7, #111	; 0x6f
 80031b4:	bf0c      	ite	eq
 80031b6:	2308      	moveq	r3, #8
 80031b8:	230a      	movne	r3, #10
 80031ba:	4852      	ldr	r0, [pc, #328]	; (8003304 <_printf_i+0x244>)
 80031bc:	2100      	movs	r1, #0
 80031be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031c2:	6865      	ldr	r5, [r4, #4]
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	bfa8      	it	ge
 80031c8:	6821      	ldrge	r1, [r4, #0]
 80031ca:	60a5      	str	r5, [r4, #8]
 80031cc:	bfa4      	itt	ge
 80031ce:	f021 0104 	bicge.w	r1, r1, #4
 80031d2:	6021      	strge	r1, [r4, #0]
 80031d4:	b90e      	cbnz	r6, 80031da <_printf_i+0x11a>
 80031d6:	2d00      	cmp	r5, #0
 80031d8:	d04d      	beq.n	8003276 <_printf_i+0x1b6>
 80031da:	4615      	mov	r5, r2
 80031dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80031e0:	fb03 6711 	mls	r7, r3, r1, r6
 80031e4:	5dc7      	ldrb	r7, [r0, r7]
 80031e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031ea:	4637      	mov	r7, r6
 80031ec:	42bb      	cmp	r3, r7
 80031ee:	460e      	mov	r6, r1
 80031f0:	d9f4      	bls.n	80031dc <_printf_i+0x11c>
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d10b      	bne.n	800320e <_printf_i+0x14e>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	07de      	lsls	r6, r3, #31
 80031fa:	d508      	bpl.n	800320e <_printf_i+0x14e>
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	6861      	ldr	r1, [r4, #4]
 8003200:	4299      	cmp	r1, r3
 8003202:	bfde      	ittt	le
 8003204:	2330      	movle	r3, #48	; 0x30
 8003206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800320a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800320e:	1b52      	subs	r2, r2, r5
 8003210:	6122      	str	r2, [r4, #16]
 8003212:	464b      	mov	r3, r9
 8003214:	4621      	mov	r1, r4
 8003216:	4640      	mov	r0, r8
 8003218:	f8cd a000 	str.w	sl, [sp]
 800321c:	aa03      	add	r2, sp, #12
 800321e:	f7ff fedf 	bl	8002fe0 <_printf_common>
 8003222:	3001      	adds	r0, #1
 8003224:	d14c      	bne.n	80032c0 <_printf_i+0x200>
 8003226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800322a:	b004      	add	sp, #16
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	4834      	ldr	r0, [pc, #208]	; (8003304 <_printf_i+0x244>)
 8003232:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003236:	6829      	ldr	r1, [r5, #0]
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f851 6b04 	ldr.w	r6, [r1], #4
 800323e:	6029      	str	r1, [r5, #0]
 8003240:	061d      	lsls	r5, r3, #24
 8003242:	d514      	bpl.n	800326e <_printf_i+0x1ae>
 8003244:	07df      	lsls	r7, r3, #31
 8003246:	bf44      	itt	mi
 8003248:	f043 0320 	orrmi.w	r3, r3, #32
 800324c:	6023      	strmi	r3, [r4, #0]
 800324e:	b91e      	cbnz	r6, 8003258 <_printf_i+0x198>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	2310      	movs	r3, #16
 800325a:	e7af      	b.n	80031bc <_printf_i+0xfc>
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	f043 0320 	orr.w	r3, r3, #32
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	2378      	movs	r3, #120	; 0x78
 8003266:	4828      	ldr	r0, [pc, #160]	; (8003308 <_printf_i+0x248>)
 8003268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800326c:	e7e3      	b.n	8003236 <_printf_i+0x176>
 800326e:	0659      	lsls	r1, r3, #25
 8003270:	bf48      	it	mi
 8003272:	b2b6      	uxthmi	r6, r6
 8003274:	e7e6      	b.n	8003244 <_printf_i+0x184>
 8003276:	4615      	mov	r5, r2
 8003278:	e7bb      	b.n	80031f2 <_printf_i+0x132>
 800327a:	682b      	ldr	r3, [r5, #0]
 800327c:	6826      	ldr	r6, [r4, #0]
 800327e:	1d18      	adds	r0, r3, #4
 8003280:	6961      	ldr	r1, [r4, #20]
 8003282:	6028      	str	r0, [r5, #0]
 8003284:	0635      	lsls	r5, r6, #24
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	d501      	bpl.n	800328e <_printf_i+0x1ce>
 800328a:	6019      	str	r1, [r3, #0]
 800328c:	e002      	b.n	8003294 <_printf_i+0x1d4>
 800328e:	0670      	lsls	r0, r6, #25
 8003290:	d5fb      	bpl.n	800328a <_printf_i+0x1ca>
 8003292:	8019      	strh	r1, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	4615      	mov	r5, r2
 8003298:	6123      	str	r3, [r4, #16]
 800329a:	e7ba      	b.n	8003212 <_printf_i+0x152>
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	1d1a      	adds	r2, r3, #4
 80032a2:	602a      	str	r2, [r5, #0]
 80032a4:	681d      	ldr	r5, [r3, #0]
 80032a6:	6862      	ldr	r2, [r4, #4]
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 fb23 	bl	80038f4 <memchr>
 80032ae:	b108      	cbz	r0, 80032b4 <_printf_i+0x1f4>
 80032b0:	1b40      	subs	r0, r0, r5
 80032b2:	6060      	str	r0, [r4, #4]
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	6123      	str	r3, [r4, #16]
 80032b8:	2300      	movs	r3, #0
 80032ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032be:	e7a8      	b.n	8003212 <_printf_i+0x152>
 80032c0:	462a      	mov	r2, r5
 80032c2:	4649      	mov	r1, r9
 80032c4:	4640      	mov	r0, r8
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	47d0      	blx	sl
 80032ca:	3001      	adds	r0, #1
 80032cc:	d0ab      	beq.n	8003226 <_printf_i+0x166>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	079b      	lsls	r3, r3, #30
 80032d2:	d413      	bmi.n	80032fc <_printf_i+0x23c>
 80032d4:	68e0      	ldr	r0, [r4, #12]
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	4298      	cmp	r0, r3
 80032da:	bfb8      	it	lt
 80032dc:	4618      	movlt	r0, r3
 80032de:	e7a4      	b.n	800322a <_printf_i+0x16a>
 80032e0:	2301      	movs	r3, #1
 80032e2:	4632      	mov	r2, r6
 80032e4:	4649      	mov	r1, r9
 80032e6:	4640      	mov	r0, r8
 80032e8:	47d0      	blx	sl
 80032ea:	3001      	adds	r0, #1
 80032ec:	d09b      	beq.n	8003226 <_printf_i+0x166>
 80032ee:	3501      	adds	r5, #1
 80032f0:	68e3      	ldr	r3, [r4, #12]
 80032f2:	9903      	ldr	r1, [sp, #12]
 80032f4:	1a5b      	subs	r3, r3, r1
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	dcf2      	bgt.n	80032e0 <_printf_i+0x220>
 80032fa:	e7eb      	b.n	80032d4 <_printf_i+0x214>
 80032fc:	2500      	movs	r5, #0
 80032fe:	f104 0619 	add.w	r6, r4, #25
 8003302:	e7f5      	b.n	80032f0 <_printf_i+0x230>
 8003304:	08003c17 	.word	0x08003c17
 8003308:	08003c28 	.word	0x08003c28

0800330c <_sbrk_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	2300      	movs	r3, #0
 8003310:	4d05      	ldr	r5, [pc, #20]	; (8003328 <_sbrk_r+0x1c>)
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	f7fd fd40 	bl	8000d9c <_sbrk>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_sbrk_r+0x1a>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_sbrk_r+0x1a>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20000548 	.word	0x20000548

0800332c <__swbuf_r>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	460e      	mov	r6, r1
 8003330:	4614      	mov	r4, r2
 8003332:	4605      	mov	r5, r0
 8003334:	b118      	cbz	r0, 800333e <__swbuf_r+0x12>
 8003336:	6983      	ldr	r3, [r0, #24]
 8003338:	b90b      	cbnz	r3, 800333e <__swbuf_r+0x12>
 800333a:	f000 f9d5 	bl	80036e8 <__sinit>
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <__swbuf_r+0x98>)
 8003340:	429c      	cmp	r4, r3
 8003342:	d12b      	bne.n	800339c <__swbuf_r+0x70>
 8003344:	686c      	ldr	r4, [r5, #4]
 8003346:	69a3      	ldr	r3, [r4, #24]
 8003348:	60a3      	str	r3, [r4, #8]
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	071a      	lsls	r2, r3, #28
 800334e:	d52f      	bpl.n	80033b0 <__swbuf_r+0x84>
 8003350:	6923      	ldr	r3, [r4, #16]
 8003352:	b36b      	cbz	r3, 80033b0 <__swbuf_r+0x84>
 8003354:	6923      	ldr	r3, [r4, #16]
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	b2f6      	uxtb	r6, r6
 800335a:	1ac0      	subs	r0, r0, r3
 800335c:	6963      	ldr	r3, [r4, #20]
 800335e:	4637      	mov	r7, r6
 8003360:	4283      	cmp	r3, r0
 8003362:	dc04      	bgt.n	800336e <__swbuf_r+0x42>
 8003364:	4621      	mov	r1, r4
 8003366:	4628      	mov	r0, r5
 8003368:	f000 f92a 	bl	80035c0 <_fflush_r>
 800336c:	bb30      	cbnz	r0, 80033bc <__swbuf_r+0x90>
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	3001      	adds	r0, #1
 8003372:	3b01      	subs	r3, #1
 8003374:	60a3      	str	r3, [r4, #8]
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	701e      	strb	r6, [r3, #0]
 800337e:	6963      	ldr	r3, [r4, #20]
 8003380:	4283      	cmp	r3, r0
 8003382:	d004      	beq.n	800338e <__swbuf_r+0x62>
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	07db      	lsls	r3, r3, #31
 8003388:	d506      	bpl.n	8003398 <__swbuf_r+0x6c>
 800338a:	2e0a      	cmp	r6, #10
 800338c:	d104      	bne.n	8003398 <__swbuf_r+0x6c>
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f000 f915 	bl	80035c0 <_fflush_r>
 8003396:	b988      	cbnz	r0, 80033bc <__swbuf_r+0x90>
 8003398:	4638      	mov	r0, r7
 800339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <__swbuf_r+0x9c>)
 800339e:	429c      	cmp	r4, r3
 80033a0:	d101      	bne.n	80033a6 <__swbuf_r+0x7a>
 80033a2:	68ac      	ldr	r4, [r5, #8]
 80033a4:	e7cf      	b.n	8003346 <__swbuf_r+0x1a>
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <__swbuf_r+0xa0>)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	bf08      	it	eq
 80033ac:	68ec      	ldreq	r4, [r5, #12]
 80033ae:	e7ca      	b.n	8003346 <__swbuf_r+0x1a>
 80033b0:	4621      	mov	r1, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 f80c 	bl	80033d0 <__swsetup_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d0cb      	beq.n	8003354 <__swbuf_r+0x28>
 80033bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80033c0:	e7ea      	b.n	8003398 <__swbuf_r+0x6c>
 80033c2:	bf00      	nop
 80033c4:	08003c5c 	.word	0x08003c5c
 80033c8:	08003c7c 	.word	0x08003c7c
 80033cc:	08003c3c 	.word	0x08003c3c

080033d0 <__swsetup_r>:
 80033d0:	4b32      	ldr	r3, [pc, #200]	; (800349c <__swsetup_r+0xcc>)
 80033d2:	b570      	push	{r4, r5, r6, lr}
 80033d4:	681d      	ldr	r5, [r3, #0]
 80033d6:	4606      	mov	r6, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	b125      	cbz	r5, 80033e6 <__swsetup_r+0x16>
 80033dc:	69ab      	ldr	r3, [r5, #24]
 80033de:	b913      	cbnz	r3, 80033e6 <__swsetup_r+0x16>
 80033e0:	4628      	mov	r0, r5
 80033e2:	f000 f981 	bl	80036e8 <__sinit>
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <__swsetup_r+0xd0>)
 80033e8:	429c      	cmp	r4, r3
 80033ea:	d10f      	bne.n	800340c <__swsetup_r+0x3c>
 80033ec:	686c      	ldr	r4, [r5, #4]
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033f4:	0719      	lsls	r1, r3, #28
 80033f6:	d42c      	bmi.n	8003452 <__swsetup_r+0x82>
 80033f8:	06dd      	lsls	r5, r3, #27
 80033fa:	d411      	bmi.n	8003420 <__swsetup_r+0x50>
 80033fc:	2309      	movs	r3, #9
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003408:	81a3      	strh	r3, [r4, #12]
 800340a:	e03e      	b.n	800348a <__swsetup_r+0xba>
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <__swsetup_r+0xd4>)
 800340e:	429c      	cmp	r4, r3
 8003410:	d101      	bne.n	8003416 <__swsetup_r+0x46>
 8003412:	68ac      	ldr	r4, [r5, #8]
 8003414:	e7eb      	b.n	80033ee <__swsetup_r+0x1e>
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <__swsetup_r+0xd8>)
 8003418:	429c      	cmp	r4, r3
 800341a:	bf08      	it	eq
 800341c:	68ec      	ldreq	r4, [r5, #12]
 800341e:	e7e6      	b.n	80033ee <__swsetup_r+0x1e>
 8003420:	0758      	lsls	r0, r3, #29
 8003422:	d512      	bpl.n	800344a <__swsetup_r+0x7a>
 8003424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003426:	b141      	cbz	r1, 800343a <__swsetup_r+0x6a>
 8003428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800342c:	4299      	cmp	r1, r3
 800342e:	d002      	beq.n	8003436 <__swsetup_r+0x66>
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff fba1 	bl	8002b78 <_free_r>
 8003436:	2300      	movs	r3, #0
 8003438:	6363      	str	r3, [r4, #52]	; 0x34
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	2300      	movs	r3, #0
 8003444:	6063      	str	r3, [r4, #4]
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	b94b      	cbnz	r3, 800346a <__swsetup_r+0x9a>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d003      	beq.n	800346a <__swsetup_r+0x9a>
 8003462:	4621      	mov	r1, r4
 8003464:	4630      	mov	r0, r6
 8003466:	f000 fa05 	bl	8003874 <__smakebuf_r>
 800346a:	89a0      	ldrh	r0, [r4, #12]
 800346c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003470:	f010 0301 	ands.w	r3, r0, #1
 8003474:	d00a      	beq.n	800348c <__swsetup_r+0xbc>
 8003476:	2300      	movs	r3, #0
 8003478:	60a3      	str	r3, [r4, #8]
 800347a:	6963      	ldr	r3, [r4, #20]
 800347c:	425b      	negs	r3, r3
 800347e:	61a3      	str	r3, [r4, #24]
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	b943      	cbnz	r3, 8003496 <__swsetup_r+0xc6>
 8003484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003488:	d1ba      	bne.n	8003400 <__swsetup_r+0x30>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	0781      	lsls	r1, r0, #30
 800348e:	bf58      	it	pl
 8003490:	6963      	ldrpl	r3, [r4, #20]
 8003492:	60a3      	str	r3, [r4, #8]
 8003494:	e7f4      	b.n	8003480 <__swsetup_r+0xb0>
 8003496:	2000      	movs	r0, #0
 8003498:	e7f7      	b.n	800348a <__swsetup_r+0xba>
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	08003c5c 	.word	0x08003c5c
 80034a4:	08003c7c 	.word	0x08003c7c
 80034a8:	08003c3c 	.word	0x08003c3c

080034ac <abort>:
 80034ac:	2006      	movs	r0, #6
 80034ae:	b508      	push	{r3, lr}
 80034b0:	f000 fa62 	bl	8003978 <raise>
 80034b4:	2001      	movs	r0, #1
 80034b6:	f7fd fbfd 	bl	8000cb4 <_exit>
	...

080034bc <__sflush_r>:
 80034bc:	898a      	ldrh	r2, [r1, #12]
 80034be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c0:	4605      	mov	r5, r0
 80034c2:	0710      	lsls	r0, r2, #28
 80034c4:	460c      	mov	r4, r1
 80034c6:	d457      	bmi.n	8003578 <__sflush_r+0xbc>
 80034c8:	684b      	ldr	r3, [r1, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dc04      	bgt.n	80034d8 <__sflush_r+0x1c>
 80034ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dc01      	bgt.n	80034d8 <__sflush_r+0x1c>
 80034d4:	2000      	movs	r0, #0
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034da:	2e00      	cmp	r6, #0
 80034dc:	d0fa      	beq.n	80034d4 <__sflush_r+0x18>
 80034de:	2300      	movs	r3, #0
 80034e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034e4:	682f      	ldr	r7, [r5, #0]
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	d032      	beq.n	8003550 <__sflush_r+0x94>
 80034ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	075a      	lsls	r2, r3, #29
 80034f0:	d505      	bpl.n	80034fe <__sflush_r+0x42>
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	1ac0      	subs	r0, r0, r3
 80034f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034f8:	b10b      	cbz	r3, 80034fe <__sflush_r+0x42>
 80034fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fc:	1ac0      	subs	r0, r0, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	4602      	mov	r2, r0
 8003502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003504:	4628      	mov	r0, r5
 8003506:	6a21      	ldr	r1, [r4, #32]
 8003508:	47b0      	blx	r6
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	d106      	bne.n	800351e <__sflush_r+0x62>
 8003510:	6829      	ldr	r1, [r5, #0]
 8003512:	291d      	cmp	r1, #29
 8003514:	d82c      	bhi.n	8003570 <__sflush_r+0xb4>
 8003516:	4a29      	ldr	r2, [pc, #164]	; (80035bc <__sflush_r+0x100>)
 8003518:	40ca      	lsrs	r2, r1
 800351a:	07d6      	lsls	r6, r2, #31
 800351c:	d528      	bpl.n	8003570 <__sflush_r+0xb4>
 800351e:	2200      	movs	r2, #0
 8003520:	6062      	str	r2, [r4, #4]
 8003522:	6922      	ldr	r2, [r4, #16]
 8003524:	04d9      	lsls	r1, r3, #19
 8003526:	6022      	str	r2, [r4, #0]
 8003528:	d504      	bpl.n	8003534 <__sflush_r+0x78>
 800352a:	1c42      	adds	r2, r0, #1
 800352c:	d101      	bne.n	8003532 <__sflush_r+0x76>
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	b903      	cbnz	r3, 8003534 <__sflush_r+0x78>
 8003532:	6560      	str	r0, [r4, #84]	; 0x54
 8003534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003536:	602f      	str	r7, [r5, #0]
 8003538:	2900      	cmp	r1, #0
 800353a:	d0cb      	beq.n	80034d4 <__sflush_r+0x18>
 800353c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003540:	4299      	cmp	r1, r3
 8003542:	d002      	beq.n	800354a <__sflush_r+0x8e>
 8003544:	4628      	mov	r0, r5
 8003546:	f7ff fb17 	bl	8002b78 <_free_r>
 800354a:	2000      	movs	r0, #0
 800354c:	6360      	str	r0, [r4, #52]	; 0x34
 800354e:	e7c2      	b.n	80034d6 <__sflush_r+0x1a>
 8003550:	6a21      	ldr	r1, [r4, #32]
 8003552:	2301      	movs	r3, #1
 8003554:	4628      	mov	r0, r5
 8003556:	47b0      	blx	r6
 8003558:	1c41      	adds	r1, r0, #1
 800355a:	d1c7      	bne.n	80034ec <__sflush_r+0x30>
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0c4      	beq.n	80034ec <__sflush_r+0x30>
 8003562:	2b1d      	cmp	r3, #29
 8003564:	d001      	beq.n	800356a <__sflush_r+0xae>
 8003566:	2b16      	cmp	r3, #22
 8003568:	d101      	bne.n	800356e <__sflush_r+0xb2>
 800356a:	602f      	str	r7, [r5, #0]
 800356c:	e7b2      	b.n	80034d4 <__sflush_r+0x18>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	e7ae      	b.n	80034d6 <__sflush_r+0x1a>
 8003578:	690f      	ldr	r7, [r1, #16]
 800357a:	2f00      	cmp	r7, #0
 800357c:	d0aa      	beq.n	80034d4 <__sflush_r+0x18>
 800357e:	0793      	lsls	r3, r2, #30
 8003580:	bf18      	it	ne
 8003582:	2300      	movne	r3, #0
 8003584:	680e      	ldr	r6, [r1, #0]
 8003586:	bf08      	it	eq
 8003588:	694b      	ldreq	r3, [r1, #20]
 800358a:	1bf6      	subs	r6, r6, r7
 800358c:	600f      	str	r7, [r1, #0]
 800358e:	608b      	str	r3, [r1, #8]
 8003590:	2e00      	cmp	r6, #0
 8003592:	dd9f      	ble.n	80034d4 <__sflush_r+0x18>
 8003594:	4633      	mov	r3, r6
 8003596:	463a      	mov	r2, r7
 8003598:	4628      	mov	r0, r5
 800359a:	6a21      	ldr	r1, [r4, #32]
 800359c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80035a0:	47e0      	blx	ip
 80035a2:	2800      	cmp	r0, #0
 80035a4:	dc06      	bgt.n	80035b4 <__sflush_r+0xf8>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	e790      	b.n	80034d6 <__sflush_r+0x1a>
 80035b4:	4407      	add	r7, r0
 80035b6:	1a36      	subs	r6, r6, r0
 80035b8:	e7ea      	b.n	8003590 <__sflush_r+0xd4>
 80035ba:	bf00      	nop
 80035bc:	20400001 	.word	0x20400001

080035c0 <_fflush_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	4605      	mov	r5, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	b913      	cbnz	r3, 80035d0 <_fflush_r+0x10>
 80035ca:	2500      	movs	r5, #0
 80035cc:	4628      	mov	r0, r5
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	b118      	cbz	r0, 80035da <_fflush_r+0x1a>
 80035d2:	6983      	ldr	r3, [r0, #24]
 80035d4:	b90b      	cbnz	r3, 80035da <_fflush_r+0x1a>
 80035d6:	f000 f887 	bl	80036e8 <__sinit>
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <_fflush_r+0x6c>)
 80035dc:	429c      	cmp	r4, r3
 80035de:	d11b      	bne.n	8003618 <_fflush_r+0x58>
 80035e0:	686c      	ldr	r4, [r5, #4]
 80035e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ef      	beq.n	80035ca <_fflush_r+0xa>
 80035ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035ec:	07d0      	lsls	r0, r2, #31
 80035ee:	d404      	bmi.n	80035fa <_fflush_r+0x3a>
 80035f0:	0599      	lsls	r1, r3, #22
 80035f2:	d402      	bmi.n	80035fa <_fflush_r+0x3a>
 80035f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f6:	f000 f915 	bl	8003824 <__retarget_lock_acquire_recursive>
 80035fa:	4628      	mov	r0, r5
 80035fc:	4621      	mov	r1, r4
 80035fe:	f7ff ff5d 	bl	80034bc <__sflush_r>
 8003602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003604:	4605      	mov	r5, r0
 8003606:	07da      	lsls	r2, r3, #31
 8003608:	d4e0      	bmi.n	80035cc <_fflush_r+0xc>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	059b      	lsls	r3, r3, #22
 800360e:	d4dd      	bmi.n	80035cc <_fflush_r+0xc>
 8003610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003612:	f000 f908 	bl	8003826 <__retarget_lock_release_recursive>
 8003616:	e7d9      	b.n	80035cc <_fflush_r+0xc>
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_fflush_r+0x70>)
 800361a:	429c      	cmp	r4, r3
 800361c:	d101      	bne.n	8003622 <_fflush_r+0x62>
 800361e:	68ac      	ldr	r4, [r5, #8]
 8003620:	e7df      	b.n	80035e2 <_fflush_r+0x22>
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <_fflush_r+0x74>)
 8003624:	429c      	cmp	r4, r3
 8003626:	bf08      	it	eq
 8003628:	68ec      	ldreq	r4, [r5, #12]
 800362a:	e7da      	b.n	80035e2 <_fflush_r+0x22>
 800362c:	08003c5c 	.word	0x08003c5c
 8003630:	08003c7c 	.word	0x08003c7c
 8003634:	08003c3c 	.word	0x08003c3c

08003638 <std>:
 8003638:	2300      	movs	r3, #0
 800363a:	b510      	push	{r4, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	e9c0 3300 	strd	r3, r3, [r0]
 8003642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003646:	6083      	str	r3, [r0, #8]
 8003648:	8181      	strh	r1, [r0, #12]
 800364a:	6643      	str	r3, [r0, #100]	; 0x64
 800364c:	81c2      	strh	r2, [r0, #14]
 800364e:	6183      	str	r3, [r0, #24]
 8003650:	4619      	mov	r1, r3
 8003652:	2208      	movs	r2, #8
 8003654:	305c      	adds	r0, #92	; 0x5c
 8003656:	f7ff f9e3 	bl	8002a20 <memset>
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <std+0x38>)
 800365c:	6224      	str	r4, [r4, #32]
 800365e:	6263      	str	r3, [r4, #36]	; 0x24
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <std+0x3c>)
 8003662:	62a3      	str	r3, [r4, #40]	; 0x28
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <std+0x40>)
 8003666:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <std+0x44>)
 800366a:	6323      	str	r3, [r4, #48]	; 0x30
 800366c:	bd10      	pop	{r4, pc}
 800366e:	bf00      	nop
 8003670:	080039b1 	.word	0x080039b1
 8003674:	080039d3 	.word	0x080039d3
 8003678:	08003a0b 	.word	0x08003a0b
 800367c:	08003a2f 	.word	0x08003a2f

08003680 <_cleanup_r>:
 8003680:	4901      	ldr	r1, [pc, #4]	; (8003688 <_cleanup_r+0x8>)
 8003682:	f000 b8af 	b.w	80037e4 <_fwalk_reent>
 8003686:	bf00      	nop
 8003688:	080035c1 	.word	0x080035c1

0800368c <__sfmoreglue>:
 800368c:	2268      	movs	r2, #104	; 0x68
 800368e:	b570      	push	{r4, r5, r6, lr}
 8003690:	1e4d      	subs	r5, r1, #1
 8003692:	4355      	muls	r5, r2
 8003694:	460e      	mov	r6, r1
 8003696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800369a:	f7ff fad5 	bl	8002c48 <_malloc_r>
 800369e:	4604      	mov	r4, r0
 80036a0:	b140      	cbz	r0, 80036b4 <__sfmoreglue+0x28>
 80036a2:	2100      	movs	r1, #0
 80036a4:	e9c0 1600 	strd	r1, r6, [r0]
 80036a8:	300c      	adds	r0, #12
 80036aa:	60a0      	str	r0, [r4, #8]
 80036ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036b0:	f7ff f9b6 	bl	8002a20 <memset>
 80036b4:	4620      	mov	r0, r4
 80036b6:	bd70      	pop	{r4, r5, r6, pc}

080036b8 <__sfp_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sfp_lock_acquire+0x8>)
 80036ba:	f000 b8b3 	b.w	8003824 <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	20000545 	.word	0x20000545

080036c4 <__sfp_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	; (80036cc <__sfp_lock_release+0x8>)
 80036c6:	f000 b8ae 	b.w	8003826 <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	20000545 	.word	0x20000545

080036d0 <__sinit_lock_acquire>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__sinit_lock_acquire+0x8>)
 80036d2:	f000 b8a7 	b.w	8003824 <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	20000546 	.word	0x20000546

080036dc <__sinit_lock_release>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sinit_lock_release+0x8>)
 80036de:	f000 b8a2 	b.w	8003826 <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	20000546 	.word	0x20000546

080036e8 <__sinit>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4604      	mov	r4, r0
 80036ec:	f7ff fff0 	bl	80036d0 <__sinit_lock_acquire>
 80036f0:	69a3      	ldr	r3, [r4, #24]
 80036f2:	b11b      	cbz	r3, 80036fc <__sinit+0x14>
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f7ff bff0 	b.w	80036dc <__sinit_lock_release>
 80036fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003700:	6523      	str	r3, [r4, #80]	; 0x50
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <__sinit+0x68>)
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <__sinit+0x6c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	62a2      	str	r2, [r4, #40]	; 0x28
 800370a:	42a3      	cmp	r3, r4
 800370c:	bf08      	it	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	4620      	mov	r0, r4
 8003712:	bf08      	it	eq
 8003714:	61a3      	streq	r3, [r4, #24]
 8003716:	f000 f81f 	bl	8003758 <__sfp>
 800371a:	6060      	str	r0, [r4, #4]
 800371c:	4620      	mov	r0, r4
 800371e:	f000 f81b 	bl	8003758 <__sfp>
 8003722:	60a0      	str	r0, [r4, #8]
 8003724:	4620      	mov	r0, r4
 8003726:	f000 f817 	bl	8003758 <__sfp>
 800372a:	2200      	movs	r2, #0
 800372c:	2104      	movs	r1, #4
 800372e:	60e0      	str	r0, [r4, #12]
 8003730:	6860      	ldr	r0, [r4, #4]
 8003732:	f7ff ff81 	bl	8003638 <std>
 8003736:	2201      	movs	r2, #1
 8003738:	2109      	movs	r1, #9
 800373a:	68a0      	ldr	r0, [r4, #8]
 800373c:	f7ff ff7c 	bl	8003638 <std>
 8003740:	2202      	movs	r2, #2
 8003742:	2112      	movs	r1, #18
 8003744:	68e0      	ldr	r0, [r4, #12]
 8003746:	f7ff ff77 	bl	8003638 <std>
 800374a:	2301      	movs	r3, #1
 800374c:	61a3      	str	r3, [r4, #24]
 800374e:	e7d1      	b.n	80036f4 <__sinit+0xc>
 8003750:	08003b54 	.word	0x08003b54
 8003754:	08003681 	.word	0x08003681

08003758 <__sfp>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	4607      	mov	r7, r0
 800375c:	f7ff ffac 	bl	80036b8 <__sfp_lock_acquire>
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <__sfp+0x84>)
 8003762:	681e      	ldr	r6, [r3, #0]
 8003764:	69b3      	ldr	r3, [r6, #24]
 8003766:	b913      	cbnz	r3, 800376e <__sfp+0x16>
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbd 	bl	80036e8 <__sinit>
 800376e:	3648      	adds	r6, #72	; 0x48
 8003770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003774:	3b01      	subs	r3, #1
 8003776:	d503      	bpl.n	8003780 <__sfp+0x28>
 8003778:	6833      	ldr	r3, [r6, #0]
 800377a:	b30b      	cbz	r3, 80037c0 <__sfp+0x68>
 800377c:	6836      	ldr	r6, [r6, #0]
 800377e:	e7f7      	b.n	8003770 <__sfp+0x18>
 8003780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003784:	b9d5      	cbnz	r5, 80037bc <__sfp+0x64>
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <__sfp+0x88>)
 8003788:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800378c:	60e3      	str	r3, [r4, #12]
 800378e:	6665      	str	r5, [r4, #100]	; 0x64
 8003790:	f000 f847 	bl	8003822 <__retarget_lock_init_recursive>
 8003794:	f7ff ff96 	bl	80036c4 <__sfp_lock_release>
 8003798:	2208      	movs	r2, #8
 800379a:	4629      	mov	r1, r5
 800379c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037a4:	6025      	str	r5, [r4, #0]
 80037a6:	61a5      	str	r5, [r4, #24]
 80037a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037ac:	f7ff f938 	bl	8002a20 <memset>
 80037b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037b8:	4620      	mov	r0, r4
 80037ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037bc:	3468      	adds	r4, #104	; 0x68
 80037be:	e7d9      	b.n	8003774 <__sfp+0x1c>
 80037c0:	2104      	movs	r1, #4
 80037c2:	4638      	mov	r0, r7
 80037c4:	f7ff ff62 	bl	800368c <__sfmoreglue>
 80037c8:	4604      	mov	r4, r0
 80037ca:	6030      	str	r0, [r6, #0]
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d1d5      	bne.n	800377c <__sfp+0x24>
 80037d0:	f7ff ff78 	bl	80036c4 <__sfp_lock_release>
 80037d4:	230c      	movs	r3, #12
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	e7ee      	b.n	80037b8 <__sfp+0x60>
 80037da:	bf00      	nop
 80037dc:	08003b54 	.word	0x08003b54
 80037e0:	ffff0001 	.word	0xffff0001

080037e4 <_fwalk_reent>:
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e8:	4606      	mov	r6, r0
 80037ea:	4688      	mov	r8, r1
 80037ec:	2700      	movs	r7, #0
 80037ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037f6:	f1b9 0901 	subs.w	r9, r9, #1
 80037fa:	d505      	bpl.n	8003808 <_fwalk_reent+0x24>
 80037fc:	6824      	ldr	r4, [r4, #0]
 80037fe:	2c00      	cmp	r4, #0
 8003800:	d1f7      	bne.n	80037f2 <_fwalk_reent+0xe>
 8003802:	4638      	mov	r0, r7
 8003804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003808:	89ab      	ldrh	r3, [r5, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d907      	bls.n	800381e <_fwalk_reent+0x3a>
 800380e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003812:	3301      	adds	r3, #1
 8003814:	d003      	beq.n	800381e <_fwalk_reent+0x3a>
 8003816:	4629      	mov	r1, r5
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	4307      	orrs	r7, r0
 800381e:	3568      	adds	r5, #104	; 0x68
 8003820:	e7e9      	b.n	80037f6 <_fwalk_reent+0x12>

08003822 <__retarget_lock_init_recursive>:
 8003822:	4770      	bx	lr

08003824 <__retarget_lock_acquire_recursive>:
 8003824:	4770      	bx	lr

08003826 <__retarget_lock_release_recursive>:
 8003826:	4770      	bx	lr

08003828 <__swhatbuf_r>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	460e      	mov	r6, r1
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	4614      	mov	r4, r2
 8003832:	2900      	cmp	r1, #0
 8003834:	461d      	mov	r5, r3
 8003836:	b096      	sub	sp, #88	; 0x58
 8003838:	da08      	bge.n	800384c <__swhatbuf_r+0x24>
 800383a:	2200      	movs	r2, #0
 800383c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	061a      	lsls	r2, r3, #24
 8003844:	d410      	bmi.n	8003868 <__swhatbuf_r+0x40>
 8003846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384a:	e00e      	b.n	800386a <__swhatbuf_r+0x42>
 800384c:	466a      	mov	r2, sp
 800384e:	f000 f915 	bl	8003a7c <_fstat_r>
 8003852:	2800      	cmp	r0, #0
 8003854:	dbf1      	blt.n	800383a <__swhatbuf_r+0x12>
 8003856:	9a01      	ldr	r2, [sp, #4]
 8003858:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800385c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003860:	425a      	negs	r2, r3
 8003862:	415a      	adcs	r2, r3
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	e7ee      	b.n	8003846 <__swhatbuf_r+0x1e>
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	2000      	movs	r0, #0
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	b016      	add	sp, #88	; 0x58
 8003870:	bd70      	pop	{r4, r5, r6, pc}
	...

08003874 <__smakebuf_r>:
 8003874:	898b      	ldrh	r3, [r1, #12]
 8003876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003878:	079d      	lsls	r5, r3, #30
 800387a:	4606      	mov	r6, r0
 800387c:	460c      	mov	r4, r1
 800387e:	d507      	bpl.n	8003890 <__smakebuf_r+0x1c>
 8003880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	2301      	movs	r3, #1
 800388a:	6163      	str	r3, [r4, #20]
 800388c:	b002      	add	sp, #8
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	466a      	mov	r2, sp
 8003892:	ab01      	add	r3, sp, #4
 8003894:	f7ff ffc8 	bl	8003828 <__swhatbuf_r>
 8003898:	9900      	ldr	r1, [sp, #0]
 800389a:	4605      	mov	r5, r0
 800389c:	4630      	mov	r0, r6
 800389e:	f7ff f9d3 	bl	8002c48 <_malloc_r>
 80038a2:	b948      	cbnz	r0, 80038b8 <__smakebuf_r+0x44>
 80038a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a8:	059a      	lsls	r2, r3, #22
 80038aa:	d4ef      	bmi.n	800388c <__smakebuf_r+0x18>
 80038ac:	f023 0303 	bic.w	r3, r3, #3
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	e7e3      	b.n	8003880 <__smakebuf_r+0xc>
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <__smakebuf_r+0x7c>)
 80038ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	6020      	str	r0, [r4, #0]
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	9b00      	ldr	r3, [sp, #0]
 80038c8:	6120      	str	r0, [r4, #16]
 80038ca:	6163      	str	r3, [r4, #20]
 80038cc:	9b01      	ldr	r3, [sp, #4]
 80038ce:	b15b      	cbz	r3, 80038e8 <__smakebuf_r+0x74>
 80038d0:	4630      	mov	r0, r6
 80038d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038d6:	f000 f8e3 	bl	8003aa0 <_isatty_r>
 80038da:	b128      	cbz	r0, 80038e8 <__smakebuf_r+0x74>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	89a0      	ldrh	r0, [r4, #12]
 80038ea:	4305      	orrs	r5, r0
 80038ec:	81a5      	strh	r5, [r4, #12]
 80038ee:	e7cd      	b.n	800388c <__smakebuf_r+0x18>
 80038f0:	08003681 	.word	0x08003681

080038f4 <memchr>:
 80038f4:	4603      	mov	r3, r0
 80038f6:	b510      	push	{r4, lr}
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	4402      	add	r2, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	d101      	bne.n	8003906 <memchr+0x12>
 8003902:	2000      	movs	r0, #0
 8003904:	e003      	b.n	800390e <memchr+0x1a>
 8003906:	7804      	ldrb	r4, [r0, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	428c      	cmp	r4, r1
 800390c:	d1f6      	bne.n	80038fc <memchr+0x8>
 800390e:	bd10      	pop	{r4, pc}

08003910 <__malloc_lock>:
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <__malloc_lock+0x8>)
 8003912:	f7ff bf87 	b.w	8003824 <__retarget_lock_acquire_recursive>
 8003916:	bf00      	nop
 8003918:	20000544 	.word	0x20000544

0800391c <__malloc_unlock>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__malloc_unlock+0x8>)
 800391e:	f7ff bf82 	b.w	8003826 <__retarget_lock_release_recursive>
 8003922:	bf00      	nop
 8003924:	20000544 	.word	0x20000544

08003928 <_raise_r>:
 8003928:	291f      	cmp	r1, #31
 800392a:	b538      	push	{r3, r4, r5, lr}
 800392c:	4604      	mov	r4, r0
 800392e:	460d      	mov	r5, r1
 8003930:	d904      	bls.n	800393c <_raise_r+0x14>
 8003932:	2316      	movs	r3, #22
 8003934:	6003      	str	r3, [r0, #0]
 8003936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800393e:	b112      	cbz	r2, 8003946 <_raise_r+0x1e>
 8003940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003944:	b94b      	cbnz	r3, 800395a <_raise_r+0x32>
 8003946:	4620      	mov	r0, r4
 8003948:	f000 f830 	bl	80039ac <_getpid_r>
 800394c:	462a      	mov	r2, r5
 800394e:	4601      	mov	r1, r0
 8003950:	4620      	mov	r0, r4
 8003952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003956:	f000 b817 	b.w	8003988 <_kill_r>
 800395a:	2b01      	cmp	r3, #1
 800395c:	d00a      	beq.n	8003974 <_raise_r+0x4c>
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	d103      	bne.n	800396a <_raise_r+0x42>
 8003962:	2316      	movs	r3, #22
 8003964:	6003      	str	r3, [r0, #0]
 8003966:	2001      	movs	r0, #1
 8003968:	e7e7      	b.n	800393a <_raise_r+0x12>
 800396a:	2400      	movs	r4, #0
 800396c:	4628      	mov	r0, r5
 800396e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003972:	4798      	blx	r3
 8003974:	2000      	movs	r0, #0
 8003976:	e7e0      	b.n	800393a <_raise_r+0x12>

08003978 <raise>:
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <raise+0xc>)
 800397a:	4601      	mov	r1, r0
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	f7ff bfd3 	b.w	8003928 <_raise_r>
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <_kill_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	2300      	movs	r3, #0
 800398c:	4d06      	ldr	r5, [pc, #24]	; (80039a8 <_kill_r+0x20>)
 800398e:	4604      	mov	r4, r0
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	f7fd f97d 	bl	8000c94 <_kill>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	d102      	bne.n	80039a4 <_kill_r+0x1c>
 800399e:	682b      	ldr	r3, [r5, #0]
 80039a0:	b103      	cbz	r3, 80039a4 <_kill_r+0x1c>
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	20000548 	.word	0x20000548

080039ac <_getpid_r>:
 80039ac:	f7fd b96b 	b.w	8000c86 <_getpid>

080039b0 <__sread>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	460c      	mov	r4, r1
 80039b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b8:	f000 f894 	bl	8003ae4 <_read_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	bfab      	itete	ge
 80039c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039c2:	89a3      	ldrhlt	r3, [r4, #12]
 80039c4:	181b      	addge	r3, r3, r0
 80039c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ca:	bfac      	ite	ge
 80039cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039ce:	81a3      	strhlt	r3, [r4, #12]
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <__swrite>:
 80039d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	461f      	mov	r7, r3
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	4605      	mov	r5, r0
 80039dc:	05db      	lsls	r3, r3, #23
 80039de:	460c      	mov	r4, r1
 80039e0:	4616      	mov	r6, r2
 80039e2:	d505      	bpl.n	80039f0 <__swrite+0x1e>
 80039e4:	2302      	movs	r3, #2
 80039e6:	2200      	movs	r2, #0
 80039e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ec:	f000 f868 	bl	8003ac0 <_lseek_r>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	4632      	mov	r2, r6
 80039f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	4628      	mov	r0, r5
 80039fc:	463b      	mov	r3, r7
 80039fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	f000 b817 	b.w	8003a38 <_write_r>

08003a0a <__sseek>:
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a12:	f000 f855 	bl	8003ac0 <_lseek_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	bf15      	itete	ne
 8003a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a26:	81a3      	strheq	r3, [r4, #12]
 8003a28:	bf18      	it	ne
 8003a2a:	81a3      	strhne	r3, [r4, #12]
 8003a2c:	bd10      	pop	{r4, pc}

08003a2e <__sclose>:
 8003a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a32:	f000 b813 	b.w	8003a5c <_close_r>
	...

08003a38 <_write_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	2200      	movs	r2, #0
 8003a42:	4d05      	ldr	r5, [pc, #20]	; (8003a58 <_write_r+0x20>)
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd f95b 	bl	8000d02 <_write>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_write_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_write_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20000548 	.word	0x20000548

08003a5c <_close_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4d05      	ldr	r5, [pc, #20]	; (8003a78 <_close_r+0x1c>)
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fd f967 	bl	8000d3a <_close>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_close_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_close_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20000548 	.word	0x20000548

08003a7c <_fstat_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4d06      	ldr	r5, [pc, #24]	; (8003a9c <_fstat_r+0x20>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	f7fd f961 	bl	8000d50 <_fstat>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d102      	bne.n	8003a98 <_fstat_r+0x1c>
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	b103      	cbz	r3, 8003a98 <_fstat_r+0x1c>
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000548 	.word	0x20000548

08003aa0 <_isatty_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4d05      	ldr	r5, [pc, #20]	; (8003abc <_isatty_r+0x1c>)
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	f7fd f95f 	bl	8000d6e <_isatty>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_isatty_r+0x1a>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_isatty_r+0x1a>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20000548 	.word	0x20000548

08003ac0 <_lseek_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4d05      	ldr	r5, [pc, #20]	; (8003ae0 <_lseek_r+0x20>)
 8003acc:	602a      	str	r2, [r5, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7fd f957 	bl	8000d82 <_lseek>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_lseek_r+0x1e>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_lseek_r+0x1e>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	20000548 	.word	0x20000548

08003ae4 <_read_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	4d05      	ldr	r5, [pc, #20]	; (8003b04 <_read_r+0x20>)
 8003af0:	602a      	str	r2, [r5, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f7fd f8e8 	bl	8000cc8 <_read>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_read_r+0x1e>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_read_r+0x1e>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	20000548 	.word	0x20000548

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
